{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:ban */\n\nfunction isEnableOutput(): boolean {\n    return !!atom.config.get(\"language-review.debug\");\n}\n\ninterface CallSite {\n    getThis(): any;\n    getTypeName(): string;\n    getFunction(): Function;\n    getFunctionName(): string;\n    getMethodName(): string;\n    getFileName(): string;\n    getLineNumber(): number;\n    getColumnNumber(): number;\n    getEvalOrigin(): any;\n    isToplevel(): boolean;\n    isEval(): boolean;\n    isNative(): boolean;\n    isConstructor(): boolean;\n}\n\nfunction getCallSites(strip = 2): CallSite[] {\n    class MyError extends Error {\n        constructor() {\n            super();\n            (Error as any).captureStackTrace(this, MyError);\n        }\n    }\n\n    let oldPrepareStackTrace = (Error as any).prepareStackTrace;\n    let callSites: any[];\n    (Error as any).prepareStackTrace = (_error: any, stack: any) => {\n        callSites = stack;\n        return stack;\n    };\n    new MyError().stack;\n    (Error as any).prepareStackTrace = oldPrepareStackTrace;\n\n    if (!callSites) {\n        // NOTE https://github.com/atom/atom/pull/9181\n        // Error.prepareStackTrace が上書きできない\n        return null;\n    }\n\n    for (let i = 0; i < strip; i++) {\n        callSites.shift();\n    }\n\n    return callSites;\n}\n\nfunction logHelper(callback: () => void): void {\n    let callSites = getCallSites(3);\n    if (callSites) {\n        let callSite = callSites[0];\n        let label: string;\n        let functionName = callSite.getFunctionName();\n        if (functionName) {\n            label = functionName;\n        } else {\n            let fileName = callSite.getFileName();\n            label = `${fileName.substr(fileName.lastIndexOf(\"/\") + 1)}:${callSite.getLineNumber()}:${callSite.getColumnNumber()}`;\n        }\n        console.group(label);\n        console.log([callSite.getFileName(), callSite.getLineNumber(), callSite.getColumnNumber()]);\n        callback();\n        console.groupEnd();\n    } else {\n        callback();\n    }\n}\n\n/* tslint:disable:no-unused-variable */\n\nexport function log(...args: any[]): void {\n    if (isEnableOutput()) {\n        logHelper(() => {\n            console.log.apply(console, args);\n        });\n    }\n}\n\nexport function warn(...args: any[]): void {\n    if (isEnableOutput()) {\n        logHelper(() => {\n            console.warn.apply(console, args);\n        });\n    }\n}\n\nexport function error(...args: any[]): void {\n    if (isEnableOutput()) {\n        logHelper(() => {\n            console.error.apply(console, args);\n        });\n    }\n}\n\n/* tslint:enable:ban no-unused-variable */\n"]}