{"version":3,"file":"language-review.js","sourceRoot":"","sources":["language-review.ts"],"names":[],"mappings":"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","sourcesContent":["import * as url from \"url\";\n\nimport * as apd from \"atom-package-deps\";\n\nimport * as V from \"./util/const\";\nimport * as logger from \"./util/logger\";\nimport linter from \"./linter\";\nimport ReVIEWPreviewView from \"./view/review-preview-view\";\nimport ReVIEWOutlineView from \"./view/review-outline-view\";\nimport ReVIEWSyntaxListView from \"./view/review-syntax-list-view\";\n\nclass Controller {\n    config = {\n        debug: {\n            title: \"Debug: language-review. please do not use this option.\",\n            type: \"boolean\",\n            default: false,\n        },\n        grammar: {\n            title: \"grammer scope. please do not change this option.\",\n            type: \"string\",\n            default: V.reviewScopeName,\n        },\n    };\n\n    editorViewSubscription: { off(): any; };\n    outlineView: ReVIEWOutlineView;\n\n    provideLinter() {\n        return {\n            name: \"review.js\",\n            grammarScopes: [V.reviewScopeName],\n            scope: \"file\", // or \"project\"\n            lintOnFly: false,\n            lint: linter,\n        };\n    }\n\n    activate(): void {\n        apd.install(\"language-review\").then(() => {\n            logger.log(\"dependency installed\");\n        });\n        this.readyToActivate();\n    }\n\n    readyToActivate() {\n        atom.commands.add(\"atom-workspace\", V.protocol + \"toggle-preview\", () => {\n            this.togglePreview();\n        });\n        atom.commands.add(\"atom-workspace\", V.protocol + \"toggle-outline\", () => {\n            this.toggleOutline();\n        });\n        atom.commands.add(\"atom-workspace\", V.protocol + \"toggle-syntax-list\", () => {\n            this.toggleSyntaxList();\n        });\n\n        atom.workspace.addOpener((urlToOpen: string): View => {\n            logger.log(urlToOpen);\n            let tmpUrl = url.parse(urlToOpen);\n\n            let pathName = tmpUrl.pathname;\n            if (pathName) {\n                pathName = decodeURI(pathName);\n            }\n\n            let protocol = tmpUrl.protocol;\n            if (protocol !== V.protocol) {\n                return null;\n            }\n            let host = tmpUrl.host;\n            if (host === V.previewHost) {\n                return new ReVIEWPreviewView({ editorId: pathName.substring(1) });\n            } else if (host === V.syntaxListHost) {\n                return new ReVIEWSyntaxListView({ editorId: pathName.substring(1) });\n            }\n            return null;\n        });\n    }\n\n    deactivate() {\n    }\n\n    togglePreview(): void {\n        let editor = atom.workspace.getActiveTextEditor();\n        if (!editor) {\n            return;\n        }\n\n        if (atom.config.get(\"language-review.grammar\") !== editor.getGrammar().scopeName) {\n            return;\n        }\n\n        let uri = `${V.protocol}//${V.previewHost}/${editor.id}`;\n\n        let previewPane = atom.workspace.paneForURI(uri);\n\n        if (previewPane) {\n            previewPane.destroyItem(previewPane.itemForURI(uri));\n            return;\n        }\n\n        let previousActivePane = atom.workspace.getActivePane();\n\n        atom.workspace.open(uri, {\n            split: \"right\",\n            searchAllPanes: true,\n        }).then(view => {\n            if (view instanceof ReVIEWPreviewView) {\n                (<ReVIEWPreviewView>view).renderReVIEW();\n                previousActivePane.activate();\n            }\n        });\n    }\n\n    toggleOutline() {\n        if (!this.outlineView) {\n            this.outlineView = new ReVIEWOutlineView();\n        }\n        this.outlineView.toggle();\n    }\n\n    toggleSyntaxList() {\n        let editor = atom.workspace.getActiveTextEditor();\n        if (!editor) {\n            return;\n        }\n\n        if (atom.config.get(\"language-review.grammar\") !== editor.getGrammar().scopeName) {\n            return;\n        }\n\n        let uri = `${V.protocol}//${V.syntaxListHost}/${editor.id}`;\n\n        let previewPane = atom.workspace.paneForURI(uri);\n\n        if (previewPane) {\n            previewPane.destroyItem(previewPane.itemForURI(uri));\n            return;\n        }\n\n        let previousActivePane = atom.workspace.getActivePane();\n\n        atom.workspace.open(uri, {\n            split: \"right\",\n            searchAllPanes: true,\n        }).done(view => {\n            if (view instanceof ReVIEWSyntaxListView) {\n                (<ReVIEWSyntaxListView>view).renderSyntaxList();\n                previousActivePane.activate();\n            }\n        });\n    }\n}\n\nlet controller: any = new Controller();\nexport = controller;\n"]}