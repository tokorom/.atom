{"version":3,"file":"linter.js","sourceRoot":"","sources":["linter.ts"],"names":[],"mappings":";AAAA,qBAAsB,MAAM,CAAC,CAAA;AAE7B,IAAY,MAAM,WAAM,WAAW,CAAC,CAAA;AACpC,8BAAyB,sBAAsB,CAAC,CAAA;AAChD,IAAY,MAAM,WAAM,eAAe,CAAC,CAAA;AAWxC,gBAA+B,MAAwB;IACnD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,OAAO;QAChC,IAAI,YAAY,GAAG,IAAI,uBAAY,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QACxD,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAA,OAAO;YAC7B,MAAM,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;YAClD,YAAY,CAAC,UAAU,EAAE,CAAC;YAC1B,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,YAAY,CAAC,aAAa,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;AACP,CAAC;AAVD;wBAUC,CAAA;AAED,6BAA6B,MAAwB,EAAE,OAA+B;IAClF,MAAM,CAAC,OAAO;SACT,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,WAAW,CAAC,IAAI,EAAxC,CAAwC,CAAC;SAC1D,GAAG,CAAC,UAAC,MAAM;QACR,IAAI,IAAY,CAAC;QACjB,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACnB,KAAK,MAAM,CAAC,WAAW,CAAC,KAAK;gBACzB,IAAI,GAAG,OAAO,CAAC;gBACf,KAAK,CAAC;YACV,KAAK,MAAM,CAAC,WAAW,CAAC,OAAO;gBAC3B,IAAI,GAAG,SAAS,CAAC;gBACjB,KAAK,CAAC;YACV,QAAQ;QACZ,CAAC;QAED,IAAI,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC;YACH,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,MAAM,CAAC,OAAO;YACpB,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAE;YAC1B,KAAK,EAAE,KAAK;SACf,CAAC;IACN,CAAC,CAAC,CAAC;AACX,CAAC;AAED,2BAA2B,IAAyB;IAChD,MAAM,CAAC,YAAK,CAAC,UAAU,CAAC;QACpB,KAAK,EAAE;YACH,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;YACjC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;SACzC;QACD,GAAG,EAAE;YACD,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;YACjC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;SAC5F;KACJ,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { Range } from \"atom\";\n\nimport * as ReVIEW from \"review.js\";\nimport ReVIEWRunner from \"./util/review-runner\";\nimport * as logger from \"./util/logger\";\n\ninterface LinterError {\n    type: string;\n    text?: string;\n    html?: string;\n    filePath?: string;\n    range?: TextBuffer.IRange;\n    trace?: {}[];\n}\n\nexport default function linter(editor: AtomCore.IEditor): Promise<LinterError[]> {\n    return new Promise((resolve, _reject) => {\n        let reviewRunner = new ReVIEWRunner({ editor: editor });\n        reviewRunner.on(\"report\", reports => {\n            logger.log(\"Re:VIEW linter ReVIEWRunner compile\");\n            reviewRunner.deactivate();\n            resolve(reportToLintMessage(editor, reports));\n        });\n        reviewRunner.startWatching();\n    });\n}\n\nfunction reportToLintMessage(editor: AtomCore.IEditor, reports: ReVIEW.ProcessReport[]): LinterError[] {\n    return reports\n        .filter(report => report.level !== ReVIEW.ReportLevel.Info)\n        .map((report): LinterError => {\n            let type: string;\n            switch (report.level) {\n                case ReVIEW.ReportLevel.Error:\n                    type = \"Error\";\n                    break;\n                case ReVIEW.ReportLevel.Warning:\n                    type = \"Warning\";\n                    break;\n                default:\n            }\n\n            let range = syntaxTreeToRange(report.nodes[0]);\n            return {\n                type: type,\n                text: report.message,\n                filePath: editor.getPath(),\n                range: range,\n            };\n        });\n}\n\nfunction syntaxTreeToRange(node: ReVIEW.NodeLocation): TextBuffer.IRange {\n    return Range.fromObject({\n        start: {\n            row: node.location.start.line - 1,\n            column: node.location.start.column - 1,\n        },\n        end: {\n            row: node.location.start.line - 1,\n            column: node.location.end ? node.location.end.column - 1 : node.location.start.column - 1,\n        },\n    });\n}\n"]}