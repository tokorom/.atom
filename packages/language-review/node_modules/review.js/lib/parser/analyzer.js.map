{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { t } from \"../i18n/i18n\";\n\nimport { AnalyzerError } from \"../js/exception\";\n\nimport { Process } from \"../model/compilerModel\";\n\nimport { SyntaxTree, InlineElementSyntaxTree, BlockElementSyntaxTree, HeadlineSyntaxTree, ColumnSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree } from \"../parser/parser\";\n\nimport { nodeContentToString } from \"../utils/utils\";\n\n/**\n * 構文のタイプ。\n */\nexport enum SyntaxType {\n    Block,\n    Inline,\n    Other\n}\n\n/**\n * Analyzer内で生成され実際にValidator内でSyntaxTreeの処理を行う処理。\n */\nexport interface AnalyzeProcessor {\n    (process: Process, node: SyntaxTree): any;\n}\n\n/**\n * ReVIEW文書として受理可能な要素群。\n * JSON.stringify でJSON化した時、エディタ上での入力補完に活用できるデータが得られる。\n */\nexport class AcceptableSyntaxes {\n    constructor(public acceptableSyntaxes: AcceptableSyntax[]) {\n    }\n\n\t/**\n\t * 指定されたノードに当てはまる AcceptableSyntax を探して返す。\n\t * 長さが1じゃないとおかしい。(呼び出し元でチェックする)\n\t * @param node\n\t * @returns {AcceptableSyntax[]}\n\t */\n    find(node: SyntaxTree): AcceptableSyntax[] {\n        let results: AcceptableSyntax[];\n        if (node instanceof InlineElementSyntaxTree) {\n            let n = node;\n            results = this.inlines.filter(s => s.symbolName === n.symbol);\n        } else if (node instanceof BlockElementSyntaxTree) {\n            let n = node;\n            results = this.blocks.filter(s => s.symbolName === n.symbol);\n        } else {\n            results = this.others.filter(s => node instanceof s.clazz);\n        }\n        return results;\n    }\n\n    get inlines(): AcceptableSyntax[] {\n        return this.acceptableSyntaxes.filter(s => s.type === SyntaxType.Inline);\n    }\n\n    get blocks(): AcceptableSyntax[] {\n        return this.acceptableSyntaxes.filter(s => s.type === SyntaxType.Block);\n    }\n\n    get others(): AcceptableSyntax[] {\n        return this.acceptableSyntaxes.filter(s => s.type === SyntaxType.Other);\n    }\n\n    toJSON(): any {\n        // そのままJSON化するとAcceptableSyntax.typeの扱いに難儀すると思うので文字列に複合可能なデータを抱き合わせにする\n        return {\n            \"rev\": \"1\", // データフォーマットのリビジョン\n            \"SyntaxType\": SyntaxType,\n            \"acceptableSyntaxes\": this.acceptableSyntaxes\n        };\n    }\n}\n\n/**\n * ReVIEW文書として受理可能な要素。\n */\nexport class AcceptableSyntax {\n    type: SyntaxType;\n    clazz: any;\n    symbolName: string;\n    argsLength: number[] = [];\n    allowInline: boolean = true;\n    allowFullySyntax: boolean = false;\n    description: string;\n    process: AnalyzeProcessor;\n\n    toJSON(): any {\n        return {\n            \"type\": this.type,\n            \"class\": this.clazz ? this.clazz.name : void 0,\n            \"symbolName\": this.symbolName,\n            \"argsLength\": this.argsLength.length !== 0 ? this.argsLength : <any>(void 0),\n            \"description\": this.description\n        };\n    }\n}\n\n/**\n * 受理できる構文の定義を行う。\n * 実際に構文木の検査などを行うのはこの後段。\n */\nexport interface Analyzer {\n    getAcceptableSyntaxes(): AcceptableSyntaxes;\n}\n\n/**\n * 1つの構文についての構成要素を組み立てるためのビルダ。\n */\nexport interface AcceptableSyntaxBuilder {\n    setSyntaxType(type: SyntaxType): void;\n    setClass(clazz: any): void;\n    setSymbol(symbolName: string): void;\n    setDescription(description: string): void;\n    checkArgsLength(...argsLength: number[]): void;\n    setAllowInline(enable: boolean): void; // デフォルトtrue\n    setAllowFullySyntax(enable: boolean): void; // デフォルトfalse\n\n    processNode(func: AnalyzeProcessor): void;\n}\n\nclass AnalyzeProcess implements AcceptableSyntaxBuilder {\n    acceptableSyntaxes: AcceptableSyntax[] = [];\n\n    current: AcceptableSyntax;\n\n    prepare() {\n        this.current = new AcceptableSyntax();\n    }\n\n    build(methodName: string) {\n        if (methodName.indexOf(\"block_\") === 0) {\n            this.current.type = this.current.type || SyntaxType.Block;\n            this.current.symbolName = this.current.symbolName || methodName.substring(\"block_\".length);\n        } else if (methodName.indexOf(\"inline_\") === 0) {\n            this.current.type = this.current.type || SyntaxType.Inline;\n            this.current.symbolName = this.current.symbolName || methodName.substring(\"inline_\".length);\n        } else {\n            this.current.type = this.current.type || SyntaxType.Other;\n            this.current.symbolName = this.current.symbolName || methodName;\n        }\n\n        switch (this.current.type) {\n            case SyntaxType.Block:\n                if (this.current.argsLength.length === 0) {\n                    throw new AnalyzerError(\"must call builder.checkArgsLength(...number[]) in \" + methodName);\n                }\n                break;\n            case SyntaxType.Other:\n                if (!this.current.clazz) {\n                    throw new AnalyzerError(\"must call builder.setClass(class) in \" + methodName);\n                }\n                break;\n            case SyntaxType.Inline:\n                break;\n        }\n        if (!this.current.description) {\n            throw new AnalyzerError(\"must call builder.setDescription(string) in \" + methodName);\n        }\n        if (!this.current.process) {\n            throw new AnalyzerError(\"must call builder.processNode(func) in \" + methodName);\n        }\n\n        this.acceptableSyntaxes.push(this.current);\n    }\n\n    setSyntaxType(type: SyntaxType) {\n        this.current.type = type;\n    }\n\n    setClass(clazz: any) {\n        this.current.clazz = clazz;\n    }\n\n    setSymbol(symbolName: string) {\n        this.current.symbolName = symbolName;\n    }\n\n    setDescription(description: string) {\n        this.current.description = description;\n    }\n\n    checkArgsLength(...argsLength: number[]) {\n        this.current.argsLength = argsLength;\n    }\n\n    setAllowInline(enable: boolean) {\n        this.current.allowInline = enable;\n    }\n\n    setAllowFullySyntax(enable: boolean) {\n        this.current.allowFullySyntax = enable;\n    }\n\n    processNode(func: AnalyzeProcessor) {\n        this.current.process = func;\n    }\n}\n\nexport class DefaultAnalyzer implements Analyzer {\n    private _acceptableSyntaxes: AcceptableSyntax[];\n\n    getAcceptableSyntaxes(): AcceptableSyntaxes {\n        if (!this._acceptableSyntaxes) {\n            this._acceptableSyntaxes = this.constructAcceptableSyntaxes();\n        }\n        return new AcceptableSyntaxes(this._acceptableSyntaxes);\n    }\n\n    constructAcceptableSyntaxes(): AcceptableSyntax[] {\n        let process = new AnalyzeProcess();\n\n        for (let k in this) {\n            if (typeof (<any>this)[k] !== \"function\") {\n                continue;\n            }\n            let func: Function | null = null;\n            if (k.indexOf(\"block_\") === 0) {\n                func = (<any>this)[k];\n            } else if (k.indexOf(\"inline_\") === 0) {\n                func = (<any>this)[k];\n            } else if (k === \"headline\") {\n                func = (<any>this)[k];\n            } else if (k === \"column\") {\n                func = (<any>this)[k];\n            } else if (k === \"ulist\") {\n                func = (<any>this)[k];\n            } else if (k === \"olist\") {\n                func = (<any>this)[k];\n            } else if (k === \"dlist\") {\n                func = (<any>this)[k];\n            }\n            if (func) {\n                process.prepare();\n                func.bind(this)(process);\n                process.build(k);\n            }\n        }\n\n        return process.acceptableSyntaxes;\n    }\n\n    headline(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Other);\n        builder.setClass(HeadlineSyntaxTree);\n        builder.setDescription(t(\"description.headline\"));\n        builder.processNode((process, n) => {\n            let node = n.toHeadline();\n            let label: string | null = null;\n            if (node.label) {\n                label = node.label.arg;\n            } else {\n                label = nodeContentToString(process, node.caption);\n            }\n            process.addSymbol({\n                symbolName: \"hd\",\n                labelName: label,\n                node: node\n            });\n\n            // chap, title, chapref 用\n            if (node.level === 1) {\n                let label: string | null = null;\n                if (node.label) {\n                    label = node.label.arg;\n                } else {\n                    label = process.chapter!.name.substr(0, process.chapter!.name.lastIndexOf(\".re\"));\n                }\n                process.addSymbol({\n                    symbolName: \"chapter\",\n                    labelName: label,\n                    node: node\n                });\n            }\n        });\n    }\n\n    column(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Other);\n        builder.setClass(ColumnSyntaxTree);\n        builder.setDescription(t(\"description.column\"));\n        builder.processNode((process, n) => {\n            let node = n.toColumn();\n            node.no = process.nextIndex(\"column\");\n            process.addSymbol({\n                symbolName: \"column\",\n                node: node\n            });\n        });\n    }\n\n    ulist(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Other);\n        builder.setClass(UlistElementSyntaxTree);\n        builder.setDescription(t(\"description.ulist\"));\n        builder.processNode((process, n) => {\n            let node = n.toUlist();\n            process.addSymbol({\n                symbolName: \"ul\",\n                node: node\n            });\n        });\n    }\n\n    olist(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Other);\n        builder.setClass(OlistElementSyntaxTree);\n        builder.setDescription(t(\"description.olist\"));\n        builder.processNode((process, n) => {\n            let node = n.toOlist();\n            process.addSymbol({\n                symbolName: \"ol\",\n                node: node\n            });\n        });\n    }\n\n    dlist(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Other);\n        builder.setClass(DlistElementSyntaxTree);\n        builder.setDescription(t(\"description.dlist\"));\n        builder.processNode((process, n) => {\n            let node = n.toDlist();\n            process.addSymbol({\n                symbolName: \"dl\",\n                node: node\n            });\n        });\n    }\n\n    block_list(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"list\");\n        builder.setDescription(t(\"description.block_list\"));\n        builder.checkArgsLength(2, 3);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"list\");\n            process.addSymbol({\n                symbolName: node.symbol,\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    block_listnum(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"listnum\");\n        builder.setDescription(t(\"description.block_listnum\"));\n        builder.checkArgsLength(2, 3);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"list\");\n            process.addSymbol({\n                symbolName: \"list\",\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    inline_list(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"list\");\n        builder.setDescription(t(\"description.inline_list\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node)),\n                node: node\n            });\n        });\n    }\n\n    block_emlist(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"emlist\");\n        builder.setDescription(t(\"description.block_emlist\"));\n        builder.checkArgsLength(0, 1, 2);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_emlistnum(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"emlistnum\");\n        builder.setDescription(t(\"description.block_emlistnum\"));\n        builder.checkArgsLength(0, 1, 2);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: \"emlist\",\n                node: node\n            });\n        });\n    }\n\n    inline_hd(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"hd\");\n        builder.setDescription(t(\"description.inline_hd\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node)),\n                node: node\n            });\n        });\n    }\n\n    block_image(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"image\");\n        builder.setDescription(t(\"description.block_image\"));\n        builder.checkArgsLength(2, 3);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"image\");\n            process.addSymbol({\n                symbolName: node.symbol,\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    block_indepimage(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"indepimage\");\n        builder.setDescription(t(\"description.block_indepimage\"));\n        builder.checkArgsLength(1, 2, 3);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_graph(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"graph\");\n        builder.setDescription(t(\"description.block_graph\"));\n        builder.checkArgsLength(2, 3);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"image\");\n            process.addSymbol({\n                symbolName: \"image\",\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    inline_img(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"img\");\n        builder.setDescription(t(\"description.inline_img\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node), \"image\"),\n                node: node\n            });\n        });\n    }\n\n    inline_icon(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"icon\");\n        builder.setDescription(t(\"description.inline_icon\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_footnote(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"footnote\");\n        builder.setDescription(t(\"description.block_footnote\"));\n        builder.checkArgsLength(2);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"footnote\");\n            process.addSymbol({\n                symbolName: node.symbol,\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    inline_fn(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"fn\");\n        builder.setDescription(t(\"description.inline_fn\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node), \"footnote\"),\n                node: node\n            });\n        });\n    }\n\n    blockDecorationSyntax(builder: AcceptableSyntaxBuilder, symbol: string, ...argsLength: number[]) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(symbol);\n        builder.setDescription(t(\"description.block_\" + symbol));\n        builder.checkArgsLength.apply(builder, argsLength);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_lead(builder: AcceptableSyntaxBuilder) {\n        this.blockDecorationSyntax(builder, \"lead\", 0);\n        builder.setAllowFullySyntax(true);\n    }\n\n    block_noindent(builder: AcceptableSyntaxBuilder) {\n        this.blockDecorationSyntax(builder, \"noindent\", 0);\n    }\n\n    block_source(builder: AcceptableSyntaxBuilder) {\n        this.blockDecorationSyntax(builder, \"source\", 1);\n    }\n\n    block_cmd(builder: AcceptableSyntaxBuilder) {\n        this.blockDecorationSyntax(builder, \"cmd\", 0);\n    }\n\n    block_quote(builder: AcceptableSyntaxBuilder) {\n        this.blockDecorationSyntax(builder, \"quote\", 0);\n    }\n\n    inlineDecorationSyntax(builder: AcceptableSyntaxBuilder, symbol: string) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(symbol);\n        builder.setDescription(t(\"description.inline_\" + symbol));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    inline_br(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"br\");\n    }\n\n    inline_ruby(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"ruby\");\n    }\n\n    inline_b(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"b\");\n    }\n\n    inline_code(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"code\");\n    }\n\n    inline_tt(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"tt\");\n    }\n\n    inline_href(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"href\");\n    }\n\n    block_label(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"label\");\n        builder.setDescription(t(\"description.block_label\"));\n        builder.checkArgsLength(1);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"label\");\n            process.addSymbol({\n                symbolName: node.symbol,\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    inline_u(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"u\");\n    }\n\n    inline_kw(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"kw\");\n    }\n\n    inline_em(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"em\");\n    }\n\n    inline_tti(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"tti\");\n    }\n\n    inline_ttb(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"ttb\");\n    }\n\n    inline_ami(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"ami\");\n    }\n\n    inline_bou(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"bou\");\n    }\n\n    inline_i(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"i\");\n    }\n\n    inline_m(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"m\");\n    }\n\n    inline_strong(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"strong\");\n    }\n\n    inline_uchar(builder: AcceptableSyntaxBuilder) {\n        this.inlineDecorationSyntax(builder, \"uchar\");\n    }\n\n    block_table(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"table\");\n        builder.setDescription(t(\"description.block_table\"));\n        builder.checkArgsLength(2);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            node.no = process.nextIndex(\"table\");\n            process.addSymbol({\n                symbolName: node.symbol,\n                labelName: nodeContentToString(process, node.args[0]),\n                node: node\n            });\n        });\n    }\n\n    inline_table(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"table\");\n        builder.setDescription(t(\"description.inline_table\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node)),\n                node: node\n            });\n        });\n    }\n\n    block_tsize(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setDescription(t(\"description.block_tsize\"));\n        builder.checkArgsLength(1);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_raw(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"raw\");\n        builder.setDescription(t(\"description.block_raw\"));\n        builder.checkArgsLength(1);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    inline_raw(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"raw\");\n        builder.setDescription(t(\"description.inline_raw\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    block_comment(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Block);\n        builder.setSymbol(\"comment\");\n        builder.setDescription(t(\"description.block_comment\"));\n        builder.checkArgsLength(0);\n        builder.processNode((process, n) => {\n            let node = n.toBlockElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    inline_comment(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"comment\");\n        builder.setDescription(t(\"description.inline_comment\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                node: node\n            });\n        });\n    }\n\n    inline_chap(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"chap\");\n        builder.setDescription(t(\"description.inline_chap\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node), \"chapter\"),\n                node: node\n            });\n        });\n    }\n\n    inline_title(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"title\");\n        builder.setDescription(t(\"description.inline_title\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node), \"chapter\"),\n                node: node\n            });\n        });\n    }\n\n    inline_chapref(builder: AcceptableSyntaxBuilder) {\n        builder.setSyntaxType(SyntaxType.Inline);\n        builder.setSymbol(\"chapref\");\n        builder.setDescription(t(\"description.inline_chapref\"));\n        builder.processNode((process, n) => {\n            let node = n.toInlineElement();\n            process.addSymbol({\n                symbolName: node.symbol,\n                referenceTo: process.constructReferenceTo(node, nodeContentToString(process, node), \"chapter\"),\n                node: node\n            });\n        });\n    }\n\n    // TODO 以下のものの実装をすすめる\n    // ↑実装が簡単\n    // block_texequation // latexの式のやつなので…\n    // inline_m // latex のインラインのやつなので…\n    // クソめんどくさいの壁\n    // block_bibpaper\n    // inline_bib\n    // ↓実装が難しい\n}\n"]}