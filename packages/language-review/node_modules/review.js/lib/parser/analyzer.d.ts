import { Process } from "../model/compilerModel";
import { SyntaxTree } from "../parser/parser";
/**
 * 構文のタイプ。
 */
export declare enum SyntaxType {
    Block = 0,
    Inline = 1,
    Other = 2,
}
/**
 * Analyzer内で生成され実際にValidator内でSyntaxTreeの処理を行う処理。
 */
export interface AnalyzeProcessor {
    (process: Process, node: SyntaxTree): any;
}
/**
 * ReVIEW文書として受理可能な要素群。
 * JSON.stringify でJSON化した時、エディタ上での入力補完に活用できるデータが得られる。
 */
export declare class AcceptableSyntaxes {
    acceptableSyntaxes: AcceptableSyntax[];
    constructor(acceptableSyntaxes: AcceptableSyntax[]);
    /**
     * 指定されたノードに当てはまる AcceptableSyntax を探して返す。
     * 長さが1じゃないとおかしい。(呼び出し元でチェックする)
     * @param node
     * @returns {AcceptableSyntax[]}
     */
    find(node: SyntaxTree): AcceptableSyntax[];
    readonly inlines: AcceptableSyntax[];
    readonly blocks: AcceptableSyntax[];
    readonly others: AcceptableSyntax[];
    toJSON(): any;
}
/**
 * ReVIEW文書として受理可能な要素。
 */
export declare class AcceptableSyntax {
    type: SyntaxType;
    clazz: any;
    symbolName: string;
    argsLength: number[];
    allowInline: boolean;
    allowFullySyntax: boolean;
    description: string;
    process: AnalyzeProcessor;
    toJSON(): any;
}
/**
 * 受理できる構文の定義を行う。
 * 実際に構文木の検査などを行うのはこの後段。
 */
export interface Analyzer {
    getAcceptableSyntaxes(): AcceptableSyntaxes;
}
/**
 * 1つの構文についての構成要素を組み立てるためのビルダ。
 */
export interface AcceptableSyntaxBuilder {
    setSyntaxType(type: SyntaxType): void;
    setClass(clazz: any): void;
    setSymbol(symbolName: string): void;
    setDescription(description: string): void;
    checkArgsLength(...argsLength: number[]): void;
    setAllowInline(enable: boolean): void;
    setAllowFullySyntax(enable: boolean): void;
    processNode(func: AnalyzeProcessor): void;
}
export declare class DefaultAnalyzer implements Analyzer {
    private _acceptableSyntaxes;
    getAcceptableSyntaxes(): AcceptableSyntaxes;
    constructAcceptableSyntaxes(): AcceptableSyntax[];
    headline(builder: AcceptableSyntaxBuilder): void;
    column(builder: AcceptableSyntaxBuilder): void;
    ulist(builder: AcceptableSyntaxBuilder): void;
    olist(builder: AcceptableSyntaxBuilder): void;
    dlist(builder: AcceptableSyntaxBuilder): void;
    block_list(builder: AcceptableSyntaxBuilder): void;
    block_listnum(builder: AcceptableSyntaxBuilder): void;
    inline_list(builder: AcceptableSyntaxBuilder): void;
    block_emlist(builder: AcceptableSyntaxBuilder): void;
    block_emlistnum(builder: AcceptableSyntaxBuilder): void;
    inline_hd(builder: AcceptableSyntaxBuilder): void;
    block_image(builder: AcceptableSyntaxBuilder): void;
    block_indepimage(builder: AcceptableSyntaxBuilder): void;
    block_graph(builder: AcceptableSyntaxBuilder): void;
    inline_img(builder: AcceptableSyntaxBuilder): void;
    inline_icon(builder: AcceptableSyntaxBuilder): void;
    block_footnote(builder: AcceptableSyntaxBuilder): void;
    inline_fn(builder: AcceptableSyntaxBuilder): void;
    blockDecorationSyntax(builder: AcceptableSyntaxBuilder, symbol: string, ...argsLength: number[]): void;
    block_lead(builder: AcceptableSyntaxBuilder): void;
    block_noindent(builder: AcceptableSyntaxBuilder): void;
    block_source(builder: AcceptableSyntaxBuilder): void;
    block_cmd(builder: AcceptableSyntaxBuilder): void;
    block_quote(builder: AcceptableSyntaxBuilder): void;
    inlineDecorationSyntax(builder: AcceptableSyntaxBuilder, symbol: string): void;
    inline_br(builder: AcceptableSyntaxBuilder): void;
    inline_ruby(builder: AcceptableSyntaxBuilder): void;
    inline_b(builder: AcceptableSyntaxBuilder): void;
    inline_code(builder: AcceptableSyntaxBuilder): void;
    inline_tt(builder: AcceptableSyntaxBuilder): void;
    inline_href(builder: AcceptableSyntaxBuilder): void;
    block_label(builder: AcceptableSyntaxBuilder): void;
    inline_u(builder: AcceptableSyntaxBuilder): void;
    inline_kw(builder: AcceptableSyntaxBuilder): void;
    inline_em(builder: AcceptableSyntaxBuilder): void;
    inline_tti(builder: AcceptableSyntaxBuilder): void;
    inline_ttb(builder: AcceptableSyntaxBuilder): void;
    inline_ami(builder: AcceptableSyntaxBuilder): void;
    inline_bou(builder: AcceptableSyntaxBuilder): void;
    inline_i(builder: AcceptableSyntaxBuilder): void;
    inline_m(builder: AcceptableSyntaxBuilder): void;
    inline_strong(builder: AcceptableSyntaxBuilder): void;
    inline_uchar(builder: AcceptableSyntaxBuilder): void;
    block_table(builder: AcceptableSyntaxBuilder): void;
    inline_table(builder: AcceptableSyntaxBuilder): void;
    block_tsize(builder: AcceptableSyntaxBuilder): void;
    block_raw(builder: AcceptableSyntaxBuilder): void;
    inline_raw(builder: AcceptableSyntaxBuilder): void;
    block_comment(builder: AcceptableSyntaxBuilder): void;
    inline_comment(builder: AcceptableSyntaxBuilder): void;
    inline_chap(builder: AcceptableSyntaxBuilder): void;
    inline_title(builder: AcceptableSyntaxBuilder): void;
    inline_chapref(builder: AcceptableSyntaxBuilder): void;
}
