{"version":3,"file":"parser.js","sourceRoot":"","sources":["parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 構文解析用途のモジュール。\n */\n\n\"use strict\";\n\nimport * as PEG from \"../../resources/grammar\";\n\nimport { visit, walk } from \"./walker\";\n\n/**\n * 文字列をReVIEW文書として解釈し構文木を返す。\n * 解釈に失敗した場合、PEG.SyntaxError または ReVIEW.ParseError が投げられる。\n * @param input\n * @returns {{ast: NodeSyntaxTree, cst: *}}\n */\nexport function parse(input: string): { ast: NodeSyntaxTree; cst: ConcreatSyntaxTree; } {\n    \"use strict\";\n\n    let rawResult = PEG.parse(input);\n    let root = transform(rawResult) !.toNode();\n\n    // ParagraphSubs は構文上の都合であるだけのものなので潰す\n    visit(root, {\n        visitDefaultPre: (_ast: SyntaxTree) => {\n        },\n        visitParagraphPre: (ast: NodeSyntaxTree) => {\n            let subs = ast.childNodes[0].toNode();\n            ast.childNodes = subs.childNodes;\n        }\n    });\n\n    // Chapter を Headline の level に応じて構造を組み替える\n    //   level 2 は level 1 の下に来るようにしたい\n    if (root.childNodes.length !== 0) {\n        reconstruct(root.childNodes[0].toNode(), (chapter: ChapterSyntaxTree) => chapter.headline.level);\n    }\n    // Ulist もChapter 同様の level 構造があるので同じように処理したい\n    let ulistSet: NodeSyntaxTree[] = [];\n    visit(root, {\n        visitDefaultPre: (ast: SyntaxTree) => {\n            if (ast.ruleName === RuleName.Ulist) {\n                ulistSet.push(ast.toNode());\n            }\n        }\n    });\n    ulistSet.forEach((ulist) => {\n        reconstruct(ulist, (ulistElement: UlistElementSyntaxTree) => ulistElement.level);\n    });\n\n    // parentNode を設定\n    visit(root, {\n        visitDefaultPre: (ast: SyntaxTree, parent: SyntaxTree) => {\n            ast.parentNode = parent;\n        }\n    });\n    // prev, next を設定\n    visit(root, {\n        visitDefaultPre: (_ast: SyntaxTree, _parent: SyntaxTree) => {\n        },\n        visitChapterPre: (ast: ChapterSyntaxTree) => {\n            ast.text.forEach((node, i, nodes) => {\n                node.prev = nodes[i - 1];\n                node.next = nodes[i + 1];\n            });\n        },\n        visitColumnPre: (ast: ColumnSyntaxTree) => {\n            ast.text.forEach((node, i, nodes) => {\n                node.prev = nodes[i - 1];\n                node.next = nodes[i + 1];\n            });\n        },\n        visitNodePre: (ast: NodeSyntaxTree) => {\n            ast.childNodes.forEach((node, i, nodes) => {\n                node.prev = nodes[i - 1];\n                node.next = nodes[i + 1];\n            });\n        }\n    });\n    return {\n        ast: root,\n        cst: rawResult\n    };\n}\n\n/**\n * 具象構文木を抽象構文木に変換します。\n * @param rawResult\n * @returns {*}\n */\nexport function transform(rawResult: ConcreatSyntaxTree): SyntaxTree | null {\n    \"use strict\";\n\n    if (!rawResult) {\n        return null;\n    }\n    let rule: number = (<any>RuleName)[rawResult.syntax];\n    if (typeof rule === \"undefined\") {\n        throw new ParseError(rawResult, \"unknown rule: \" + rawResult.syntax);\n    }\n    switch (rule) {\n        case RuleName.Chapter:\n            return new ChapterSyntaxTree(rawResult);\n        case RuleName.BlockElement:\n            return new BlockElementSyntaxTree(rawResult);\n        case RuleName.Headline:\n            return new HeadlineSyntaxTree(rawResult);\n        case RuleName.InlineElement:\n            return new InlineElementSyntaxTree(rawResult);\n        case RuleName.Column:\n            return new ColumnSyntaxTree(rawResult);\n        case RuleName.ColumnHeadline:\n            return new ColumnHeadlineSyntaxTree(rawResult);\n        case RuleName.BraceArg:\n            return new ArgumentSyntaxTree(rawResult);\n        case RuleName.UlistElement:\n            return new UlistElementSyntaxTree(rawResult);\n        case RuleName.OlistElement:\n            return new OlistElementSyntaxTree(rawResult);\n        case RuleName.DlistElement:\n            return new DlistElementSyntaxTree(rawResult);\n        case RuleName.ContentText:\n        case RuleName.BracketArgText:\n        case RuleName.BlockElementContentText:\n        case RuleName.InlineElementContentText:\n        case RuleName.ContentInlineText:\n            return new TextNodeSyntaxTree(rawResult);\n        case RuleName.SinglelineComment:\n            return new SingleLineCommentSyntaxTree(rawResult);\n        // c, cc パターン\n        case RuleName.Chapters:\n        case RuleName.Contents:\n        case RuleName.ParagraphSubs:\n        case RuleName.BracketArgSubs:\n        case RuleName.BlockElementContents:\n        case RuleName.BlockElementParagraphSubs:\n        case RuleName.InlineElementContents:\n        case RuleName.ColumnContents:\n        case RuleName.ContentInlines:\n        case RuleName.Ulist:\n        case RuleName.Olist:\n        case RuleName.Dlist:\n        case RuleName.DlistElementContents:\n        case RuleName.SinglelineComments:\n            return new NodeSyntaxTree(rawResult);\n        // c パターン\n        case RuleName.Start:\n        case RuleName.Paragraph:\n        case RuleName.BracketArg:\n        case RuleName.BlockElementParagraph:\n        case RuleName.BlockElementParagraphSub:\n        case RuleName.DlistElementContent:\n            return new NodeSyntaxTree(rawResult);\n        // パースした内容は直接役にたたない c / c / c 系\n        case RuleName.Content:\n        case RuleName.ParagraphSub:\n        case RuleName.BracketArgSub:\n        case RuleName.BlockElementContent:\n        case RuleName.InlineElementContent:\n        case RuleName.ColumnContent:\n        case RuleName.SinglelineContent:\n        case RuleName.ContentInline:\n            return transform(rawResult.content);\n        default:\n            return new SyntaxTree(rawResult);\n    }\n}\n\n/**\n * 構文木の組替えを行う。\n * 主に兄弟ノードを親子ノードに組み替えるために使う。\n * @param node\n * @param pickLevel\n */\nfunction reconstruct(node: NodeSyntaxTree, pickLevel: (ast: NodeSyntaxTree) => number) {\n    \"use strict\";\n\n    let originalChildNodes = node.childNodes;\n\n    let nodeSets: { parent: NodeSyntaxTree | null; children: NodeSyntaxTree[]; }[] = [];\n    let currentSet: { parent: NodeSyntaxTree | null; children: NodeSyntaxTree[]; } = {\n        parent: null,\n        children: []\n    };\n\n    originalChildNodes.forEach((child: NodeSyntaxTree) => {\n        if (child.ruleName === RuleName.SinglelineComment) {\n            currentSet.children.push(child);\n        } else if (!currentSet.parent) {\n            currentSet.parent = child;\n\n        } else if (pickLevel(currentSet.parent) < pickLevel(child)) {\n            currentSet.children.push(child);\n\n        } else {\n            nodeSets.push(currentSet);\n            currentSet = {\n                parent: child,\n                children: []\n            };\n        }\n    });\n    if (currentSet.parent) {\n        nodeSets.push(currentSet);\n    }\n    node.childNodes = [];\n    nodeSets.forEach(nodes => {\n        const parent = nodes.parent;\n        if (parent) {\n            node.childNodes.push(parent);\n            nodes.children.forEach(child => {\n                parent.childNodes.push(child);\n            });\n            reconstruct(parent, pickLevel);\n        }\n    });\n}\n\n/**\n * 構文解析時に発生したエラー。\n */\nexport class ParseError implements Error {\n    name: string;\n\n    constructor(public syntax: ConcreatSyntaxTree, public message: string) {\n        if ((<any>Error).captureStackTrace) {\n            (<any>Error).captureStackTrace(this, ParseError);\n        }\n        this.name = \"ParseError\";\n    }\n}\n\nexport interface Location {\n    start: {\n        line: number;\n        column: number;\n        offset: number;\n    };\n    end?: {\n        line?: number;\n        column?: number;\n        offset?: number;\n    };\n}\n\n/**\n * 構文解析直後の生データ。\n */\nexport interface ConcreatSyntaxTree {\n    // 共通\n    syntax: string;\n    location: Location;\n\n    // Ruleによっては\n    comments?: any;\n    headline?: any;\n    text?: any;\n    level?: number;\n    label?: any;\n    cmd?: any;\n    caption?: any;\n    symbol?: any;\n    args?: any;\n    content?: any;\n    contents?: any;\n    arg?: any;\n    no?: any;\n}\n\n/**\n * 構文解析時のルール名。\n */\nexport enum RuleName {\n    SyntaxError,\n\n    Start,\n    Chapters,\n    Chapter,\n    Headline,\n    Contents,\n    Content,\n    Paragraph,\n    ParagraphSubs,\n    ParagraphSub,\n    ContentText,\n    BlockElement,\n    InlineElement,\n    BracketArg,\n    BracketArgSubs,\n    BracketArgSub,\n    BracketArgText,\n    BraceArg,\n    BlockElementContents,\n    BlockElementContent,\n    BlockElementParagraph,\n    BlockElementParagraphSubs,\n    BlockElementParagraphSub,\n    BlockElementContentText,\n    InlineElementContents,\n    InlineElementContent,\n    InlineElementContentText,\n    SinglelineContent,\n    ContentInlines,\n    ContentInline,\n    ContentInlineText,\n    Ulist,\n    UlistElement,\n    Olist,\n    OlistElement,\n    Dlist,\n    DlistElement,\n    DlistElementContents,\n    DlistElementContent,\n    Column,\n    ColumnHeadline,\n    ColumnContents,\n    ColumnContent,\n    ColumnTerminator,\n    SinglelineComments,\n    SinglelineComment,\n}\n\nexport interface NodeLocation {\n    location: Location;\n}\n\n/**\n * 構文解析後の少し加工したデータ。\n */\nexport class SyntaxTree implements NodeLocation {\n    parentNode: SyntaxTree;\n    location: Location;\n\n    ruleName: RuleName;\n    // analyzer 中で設定する項目\n    no: number;\n    prev: SyntaxTree;\n    next: SyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        this.ruleName = (<any>RuleName)[data.syntax];\n        if (typeof this.ruleName === \"undefined\") {\n            throw new ParseError(data, \"unknown rule: \" + data.syntax);\n        }\n        let end = data.location.end || data.location.start; // SyntaxErrorの時\n        this.location = {\n            start: {\n                line: data.location.start.line,\n                column: data.location.start.column,\n                offset: data.location.start.offset\n            },\n            end: {\n                line: end.line,\n                column: end.column,\n                offset: end.offset\n            }\n        };\n    }\n\n    toJSON(): any {\n        let result: any = {};\n        let lowPriorities: { (): void; }[] = [];\n        for (let k in this) {\n            if (k === \"ruleName\") {\n                result[k] = (<any>RuleName)[this.ruleName];\n            } else if (k === \"prev\" || k === \"next\" || k === \"parentNode\") {\n                // 無視する\n            } else if (k === \"childNodes\") {\n                // childNodesが先に来ると見づらいので\n                lowPriorities.push(((k: string) => {\n                    return () => {\n                        result[k] = (<any>this)[k];\n                    };\n                })(k));\n            } else if (k === \"fqn\") {\n                // TODO あとでちゃんと出るようにする\n            } else if (typeof (<any>this)[k] !== \"function\") {\n                result[k] = (<any>this)[k];\n            }\n        }\n        lowPriorities.forEach(fn => fn());\n        return result;\n    }\n\n    toString(indentLevel: number = 0): string {\n        let result = this.makeIndent(indentLevel) + \"SyntaxTree:[\\n\";\n        result += this.makeIndent(indentLevel + 1) + \"offset = \" + this.location.start.offset + \",\\n\";\n        result += this.makeIndent(indentLevel + 1) + \"line=\" + this.location.start.line + \",\\n\";\n        result += this.makeIndent(indentLevel + 1) + \"column=\" + this.location.start.column + \",\\n\";\n        result += this.makeIndent(indentLevel + 1) + \"name=\" + RuleName[this.ruleName] + \",\\n\";\n        this.toStringHook(indentLevel, result);\n        result += this.makeIndent(indentLevel) + \"]\";\n\n        return result;\n    }\n\n    makeIndent(indentLevel: number) {\n        let indent = \"\";\n        for (let i = 0; i < indentLevel; i++) {\n            indent += \"  \";\n        }\n        return indent;\n    }\n\n    toStringHook(_indentLevel: number, _result: string) {\n    }\n\n\t/**\n\t * 引数が数字かどうかチェックして違うならば例外を投げる。\n\t * @param value\n\t * @returns {*=}\n\t */\n    checkNumber(value: any): number {\n        if (typeof value !== \"number\") {\n            throw new Error(\"number required. actual:\" + (typeof value) + \":\" + value);\n        } else {\n            return value;\n        }\n    }\n\n\t/**\n\t * 引数が文字列かどうかチェックして違うならば例外を投げる。\n\t * @param value\n\t * @returns {*=}\n\t */\n    checkString(value: any): string {\n        if (typeof value !== \"string\") {\n            throw new Error(\"string required. actual:\" + (typeof value) + \":\" + value);\n        } else {\n            return value;\n        }\n    }\n\n\t/**\n\t * 引数がオブジェクトかどうかチェックして違うならば例外を投げる。\n\t * @param value\n\t * @returns {*=}\n\t */\n    checkObject(value: any): any {\n        if (typeof value !== \"object\") {\n            throw new Error(\"object required. actual:\" + (typeof value) + \":\" + value);\n        } else {\n            return value;\n        }\n    }\n\n\t/**\n\t * 引数がArrayかどうかチェックして違うならば例外を投げる。\n\t * @param value\n\t * @returns {*=}\n\t */\n    checkArray(value: any): any[] {\n        if (!Array.isArray(value)) {\n            console.log(JSON.stringify(value, null, 2));\n            throw new Error(\"array required. actual:\" + (typeof value) + \":\" + value);\n        } else {\n            return value;\n        }\n    }\n\n    private checkSyntaxType(clazz: any): boolean {\n        return this instanceof clazz;\n    }\n\n\n    isNode(): boolean {\n        return this.checkSyntaxType(NodeSyntaxTree);\n    }\n\n    isBlockElement(): boolean {\n        return this.checkSyntaxType(BlockElementSyntaxTree);\n    }\n\n    isInlineElement(): boolean {\n        return this.checkSyntaxType(InlineElementSyntaxTree);\n    }\n\n    isArgument(): boolean {\n        return this.checkSyntaxType(ArgumentSyntaxTree);\n    }\n\n    isChapter(): boolean {\n        return this.checkSyntaxType(ChapterSyntaxTree);\n    }\n\n    isHeadline(): boolean {\n        return this.checkSyntaxType(HeadlineSyntaxTree);\n    }\n\n    isUlist(): boolean {\n        return this.checkSyntaxType(UlistElementSyntaxTree);\n    }\n\n    isOlist(): boolean {\n        return this.checkSyntaxType(OlistElementSyntaxTree);\n    }\n\n    isDlist(): boolean {\n        return this.checkSyntaxType(DlistElementSyntaxTree);\n    }\n\n    isTextNode(): boolean {\n        return this.checkSyntaxType(TextNodeSyntaxTree);\n    }\n\n    isSingleLineComment(): boolean {\n        return this.checkSyntaxType(SingleLineCommentSyntaxTree);\n    }\n\n    private toOtherNode<T extends SyntaxTree>(clazz: any): T {\n        if (this instanceof clazz) {\n            return this as any as T;\n        } else {\n            throw new Error(\"this node is not \" + clazz.name + \", actual \" + (<any>this).constructor.name);\n        }\n    }\n\n\t/**\n\t * thisをNodeSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toNode(): NodeSyntaxTree {\n        return this.toOtherNode<NodeSyntaxTree>(NodeSyntaxTree);\n    }\n\n\t/**\n\t * thisをBlockElementSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toBlockElement(): BlockElementSyntaxTree {\n        return this.toOtherNode<BlockElementSyntaxTree>(BlockElementSyntaxTree);\n    }\n\n\t/**\n\t * thisをInlineElementSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toInlineElement(): InlineElementSyntaxTree {\n        return this.toOtherNode<InlineElementSyntaxTree>(InlineElementSyntaxTree);\n    }\n\n\t/**\n\t * thisをArgumentSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toArgument(): ArgumentSyntaxTree {\n        return this.toOtherNode<ArgumentSyntaxTree>(ArgumentSyntaxTree);\n    }\n\n\t/**\n\t * thisをChapterSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toChapter(): ChapterSyntaxTree {\n        return this.toOtherNode<ChapterSyntaxTree>(ChapterSyntaxTree);\n    }\n\n\t/**\n\t * thisをColumnSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toColumn(): ColumnSyntaxTree {\n        return this.toOtherNode<ColumnSyntaxTree>(ColumnSyntaxTree);\n    }\n\n\t/**\n\t * thisをHeadlineSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toHeadline(): HeadlineSyntaxTree {\n        return this.toOtherNode<HeadlineSyntaxTree>(HeadlineSyntaxTree);\n    }\n\n\t/**\n\t * thisをColumnHeadlineSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toColumnHeadline(): ColumnHeadlineSyntaxTree {\n        return this.toOtherNode<ColumnHeadlineSyntaxTree>(ColumnHeadlineSyntaxTree);\n    }\n\n\t/**\n\t * thisをUlistElementSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toUlist(): UlistElementSyntaxTree {\n        return this.toOtherNode<UlistElementSyntaxTree>(UlistElementSyntaxTree);\n    }\n\n\t/**\n\t * thisをOlistElementSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toOlist(): OlistElementSyntaxTree {\n        return this.toOtherNode<OlistElementSyntaxTree>(OlistElementSyntaxTree);\n    }\n\n\t/**\n\t * thisをDlistElementSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toDlist(): DlistElementSyntaxTree {\n        return this.toOtherNode<DlistElementSyntaxTree>(DlistElementSyntaxTree);\n    }\n\n\t/**\n\t * thisをTextNodeSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toTextNode(): TextNodeSyntaxTree {\n        return this.toOtherNode<TextNodeSyntaxTree>(TextNodeSyntaxTree);\n    }\n\n\t/**\n\t * thisをSingleLineCommentSyntaxTreeにcast可能か調べ、可能ならcastして返し、そうでなければ例外を投げる。\n\t */\n    toSingleLineCommentNode(): SingleLineCommentSyntaxTree {\n        return this.toOtherNode<SingleLineCommentSyntaxTree>(SingleLineCommentSyntaxTree);\n    }\n}\n\nexport class NodeSyntaxTree extends SyntaxTree {\n    childNodes: SyntaxTree[];\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.childNodes = [];\n        this.processChildNodes(data.content);\n    }\n\n    private processChildNodes(content: any) {\n        if (Array.isArray(content)) {\n            content.forEach((rawResult: ConcreatSyntaxTree) => {\n                let tree = transform(rawResult);\n                if (tree) {\n                    this.childNodes.push(tree);\n                }\n            });\n        } else if (content !== \"\" && content) {\n            ((rawResult: ConcreatSyntaxTree) => {\n                let tree = transform(rawResult);\n                if (tree) {\n                    this.childNodes.push(tree);\n                }\n            })(content);\n        }\n    }\n\n    toStringHook(indentLevel: number, result: string) {\n        if (this.childNodes.length !== 0) {\n            result += this.makeIndent(indentLevel + 1) + \"childNodes[\" + this.childNodes.length + \"]=[\\n\";\n            this.childNodes.forEach((node) => {\n                result += node.toString(indentLevel + 2);\n                result += \"\\n\";\n            });\n            result += this.makeIndent(indentLevel + 1) + \"]\\n\";\n        }\n    }\n}\n\n// TODO SyntaxTree と指定されている所についてもっと細かく書けるはず…\n\nexport class ChapterSyntaxTree extends NodeSyntaxTree {\n    comments: SingleLineCommentSyntaxTree[];\n    headline: HeadlineSyntaxTree;\n    text: SyntaxTree[];\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n\n        if (data.comments && data.comments.content) {\n            this.comments = this.checkArray(data.comments.content).map((data: ConcreatSyntaxTree) => {\n                return transform(data) !.toSingleLineCommentNode();\n            });\n        } else {\n            this.comments = [];\n        }\n        this.headline = transform(this.checkObject(data.headline)) !.toHeadline();\n        if (typeof data.text === \"string\" || data.text === null) {\n            this.text = [];\n            return;\n        }\n        this.text = this.checkArray(data.text.content).map((data: ConcreatSyntaxTree) => {\n            return transform(data) !;\n        });\n\n        delete this.childNodes; // JSON化した時の属性順制御のため…\n        this.childNodes = [];\n    }\n\n    get level(): number {\n        return this.headline.level;\n    }\n\n    get fqn(): string {\n        let chapters: ChapterSyntaxTree[] = [];\n        walk(this, (node: SyntaxTree) => {\n            if (node instanceof ChapterSyntaxTree) {\n                chapters.unshift(node);\n            }\n            return node.parentNode;\n        });\n        let result = chapters.map((chapter) => {\n            return chapter.no;\n        }).join(\".\");\n        return result;\n    }\n}\n\nexport class HeadlineSyntaxTree extends SyntaxTree {\n    level: number;\n    label: ArgumentSyntaxTree;\n    caption: NodeSyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n\n        this.level = this.checkNumber(data.level);\n        if (data.label) {\n            this.label = transform(this.checkObject(data.label)) !.toArgument();\n        }\n        this.caption = transform(this.checkObject(data.caption)) !.toNode();\n    }\n}\n\nexport class BlockElementSyntaxTree extends NodeSyntaxTree {\n    symbol: string;\n    args: NodeSyntaxTree[];\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.symbol = this.checkString(data.symbol);\n        this.args = this.checkArray(data.args).map((data: ConcreatSyntaxTree) => {\n            return transform(data) !.toNode();\n        });\n    }\n}\n\nexport class InlineElementSyntaxTree extends NodeSyntaxTree {\n    symbol: string;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.symbol = this.checkString(data.symbol);\n    }\n}\n\nexport class ColumnSyntaxTree extends NodeSyntaxTree {\n    headline: ColumnHeadlineSyntaxTree;\n    text: SyntaxTree[];\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n\n        this.headline = transform(this.checkObject(data.headline)) !.toColumnHeadline();\n        if (typeof data.text === \"string\" || data.text === null) {\n            this.text = [];\n            return;\n        }\n        this.text = this.checkArray(data.text.content).map((data: ConcreatSyntaxTree) => {\n            return transform(data) !;\n        });\n\n        delete this.childNodes; // JSON化した時の属性順制御のため…\n        this.childNodes = [];\n    }\n\n    get level(): number {\n        return this.headline.level;\n    }\n\n    get fqn(): string {\n        let chapters: ChapterSyntaxTree[] = [];\n        walk(this, (node: SyntaxTree) => {\n            if (node instanceof ChapterSyntaxTree) {\n                chapters.unshift(node);\n            }\n            return node.parentNode;\n        });\n        let result = chapters.map((chapter) => {\n            return chapter.no;\n        }).join(\".\");\n        return result;\n    }\n}\n\nexport class ColumnHeadlineSyntaxTree extends SyntaxTree {\n    level: number;\n    caption: NodeSyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n\n        this.level = this.checkNumber(data.level);\n        this.caption = transform(this.checkObject(data.caption)) !.toNode();\n    }\n}\n\nexport class ArgumentSyntaxTree extends SyntaxTree {\n    arg: string;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.arg = this.checkString(data.arg);\n    }\n}\n\nexport class UlistElementSyntaxTree extends NodeSyntaxTree {\n    level: number;\n    text: SyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.level = this.checkNumber(data.level);\n        this.text = transform(this.checkObject(data.text)) !;\n\n        delete this.childNodes; // JSON化した時の属性順制御のため…\n        this.childNodes = [];\n    }\n}\n\nexport class OlistElementSyntaxTree extends SyntaxTree {\n    no: number;\n    text: SyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.no = this.checkNumber(data.no);\n        this.text = transform(this.checkObject(data.text)) !;\n    }\n}\n\nexport class DlistElementSyntaxTree extends SyntaxTree {\n    text: SyntaxTree;\n    content: SyntaxTree;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.text = transform(this.checkObject(data.text)) !;\n        this.content = transform(this.checkObject(data.content)) !;\n    }\n}\n\nexport class TextNodeSyntaxTree extends SyntaxTree {\n    text: string;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.text = this.checkString(data.text).replace(/\\n+$/, \"\");\n    }\n}\n\nexport class SingleLineCommentSyntaxTree extends SyntaxTree {\n    text: string;\n\n    constructor(data: ConcreatSyntaxTree) {\n        super(data);\n        this.text = this.checkString(data.text).replace(/^#@/, \"\").replace(/\\n+$/, \"\");\n    }\n}\n"]}