"use strict";
var i18n_1 = require("../i18n/i18n");
var exception_1 = require("../js/exception");
var parser_1 = require("../parser/parser");
var utils_1 = require("../utils/utils");
/**
 * 構文のタイプ。
 */
(function (SyntaxType) {
    SyntaxType[SyntaxType["Block"] = 0] = "Block";
    SyntaxType[SyntaxType["Inline"] = 1] = "Inline";
    SyntaxType[SyntaxType["Other"] = 2] = "Other";
})(exports.SyntaxType || (exports.SyntaxType = {}));
var SyntaxType = exports.SyntaxType;
/**
 * ReVIEW文書として受理可能な要素群。
 * JSON.stringify でJSON化した時、エディタ上での入力補完に活用できるデータが得られる。
 */
var AcceptableSyntaxes = (function () {
    function AcceptableSyntaxes(acceptableSyntaxes) {
        this.acceptableSyntaxes = acceptableSyntaxes;
    }
    /**
     * 指定されたノードに当てはまる AcceptableSyntax を探して返す。
     * 長さが1じゃないとおかしい。(呼び出し元でチェックする)
     * @param node
     * @returns {AcceptableSyntax[]}
     */
    AcceptableSyntaxes.prototype.find = function (node) {
        var results;
        if (node instanceof parser_1.InlineElementSyntaxTree) {
            var n_1 = node;
            results = this.inlines.filter(function (s) { return s.symbolName === n_1.symbol; });
        }
        else if (node instanceof parser_1.BlockElementSyntaxTree) {
            var n_2 = node;
            results = this.blocks.filter(function (s) { return s.symbolName === n_2.symbol; });
        }
        else {
            results = this.others.filter(function (s) { return node instanceof s.clazz; });
        }
        return results;
    };
    Object.defineProperty(AcceptableSyntaxes.prototype, "inlines", {
        get: function () {
            return this.acceptableSyntaxes.filter(function (s) { return s.type === SyntaxType.Inline; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcceptableSyntaxes.prototype, "blocks", {
        get: function () {
            return this.acceptableSyntaxes.filter(function (s) { return s.type === SyntaxType.Block; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AcceptableSyntaxes.prototype, "others", {
        get: function () {
            return this.acceptableSyntaxes.filter(function (s) { return s.type === SyntaxType.Other; });
        },
        enumerable: true,
        configurable: true
    });
    AcceptableSyntaxes.prototype.toJSON = function () {
        // そのままJSON化するとAcceptableSyntax.typeの扱いに難儀すると思うので文字列に複合可能なデータを抱き合わせにする
        return {
            "rev": "1",
            "SyntaxType": SyntaxType,
            "acceptableSyntaxes": this.acceptableSyntaxes
        };
    };
    return AcceptableSyntaxes;
}());
exports.AcceptableSyntaxes = AcceptableSyntaxes;
/**
 * ReVIEW文書として受理可能な要素。
 */
var AcceptableSyntax = (function () {
    function AcceptableSyntax() {
        this.argsLength = [];
        this.allowInline = true;
        this.allowFullySyntax = false;
    }
    AcceptableSyntax.prototype.toJSON = function () {
        return {
            "type": this.type,
            "class": this.clazz ? this.clazz.name : void 0,
            "symbolName": this.symbolName,
            "argsLength": this.argsLength.length !== 0 ? this.argsLength : (void 0),
            "description": this.description
        };
    };
    return AcceptableSyntax;
}());
exports.AcceptableSyntax = AcceptableSyntax;
var AnalyzeProcess = (function () {
    function AnalyzeProcess() {
        this.acceptableSyntaxes = [];
    }
    AnalyzeProcess.prototype.prepare = function () {
        this.current = new AcceptableSyntax();
    };
    AnalyzeProcess.prototype.build = function (methodName) {
        if (methodName.indexOf("block_") === 0) {
            this.current.type = this.current.type || SyntaxType.Block;
            this.current.symbolName = this.current.symbolName || methodName.substring("block_".length);
        }
        else if (methodName.indexOf("inline_") === 0) {
            this.current.type = this.current.type || SyntaxType.Inline;
            this.current.symbolName = this.current.symbolName || methodName.substring("inline_".length);
        }
        else {
            this.current.type = this.current.type || SyntaxType.Other;
            this.current.symbolName = this.current.symbolName || methodName;
        }
        switch (this.current.type) {
            case SyntaxType.Block:
                if (this.current.argsLength.length === 0) {
                    throw new exception_1.AnalyzerError("must call builder.checkArgsLength(...number[]) in " + methodName);
                }
                break;
            case SyntaxType.Other:
                if (!this.current.clazz) {
                    throw new exception_1.AnalyzerError("must call builder.setClass(class) in " + methodName);
                }
                break;
            case SyntaxType.Inline:
                break;
        }
        if (!this.current.description) {
            throw new exception_1.AnalyzerError("must call builder.setDescription(string) in " + methodName);
        }
        if (!this.current.process) {
            throw new exception_1.AnalyzerError("must call builder.processNode(func) in " + methodName);
        }
        this.acceptableSyntaxes.push(this.current);
    };
    AnalyzeProcess.prototype.setSyntaxType = function (type) {
        this.current.type = type;
    };
    AnalyzeProcess.prototype.setClass = function (clazz) {
        this.current.clazz = clazz;
    };
    AnalyzeProcess.prototype.setSymbol = function (symbolName) {
        this.current.symbolName = symbolName;
    };
    AnalyzeProcess.prototype.setDescription = function (description) {
        this.current.description = description;
    };
    AnalyzeProcess.prototype.checkArgsLength = function () {
        var argsLength = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argsLength[_i - 0] = arguments[_i];
        }
        this.current.argsLength = argsLength;
    };
    AnalyzeProcess.prototype.setAllowInline = function (enable) {
        this.current.allowInline = enable;
    };
    AnalyzeProcess.prototype.setAllowFullySyntax = function (enable) {
        this.current.allowFullySyntax = enable;
    };
    AnalyzeProcess.prototype.processNode = function (func) {
        this.current.process = func;
    };
    return AnalyzeProcess;
}());
var DefaultAnalyzer = (function () {
    function DefaultAnalyzer() {
    }
    DefaultAnalyzer.prototype.getAcceptableSyntaxes = function () {
        if (!this._acceptableSyntaxes) {
            this._acceptableSyntaxes = this.constructAcceptableSyntaxes();
        }
        return new AcceptableSyntaxes(this._acceptableSyntaxes);
    };
    DefaultAnalyzer.prototype.constructAcceptableSyntaxes = function () {
        var process = new AnalyzeProcess();
        for (var k in this) {
            if (typeof this[k] !== "function") {
                continue;
            }
            var func = null;
            if (k.indexOf("block_") === 0) {
                func = this[k];
            }
            else if (k.indexOf("inline_") === 0) {
                func = this[k];
            }
            else if (k === "headline") {
                func = this[k];
            }
            else if (k === "column") {
                func = this[k];
            }
            else if (k === "ulist") {
                func = this[k];
            }
            else if (k === "olist") {
                func = this[k];
            }
            else if (k === "dlist") {
                func = this[k];
            }
            if (func) {
                process.prepare();
                func.bind(this)(process);
                process.build(k);
            }
        }
        return process.acceptableSyntaxes;
    };
    DefaultAnalyzer.prototype.headline = function (builder) {
        builder.setSyntaxType(SyntaxType.Other);
        builder.setClass(parser_1.HeadlineSyntaxTree);
        builder.setDescription(i18n_1.t("description.headline"));
        builder.processNode(function (process, n) {
            var node = n.toHeadline();
            var label = null;
            if (node.label) {
                label = node.label.arg;
            }
            else {
                label = utils_1.nodeContentToString(process, node.caption);
            }
            process.addSymbol({
                symbolName: "hd",
                labelName: label,
                node: node
            });
            // chap, title, chapref 用
            if (node.level === 1) {
                var label_1 = null;
                if (node.label) {
                    label_1 = node.label.arg;
                }
                else {
                    label_1 = process.chapter.name.substr(0, process.chapter.name.lastIndexOf(".re"));
                }
                process.addSymbol({
                    symbolName: "chapter",
                    labelName: label_1,
                    node: node
                });
            }
        });
    };
    DefaultAnalyzer.prototype.column = function (builder) {
        builder.setSyntaxType(SyntaxType.Other);
        builder.setClass(parser_1.ColumnSyntaxTree);
        builder.setDescription(i18n_1.t("description.column"));
        builder.processNode(function (process, n) {
            var node = n.toColumn();
            node.no = process.nextIndex("column");
            process.addSymbol({
                symbolName: "column",
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.ulist = function (builder) {
        builder.setSyntaxType(SyntaxType.Other);
        builder.setClass(parser_1.UlistElementSyntaxTree);
        builder.setDescription(i18n_1.t("description.ulist"));
        builder.processNode(function (process, n) {
            var node = n.toUlist();
            process.addSymbol({
                symbolName: "ul",
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.olist = function (builder) {
        builder.setSyntaxType(SyntaxType.Other);
        builder.setClass(parser_1.OlistElementSyntaxTree);
        builder.setDescription(i18n_1.t("description.olist"));
        builder.processNode(function (process, n) {
            var node = n.toOlist();
            process.addSymbol({
                symbolName: "ol",
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.dlist = function (builder) {
        builder.setSyntaxType(SyntaxType.Other);
        builder.setClass(parser_1.DlistElementSyntaxTree);
        builder.setDescription(i18n_1.t("description.dlist"));
        builder.processNode(function (process, n) {
            var node = n.toDlist();
            process.addSymbol({
                symbolName: "dl",
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_list = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("list");
        builder.setDescription(i18n_1.t("description.block_list"));
        builder.checkArgsLength(2, 3);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("list");
            process.addSymbol({
                symbolName: node.symbol,
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_listnum = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("listnum");
        builder.setDescription(i18n_1.t("description.block_listnum"));
        builder.checkArgsLength(2, 3);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("list");
            process.addSymbol({
                symbolName: "list",
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_list = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("list");
        builder.setDescription(i18n_1.t("description.inline_list"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node)),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_emlist = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("emlist");
        builder.setDescription(i18n_1.t("description.block_emlist"));
        builder.checkArgsLength(0, 1, 2);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_emlistnum = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("emlistnum");
        builder.setDescription(i18n_1.t("description.block_emlistnum"));
        builder.checkArgsLength(0, 1, 2);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: "emlist",
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_hd = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("hd");
        builder.setDescription(i18n_1.t("description.inline_hd"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node)),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_image = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("image");
        builder.setDescription(i18n_1.t("description.block_image"));
        builder.checkArgsLength(2, 3);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("image");
            process.addSymbol({
                symbolName: node.symbol,
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_indepimage = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("indepimage");
        builder.setDescription(i18n_1.t("description.block_indepimage"));
        builder.checkArgsLength(1, 2, 3);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_graph = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("graph");
        builder.setDescription(i18n_1.t("description.block_graph"));
        builder.checkArgsLength(2, 3);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("image");
            process.addSymbol({
                symbolName: "image",
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_img = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("img");
        builder.setDescription(i18n_1.t("description.inline_img"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node), "image"),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_icon = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("icon");
        builder.setDescription(i18n_1.t("description.inline_icon"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_footnote = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("footnote");
        builder.setDescription(i18n_1.t("description.block_footnote"));
        builder.checkArgsLength(2);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("footnote");
            process.addSymbol({
                symbolName: node.symbol,
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_fn = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("fn");
        builder.setDescription(i18n_1.t("description.inline_fn"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node), "footnote"),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.blockDecorationSyntax = function (builder, symbol) {
        var argsLength = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            argsLength[_i - 2] = arguments[_i];
        }
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol(symbol);
        builder.setDescription(i18n_1.t("description.block_" + symbol));
        builder.checkArgsLength.apply(builder, argsLength);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_lead = function (builder) {
        this.blockDecorationSyntax(builder, "lead", 0);
        builder.setAllowFullySyntax(true);
    };
    DefaultAnalyzer.prototype.block_noindent = function (builder) {
        this.blockDecorationSyntax(builder, "noindent", 0);
    };
    DefaultAnalyzer.prototype.block_source = function (builder) {
        this.blockDecorationSyntax(builder, "source", 1);
    };
    DefaultAnalyzer.prototype.block_cmd = function (builder) {
        this.blockDecorationSyntax(builder, "cmd", 0);
    };
    DefaultAnalyzer.prototype.block_quote = function (builder) {
        this.blockDecorationSyntax(builder, "quote", 0);
    };
    DefaultAnalyzer.prototype.inlineDecorationSyntax = function (builder, symbol) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol(symbol);
        builder.setDescription(i18n_1.t("description.inline_" + symbol));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_br = function (builder) {
        this.inlineDecorationSyntax(builder, "br");
    };
    DefaultAnalyzer.prototype.inline_ruby = function (builder) {
        this.inlineDecorationSyntax(builder, "ruby");
    };
    DefaultAnalyzer.prototype.inline_b = function (builder) {
        this.inlineDecorationSyntax(builder, "b");
    };
    DefaultAnalyzer.prototype.inline_code = function (builder) {
        this.inlineDecorationSyntax(builder, "code");
    };
    DefaultAnalyzer.prototype.inline_tt = function (builder) {
        this.inlineDecorationSyntax(builder, "tt");
    };
    DefaultAnalyzer.prototype.inline_href = function (builder) {
        this.inlineDecorationSyntax(builder, "href");
    };
    DefaultAnalyzer.prototype.block_label = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("label");
        builder.setDescription(i18n_1.t("description.block_label"));
        builder.checkArgsLength(1);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("label");
            process.addSymbol({
                symbolName: node.symbol,
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_u = function (builder) {
        this.inlineDecorationSyntax(builder, "u");
    };
    DefaultAnalyzer.prototype.inline_kw = function (builder) {
        this.inlineDecorationSyntax(builder, "kw");
    };
    DefaultAnalyzer.prototype.inline_em = function (builder) {
        this.inlineDecorationSyntax(builder, "em");
    };
    DefaultAnalyzer.prototype.inline_tti = function (builder) {
        this.inlineDecorationSyntax(builder, "tti");
    };
    DefaultAnalyzer.prototype.inline_ttb = function (builder) {
        this.inlineDecorationSyntax(builder, "ttb");
    };
    DefaultAnalyzer.prototype.inline_ami = function (builder) {
        this.inlineDecorationSyntax(builder, "ami");
    };
    DefaultAnalyzer.prototype.inline_bou = function (builder) {
        this.inlineDecorationSyntax(builder, "bou");
    };
    DefaultAnalyzer.prototype.inline_i = function (builder) {
        this.inlineDecorationSyntax(builder, "i");
    };
    DefaultAnalyzer.prototype.inline_m = function (builder) {
        this.inlineDecorationSyntax(builder, "m");
    };
    DefaultAnalyzer.prototype.inline_strong = function (builder) {
        this.inlineDecorationSyntax(builder, "strong");
    };
    DefaultAnalyzer.prototype.inline_uchar = function (builder) {
        this.inlineDecorationSyntax(builder, "uchar");
    };
    DefaultAnalyzer.prototype.block_table = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("table");
        builder.setDescription(i18n_1.t("description.block_table"));
        builder.checkArgsLength(2);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            node.no = process.nextIndex("table");
            process.addSymbol({
                symbolName: node.symbol,
                labelName: utils_1.nodeContentToString(process, node.args[0]),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_table = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("table");
        builder.setDescription(i18n_1.t("description.inline_table"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node)),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_tsize = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setDescription(i18n_1.t("description.block_tsize"));
        builder.checkArgsLength(1);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_raw = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("raw");
        builder.setDescription(i18n_1.t("description.block_raw"));
        builder.checkArgsLength(1);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_raw = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("raw");
        builder.setDescription(i18n_1.t("description.inline_raw"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.block_comment = function (builder) {
        builder.setSyntaxType(SyntaxType.Block);
        builder.setSymbol("comment");
        builder.setDescription(i18n_1.t("description.block_comment"));
        builder.checkArgsLength(0);
        builder.processNode(function (process, n) {
            var node = n.toBlockElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_comment = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("comment");
        builder.setDescription(i18n_1.t("description.inline_comment"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_chap = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("chap");
        builder.setDescription(i18n_1.t("description.inline_chap"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node), "chapter"),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_title = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("title");
        builder.setDescription(i18n_1.t("description.inline_title"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node), "chapter"),
                node: node
            });
        });
    };
    DefaultAnalyzer.prototype.inline_chapref = function (builder) {
        builder.setSyntaxType(SyntaxType.Inline);
        builder.setSymbol("chapref");
        builder.setDescription(i18n_1.t("description.inline_chapref"));
        builder.processNode(function (process, n) {
            var node = n.toInlineElement();
            process.addSymbol({
                symbolName: node.symbol,
                referenceTo: process.constructReferenceTo(node, utils_1.nodeContentToString(process, node), "chapter"),
                node: node
            });
        });
    };
    return DefaultAnalyzer;
}());
exports.DefaultAnalyzer = DefaultAnalyzer;
//# sourceMappingURL=analyzer.js.map