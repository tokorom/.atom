"use strict";
var i18n_1 = require("../i18n/i18n");
var analyzer_1 = require("./analyzer");
var walker_1 = require("./walker");
var utils_1 = require("../utils/utils");
var DefaultValidator = (function () {
    function DefaultValidator() {
    }
    DefaultValidator.prototype.start = function (book, acceptableSyntaxes, builders) {
        this.acceptableSyntaxes = acceptableSyntaxes;
        this.builders = builders;
        this.checkBuilder(book, acceptableSyntaxes, builders);
        this.checkBook(book);
        this.resolveSymbolAndReference(book);
    };
    DefaultValidator.prototype.checkBuilder = function (book, acceptableSyntaxes, builders) {
        if (builders === void 0) { builders = []; }
        acceptableSyntaxes.acceptableSyntaxes.forEach(function (syntax) {
            var prefix = "";
            switch (syntax.type) {
                case analyzer_1.SyntaxType.Other:
                    // Other系は実装をチェックする必要はない…。(ということにしておく
                    return;
                case analyzer_1.SyntaxType.Block:
                    prefix = "block_";
                    break;
                case analyzer_1.SyntaxType.Inline:
                    prefix = "inline_";
                    break;
            }
            var funcName1 = prefix + syntax.symbolName;
            var funcName2 = prefix + syntax.symbolName + "_pre";
            builders.forEach(function (builder) {
                var func = builder[funcName1] || builder[funcName2];
                if (!func) {
                    book.process.error(analyzer_1.SyntaxType[syntax.type] + " " + syntax.symbolName + " is not supported in " + builder.name);
                }
            });
        });
    };
    DefaultValidator.prototype.checkBook = function (book) {
        var _this = this;
        book.predef.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.contents.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.appendix.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.postdef.forEach(function (chunk) { return _this.checkChunk(chunk); });
    };
    DefaultValidator.prototype.checkChunk = function (chunk) {
        var _this = this;
        // Analyzer 内で生成した構文規則に基づき処理
        walker_1.visit(chunk.tree.ast, {
            visitDefaultPre: function (_node) {
            },
            visitHeadlinePre: function (node) {
                var results = _this.acceptableSyntaxes.find(node);
                if (results.length !== 1) {
                    chunk.process.error(i18n_1.t("compile.syntax_definietion_error"), node);
                    return;
                }
                return results[0].process(chunk.process, node);
            },
            visitColumnPre: function (node) {
                var results = _this.acceptableSyntaxes.find(node);
                if (results.length !== 1) {
                    chunk.process.error(i18n_1.t("compile.syntax_definietion_error"), node);
                    return;
                }
                return results[0].process(chunk.process, node);
            },
            visitBlockElementPre: function (node) {
                var results = _this.acceptableSyntaxes.find(node);
                if (results.length !== 1) {
                    chunk.process.error(i18n_1.t("compile.block_not_supported", node.symbol), node);
                    return;
                }
                var expects = results[0].argsLength;
                var arg = node.args || [];
                if (expects.indexOf(arg.length) === -1) {
                    var expected = expects.map(function (n) { return Number(n).toString(); }).join(" or ");
                    var message = i18n_1.t("compile.args_length_mismatch", expected, arg.length);
                    chunk.process.error(message, node);
                    return;
                }
                return results[0].process(chunk.process, node);
            },
            visitInlineElementPre: function (node) {
                var results = _this.acceptableSyntaxes.find(node);
                if (results.length !== 1) {
                    chunk.process.error(i18n_1.t("compile.inline_not_supported", node.symbol), node);
                    return;
                }
                return results[0].process(chunk.process, node);
            }
        });
        // 最初は必ず Level 1
        walker_1.visit(chunk.tree.ast, {
            visitDefaultPre: function (_node) {
            },
            visitChapterPre: function (node) {
                if (node.level === 1) {
                    if (!utils_1.findChapter(node)) {
                        // ここに来るのは実装のバグのはず
                        chunk.process.error(i18n_1.t("compile.chapter_not_toplevel"), node);
                    }
                }
                else {
                    var parent_1 = utils_1.findChapter(node.parentNode);
                    if (!parent_1) {
                        chunk.process.error(i18n_1.t("compile.chapter_topleve_eq1"), node);
                    }
                }
            }
        });
        this.chechBlockGraphTool(chunk);
    };
    DefaultValidator.prototype.chechBlockGraphTool = function (chunk) {
        // graph記法の外部ツール利用について内容が正しいかチェックする
        walker_1.visit(chunk.tree.ast, {
            visitDefaultPre: function (_node) {
            },
            visitBlockElementPre: function (node) {
                if (node.symbol !== "graph") {
                    return;
                }
                var toolNameNode = node.args[1];
                if (!toolNameNode) {
                    // ここのNodeがないのは別でチェックするので気にしない
                    return;
                }
                var toolName = utils_1.nodeContentToString(chunk.process, toolNameNode);
                switch (toolName) {
                    case "graphviz":
                        break;
                    case "gnuplot":
                    case "blockdiag":
                    case "aafigure":
                        chunk.process.info(i18n_1.t("compile.graph_tool_is_not_recommended"), toolNameNode);
                        break;
                    default:
                        chunk.process.error(i18n_1.t("compile.unknown_graph_tool", toolName), toolNameNode);
                }
            }
        });
    };
    DefaultValidator.prototype.resolveSymbolAndReference = function (book) {
        // symbols の解決
        // Arrayにflatten がなくて悲しい reduce だと長い…
        var symbols = book.allChunks.reduce(function (p, c) { return p.concat(c.process.symbols); }, []);
        symbols.forEach(function (symbol) {
            // referenceToのpartやchapterの解決
            var referenceTo = symbol.referenceTo;
            if (!referenceTo) {
                return;
            }
            if (!referenceTo.part && referenceTo.partName) {
                book.allChunks.forEach(function (chunk) {
                    if (referenceTo.partName === chunk.name) {
                        referenceTo.part = chunk;
                    }
                });
            }
            if (!referenceTo.chapter && referenceTo.chapterName) {
                referenceTo.part.nodes.forEach(function (chunk) {
                    if (referenceTo.chapterName === chunk.name) {
                        referenceTo.chapter = chunk;
                    }
                });
            }
        });
        // referenceTo.node の解決
        symbols.forEach(function (symbol) {
            if (symbol.referenceTo && !symbol.referenceTo.referenceNode) {
                var reference_1 = symbol.referenceTo;
                symbols.forEach(function (symbol) {
                    if (reference_1.part === symbol.part && reference_1.chapter === symbol.chapter && reference_1.targetSymbol === symbol.symbolName && reference_1.label === symbol.labelName) {
                        reference_1.referenceNode = symbol.node;
                    }
                });
                if (!reference_1.referenceNode) {
                    symbol.chapter.process.error(i18n_1.t("compile.reference_is_missing", reference_1.targetSymbol, reference_1.label), symbol.node);
                    return;
                }
            }
        });
        // 同一チャプター内に同一シンボル(listとか)で同一labelの要素がないかチェック
        symbols.forEach(function (symbol1) {
            symbols.forEach(function (symbol2) {
                if (symbol1 === symbol2) {
                    return;
                }
                if (symbol1.chapter === symbol2.chapter && symbol1.symbolName === symbol2.symbolName) {
                    if (symbol1.labelName && symbol2.labelName && symbol1.labelName === symbol2.labelName) {
                        if (symbol1.symbolName === "hd") {
                            symbol1.chapter.process.error(i18n_1.t("compile.duplicated_label_headline"), symbol1.node, symbol2.node);
                        }
                        else {
                            symbol1.chapter.process.error(i18n_1.t("compile.duplicated_label"), symbol1.node, symbol2.node);
                        }
                        return;
                    }
                }
            });
        });
    };
    return DefaultValidator;
}());
exports.DefaultValidator = DefaultValidator;
//# sourceMappingURL=validator.js.map