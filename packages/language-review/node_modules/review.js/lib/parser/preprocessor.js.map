{"version":3,"file":"preprocessor.js","sourceRoot":"","sources":["preprocessor.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Book, ContentChunk } from \"../model/compilerModel\";\n\nimport { SyntaxTree, NodeSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, ColumnSyntaxTree, ChapterSyntaxTree, TextNodeSyntaxTree } from \"./parser\";\n\nimport { AcceptableSyntaxes } from \"./analyzer\";\n\nimport { visit } from \"./walker\";\n\nimport { nodeContentToString } from \"../utils/utils\";\n\n/**\n * 構文木の組み換えを行う機会を提供する。\n */\nexport interface Preprocessor {\n    start(book: Book, acceptableSyntaxes: AcceptableSyntaxes): void;\n}\n\n/**\n * インライン構文やブロック構文中で利用可能な構造について制限をかけ、構文木を組み替える。\n * 種類は主に3種類。\n * 1. テキストをベースとしてインライン構文のみ許可する(デフォルト\n * 2. 全て許可せずテキストとして扱う\n * 3. 全てを許可する(なにもしない\n * AcceptableSyntaxes にしたがって処理する。\n */\nexport class SyntaxPreprocessor implements Preprocessor {\n    acceptableSyntaxes: AcceptableSyntaxes;\n\n    start(book: Book) {\n        this.acceptableSyntaxes = book.acceptableSyntaxes;\n\n        book.predef.forEach(chunk => this.preprocessChunk(chunk));\n        book.contents.forEach(chunk => this.preprocessChunk(chunk));\n        book.appendix.forEach(chunk => this.preprocessChunk(chunk));\n        book.postdef.forEach(chunk => this.preprocessChunk(chunk));\n    }\n\n    preprocessChunk(chunk: ContentChunk) {\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitColumnPre: (node: ColumnSyntaxTree) => {\n                this.preprocessColumnSyntax(chunk, node);\n            },\n            visitBlockElementPre: (node: BlockElementSyntaxTree) => {\n                this.preprocessBlockSyntax(chunk, node);\n            }\n        });\n\n        chunk.nodes.forEach(chunk => this.preprocessChunk(chunk));\n    }\n\n\t/**\n\t * コラム記法を組み替える。\n\t * コラムの中ではHeadlineが使えるが、コラム自体の見出しレベルより深いレベルのHeadlineしか許可されない。\n\t * そのため、コラム自体より浅いレベルの見出しレベルを見つけたらコラム内から脱出させる。\n\t * @param chunk\n\t * @param column\n\t */\n    preprocessColumnSyntax(chunk: ContentChunk, column: ColumnSyntaxTree) {\n        function reconstruct(parent: NodeSyntaxTree, target: ChapterSyntaxTree, to = column.parentNode.toChapter()) {\n            if (target.level <= to.level) {\n                reconstruct(parent.parentNode.toNode(), target, to.parentNode.toChapter());\n                return;\n            }\n            // コラムより大きなChapterを見つけた場合、それ以下のノードは全て引き上げる\n            to.childNodes.splice(to.childNodes.indexOf(parent) + 1, 0, target);\n            column.text.splice(column.text.indexOf(target), 1);\n        }\n\n        // 組み換え\n        visit(column, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitColumnPre: (_node: ColumnSyntaxTree) => {\n                // TODO ここに来たらエラーにするべき\n            },\n            visitChapterPre: (node: ChapterSyntaxTree) => {\n                if (column.level < node.headline.level) {\n                    return;\n                }\n                reconstruct(column, node);\n            }\n        });\n\n        // Parser.ts からのコピペなので共通ロジックとしてリファクタリングする\n\n        // parentNode を設定\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (ast: SyntaxTree, parent: SyntaxTree) => {\n                ast.parentNode = parent;\n            }\n        });\n        // prev, next を設定\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (_ast: SyntaxTree, _parent: SyntaxTree) => {\n            },\n            visitChapterPre: (ast: ChapterSyntaxTree) => {\n                ast.text.forEach((node, i, nodes) => {\n                    node.prev = nodes[i - 1];\n                    node.next = nodes[i + 1];\n                });\n            },\n            visitColumnPre: (ast: ColumnSyntaxTree) => {\n                ast.text.forEach((node, i, nodes) => {\n                    node.prev = nodes[i - 1];\n                    node.next = nodes[i + 1];\n                });\n            },\n            visitNodePre: (ast: NodeSyntaxTree) => {\n                ast.childNodes.forEach((node, i, nodes) => {\n                    node.prev = nodes[i - 1];\n                    node.next = nodes[i + 1];\n                });\n            }\n        });\n\n    }\n\n\t/**\n\t * ブロック記法の中身を組み替える。\n\t * ブロック記法は 1. 全ての記法を許可 2. インライン記法のみ許可 3. 全てを許可しない の3パターンの組み換えがある。\n\t * @param chapter\n\t * @param node\n\t */\n    preprocessBlockSyntax(chunk: ContentChunk, node: BlockElementSyntaxTree) {\n        if (node.childNodes.length === 0) {\n            return;\n        }\n\n        let syntaxes = this.acceptableSyntaxes.find(node);\n        if (syntaxes.length !== 1) {\n            // TODO エラーにしたほうがいいかなぁ\n            return;\n        }\n\n        let syntax = syntaxes[0];\n        if (syntax.allowFullySyntax) {\n            // 全て許可\n            return;\n        } else if (syntax.allowInline) {\n            // inline構文のみ許可(Paragraphは殺す\n            // inline以外の構文は叩き潰してTextにmergeする\n            let info: {\n                offset: number;\n                line: number;\n                column: number;\n            } | null = null as any;\n            let resultNodes: SyntaxTree[] = [];\n            let lastNode: SyntaxTree | null = null;\n            visit(node.childNodes[0], {\n                visitDefaultPre: (node: SyntaxTree) => {\n                    if (!info) {\n                        info = {\n                            offset: node.location.start.offset,\n                            line: node.location.start.line,\n                            column: node.location.start.column\n                        };\n                    }\n                    lastNode = node;\n                },\n                visitInlineElementPre: (node: InlineElementSyntaxTree) => {\n                    let textNode = new TextNodeSyntaxTree({\n                        syntax: \"BlockElementContentText\",\n                        location: {\n                            start: {\n                                offset: info!.offset,\n                                line: info!.line,\n                                column: info!.column\n                            },\n                            end: {\n                                offset: node.location.start.offset - 1,\n                                line: void 0,\n                                column: void 0,\n                            }\n                        },\n                        text: chunk.process.input!.substring(info!.offset, node.location.start.offset - 1)\n                    });\n                    if (textNode.text) {\n                        resultNodes.push(textNode);\n                    }\n                    resultNodes.push(textNode);\n                    resultNodes.push(node);\n                    info = null;\n                    lastNode = node;\n                },\n                visitSingleLineCommentPre: (node: SyntaxTree) => {\n                    if (!info) {\n                        lastNode = node;\n                        return;\n                    }\n                    let textNode = new TextNodeSyntaxTree({\n                        syntax: \"BlockElementContentText\",\n                        location: {\n                            start: {\n                                offset: info.offset,\n                                line: info.line,\n                                column: info.column\n                            },\n                            end: {\n                                offset: node.location.start.offset - 1,\n                                line: void 0,\n                                column: void 0,\n                            }\n                        },\n                        text: chunk.process.input!.substring(info.offset, node.location.start.offset - 1)\n                    });\n                    if (textNode.text) {\n                        resultNodes.push(textNode);\n                    }\n                    info = null;\n                    lastNode = node;\n                }\n            });\n            if (info) {\n                let textNode = new TextNodeSyntaxTree({\n                    syntax: \"BlockElementContentText\",\n                    location: {\n                        start: {\n                            offset: info.offset,\n                            line: info.line,\n                            column: info.column,\n                        },\n                        end: {\n                            offset: node.location.start.offset - 1,\n                            line: void 0,\n                            column: void 0,\n                        }\n                    },\n                    text: chunk.process.input!.substring(info.offset, lastNode!.location!.end!.offset)\n                });\n                if (textNode.text) {\n                    resultNodes.push(textNode);\n                }\n            }\n\n            node.childNodes = resultNodes;\n\n        } else {\n            // 全て不許可(テキスト化\n            let first = node.childNodes[0];\n            let last = node.childNodes[node.childNodes.length - 1];\n            let textNode = new TextNodeSyntaxTree({\n                syntax: \"BlockElementContentText\",\n                location: {\n                    start: {\n                        offset: first.location.start.offset,\n                        line: first.location.start.line,\n                        column: first.location.start.column\n                    },\n                    end: {\n                        offset: last.location.start.offset - 1,\n                        line: void 0,\n                        column: void 0,\n                    }\n                },\n                text: nodeContentToString(chunk.process, node)\n            });\n            node.childNodes = [textNode];\n        }\n    }\n}\n"]}