import { SyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, ArgumentSyntaxTree, ChapterSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree, NodeSyntaxTree, TextNodeSyntaxTree, SingleLineCommentSyntaxTree } from "./parser";
/**
 * 指定された構文木を歩きまわる。
 * 次にどちらへ歩くかは渡した関数によって決まる。
 * null が返ってくると歩くのを中断する。
 * @param ast
 * @param actor
 */
export declare function walk(ast: SyntaxTree, actor: (ast: SyntaxTree) => SyntaxTree | null): void;
/**
 * 指定された構文木の全てのノード・リーフを同期的に探索する。
 * 親子であれば親のほうが先に探索され、兄弟であれば兄のほうが先に探索される。
 * つまり、葉に着目すると文章に登場する順番に探索される。
 * @param ast
 * @param v
 */
export declare function visit(ast: SyntaxTree, v: TreeVisitorArg): void;
/**
 * 指定された構文木の全てのノード・リーフを非同期に探索する。
 * 親子であれば親のほうが先に探索され、兄弟であれば兄のほうが先に探索される。
 * つまり、葉に着目すると文章に登場する順番に探索される。
 * @param ast
 * @param v
 */
export declare function visitAsync(ast: SyntaxTree, v: TreeVisitorArg): Promise<void>;
export declare type TreeVisitorReturn = boolean | undefined | ((v: TreeVisitor) => void) | void;
/**
 * 構文木を渡り歩くためのVisitorの原形。
 * 実装されなかったメソッドは、visitDefault または NodeSyntaxTree を継承している場合 visitNode にフォールバックする。
 * 各メソッドの返り値としてanyを返す。
 * undefined, true を返した時、子要素の探索は継続される。
 * false を返した時、子要素の探索は行われない。
 * Function を返した時、子要素の探索を行う代わりにその関数が実行される。Functionには引数として実行中のTreeVisitorが渡される。
 */
export interface TreeVisitorArg {
    visitDefaultPre(node: SyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitDefaultPost?(node: SyntaxTree, parent: SyntaxTree | null): void;
    visitNodePre?(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitNodePost?(node: NodeSyntaxTree, parent: SyntaxTree | null): void;
    visitBlockElementPre?(node: BlockElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitBlockElementPost?(node: BlockElementSyntaxTree, parent: SyntaxTree | null): void;
    visitInlineElementPre?(node: InlineElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitInlineElementPost?(node: InlineElementSyntaxTree, parent: SyntaxTree | null): void;
    visitArgumentPre?(node: ArgumentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitArgumentPost?(node: ArgumentSyntaxTree, parent: SyntaxTree | null): void;
    visitChapterPre?(node: ChapterSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitChapterPost?(node: ChapterSyntaxTree, parent: SyntaxTree | null): void;
    visitParagraphPre?(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitParagraphPost?(node: NodeSyntaxTree, parent: SyntaxTree | null): void;
    visitHeadlinePre?(node: HeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitHeadlinePost?(node: HeadlineSyntaxTree, parent: SyntaxTree | null): void;
    visitUlistPre?(node: UlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitUlistPost?(node: UlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitOlistPre?(node: OlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitOlistPost?(node: OlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitDlistPre?(node: DlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitDlistPost?(node: DlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitColumnPre?(node: ColumnSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitColumnPost?(node: ColumnSyntaxTree, parent: SyntaxTree | null): void;
    visitColumnHeadlinePre?(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitColumnHeadlinePost?(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): void;
    visitSingleLineCommentPre?(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitSingleLineCommentPost?(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): void;
    visitTextPre?(node: TextNodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitTextPost?(node: TextNodeSyntaxTree, parent: SyntaxTree | null): void;
}
/**
 * 構文木を渡り歩くためのVisitor。
 * 実装されなかったメソッドは、visitDefault または NodeSyntaxTree を継承している場合 visitNode にフォールバックする。
 * 各メソッドの返り値としてanyを返す。
 * undefined, true を返した時、子要素の探索は継続される。
 * false を返した時、子要素の探索は行われない。
 * Function を返した時、子要素の探索を行う代わりにその関数が実行される。Functionには引数として実行中のTreeVisitorが渡される。
 */
export interface TreeVisitor {
    visitDefaultPre(node: SyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitDefaultPost(node: SyntaxTree, parent: SyntaxTree | null): void;
    visitNodePre(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitNodePost(node: NodeSyntaxTree, parent: SyntaxTree | null): void;
    visitBlockElementPre(node: BlockElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitBlockElementPost(node: BlockElementSyntaxTree, parent: SyntaxTree | null): void;
    visitInlineElementPre(node: InlineElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitInlineElementPost(node: InlineElementSyntaxTree, parent: SyntaxTree | null): void;
    visitArgumentPre(node: ArgumentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitArgumentPost(node: ArgumentSyntaxTree, parent: SyntaxTree | null): void;
    visitChapterPre(node: ChapterSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitChapterPost(node: ChapterSyntaxTree, parent: SyntaxTree | null): void;
    visitParagraphPre(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitParagraphPost(node: NodeSyntaxTree, parent: SyntaxTree | null): void;
    visitHeadlinePre(node: HeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitHeadlinePost(node: HeadlineSyntaxTree, parent: SyntaxTree | null): void;
    visitUlistPre(node: UlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitUlistPost(node: UlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitOlistPre(node: OlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitOlistPost(node: OlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitDlistPre(node: DlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitDlistPost(node: DlistElementSyntaxTree, parent: SyntaxTree | null): void;
    visitColumnPre(node: ColumnSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitColumnPost(node: ColumnSyntaxTree, parent: SyntaxTree | null): void;
    visitColumnHeadlinePre(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitColumnHeadlinePost(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): void;
    visitSingleLineCommentPre(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitSingleLineCommentPost(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): void;
    visitTextPre(node: TextNodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;
    visitTextPost(node: TextNodeSyntaxTree, parent: SyntaxTree | null): void;
}
