{"version":3,"file":"walker.js","sourceRoot":"","sources":["walker.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { RuleName, SyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, ArgumentSyntaxTree, ChapterSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree, NodeSyntaxTree, TextNodeSyntaxTree, SingleLineCommentSyntaxTree } from \"./parser\";\n\n/**\n * 指定された構文木を歩きまわる。\n * 次にどちらへ歩くかは渡した関数によって決まる。\n * null が返ってくると歩くのを中断する。\n * @param ast\n * @param actor\n */\nexport function walk(ast: SyntaxTree, actor: (ast: SyntaxTree) => SyntaxTree | null) {\n    \"use strict\";\n\n    if (!ast) {\n        return;\n    }\n\n    let next = actor(ast);\n    if (next) {\n        walk(next, actor);\n    }\n}\n\n/**\n * 指定された構文木の全てのノード・リーフを同期的に探索する。\n * 親子であれば親のほうが先に探索され、兄弟であれば兄のほうが先に探索される。\n * つまり、葉に着目すると文章に登場する順番に探索される。\n * @param ast\n * @param v\n */\nexport function visit(ast: SyntaxTree, v: TreeVisitorArg): void {\n    \"use strict\";\n\n    _visit(() => new SyncTaskPool<void>(), ast, v);\n}\n\n/**\n * 指定された構文木の全てのノード・リーフを非同期に探索する。\n * 親子であれば親のほうが先に探索され、兄弟であれば兄のほうが先に探索される。\n * つまり、葉に着目すると文章に登場する順番に探索される。\n * @param ast\n * @param v\n */\nexport function visitAsync(ast: SyntaxTree, v: TreeVisitorArg): Promise<void> {\n    \"use strict\";\n\n    return Promise.resolve(_visit(() => new AsyncTaskPool<void>(), ast, v));\n}\n\nfunction _visit(poolGenerator: () => TaskPool<void>, ast: SyntaxTree, v: TreeVisitorArg): any {\n    \"use strict\";\n\n    let newV: TreeVisitor = {\n        visitDefaultPre: v.visitDefaultPre,\n        visitDefaultPost: v.visitDefaultPost || (() => {\n        }),\n        visitBlockElementPre: v.visitBlockElementPre || v.visitNodePre || v.visitDefaultPre,\n        visitBlockElementPost: v.visitBlockElementPost || v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitInlineElementPre: v.visitInlineElementPre || v.visitNodePre || v.visitDefaultPre,\n        visitInlineElementPost: v.visitInlineElementPost || v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitNodePre: v.visitNodePre || v.visitDefaultPre,\n        visitNodePost: v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitArgumentPre: v.visitArgumentPre || v.visitDefaultPre,\n        visitArgumentPost: v.visitArgumentPost || v.visitDefaultPost || (() => {\n        }),\n        visitChapterPre: v.visitChapterPre || v.visitNodePre || v.visitDefaultPre,\n        visitChapterPost: v.visitChapterPost || v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitParagraphPre: v.visitParagraphPre || v.visitNodePre || v.visitDefaultPre,\n        visitParagraphPost: v.visitParagraphPost || v.visitNodePost || (() => {\n        }),\n        visitHeadlinePre: v.visitHeadlinePre || v.visitDefaultPre,\n        visitHeadlinePost: v.visitHeadlinePost || v.visitDefaultPost || (() => {\n        }),\n        visitUlistPre: v.visitUlistPre || v.visitNodePre || v.visitDefaultPre,\n        visitUlistPost: v.visitUlistPost || v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitOlistPre: v.visitOlistPre || v.visitDefaultPre,\n        visitOlistPost: v.visitOlistPost || v.visitDefaultPost || (() => {\n        }),\n        visitDlistPre: v.visitDlistPre || v.visitDefaultPre,\n        visitDlistPost: v.visitDlistPost || v.visitDefaultPost || (() => {\n        }),\n        visitColumnPre: v.visitColumnPre || v.visitNodePre || v.visitDefaultPre,\n        visitColumnPost: v.visitColumnPost || v.visitNodePost || v.visitDefaultPost || (() => {\n        }),\n        visitColumnHeadlinePre: v.visitColumnHeadlinePre || v.visitDefaultPre,\n        visitColumnHeadlinePost: v.visitColumnHeadlinePost || v.visitDefaultPost || (() => {\n        }),\n        visitTextPre: v.visitTextPre || v.visitDefaultPre,\n        visitTextPost: v.visitTextPost || v.visitDefaultPost || (() => {\n        }),\n        visitSingleLineCommentPre: v.visitSingleLineCommentPre || v.visitDefaultPre,\n        visitSingleLineCommentPost: v.visitSingleLineCommentPost || v.visitDefaultPost || (() => {\n        })\n    };\n    newV.visitDefaultPre = newV.visitDefaultPre.bind(v);\n    newV.visitDefaultPost = newV.visitDefaultPost.bind(v);\n    newV.visitBlockElementPre = newV.visitBlockElementPre.bind(v);\n    newV.visitBlockElementPost = newV.visitBlockElementPost.bind(v);\n    newV.visitInlineElementPre = newV.visitInlineElementPre.bind(v);\n    newV.visitInlineElementPost = newV.visitInlineElementPost.bind(v);\n    newV.visitNodePre = newV.visitNodePre.bind(v);\n    newV.visitNodePost = newV.visitNodePost.bind(v);\n    newV.visitArgumentPre = newV.visitArgumentPre.bind(v);\n    newV.visitArgumentPost = newV.visitArgumentPost.bind(v);\n    newV.visitChapterPre = newV.visitChapterPre.bind(v);\n    newV.visitChapterPost = newV.visitChapterPost.bind(v);\n    newV.visitHeadlinePre = newV.visitHeadlinePre.bind(v);\n    newV.visitHeadlinePost = newV.visitHeadlinePost.bind(v);\n    newV.visitUlistPre = newV.visitUlistPre.bind(v);\n    newV.visitUlistPost = newV.visitUlistPost.bind(v);\n    newV.visitOlistPre = newV.visitOlistPre.bind(v);\n    newV.visitOlistPost = newV.visitOlistPost.bind(v);\n    newV.visitDlistPre = newV.visitDlistPre.bind(v);\n    newV.visitDlistPost = newV.visitDlistPost.bind(v);\n    newV.visitColumnPre = newV.visitColumnPre.bind(v);\n    newV.visitColumnPost = newV.visitColumnPost.bind(v);\n    newV.visitColumnHeadlinePre = newV.visitColumnHeadlinePre.bind(v);\n    newV.visitColumnHeadlinePost = newV.visitColumnHeadlinePost.bind(v);\n    newV.visitTextPre = newV.visitTextPre.bind(v);\n    newV.visitTextPost = newV.visitTextPost.bind(v);\n    newV.visitSingleLineCommentPre = newV.visitSingleLineCommentPre.bind(v);\n    newV.visitSingleLineCommentPost = newV.visitSingleLineCommentPost.bind(v);\n\n    return _visitSub(poolGenerator, null, ast, newV);\n}\n\nfunction _visitSub(poolGenerator: () => TaskPool<void>, parent: SyntaxTree | null, ast: SyntaxTree, v: TreeVisitor): any {\n    \"use strict\";\n\n    if (ast instanceof BlockElementSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitBlockElementPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    _ast.args.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                    });\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitBlockElementPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof InlineElementSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitInlineElementPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitInlineElementPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof ArgumentSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitArgumentPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitArgumentPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof ChapterSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitChapterPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    if (_ast.comments) {\n                        _ast.comments.forEach((next) => {\n                            pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                        });\n                    }\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.headline, v));\n                    if (_ast.text) {\n                        _ast.text.forEach((next) => {\n                            pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                        });\n                    }\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitChapterPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof HeadlineSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitHeadlinePre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.label, v));\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.caption, v));\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitHeadlinePost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof ColumnSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitColumnPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.headline, v));\n                    if (_ast.text) {\n                        _ast.text.forEach((next) => {\n                            pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                        });\n                    }\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitColumnPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof ColumnHeadlineSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitColumnHeadlinePre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.caption, v));\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitColumnHeadlinePost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof UlistElementSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitUlistPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.text, v));\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitUlistPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof OlistElementSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitOlistPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.text, v));\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitOlistPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof DlistElementSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitDlistPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.text, v));\n                    pool.add(() => _visitSub(poolGenerator, _ast, _ast.content, v));\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitDlistPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof NodeSyntaxTree && (ast.ruleName === RuleName.Paragraph || ast.ruleName === RuleName.BlockElementParagraph)) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitParagraphPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, _ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitParagraphPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof NodeSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitNodePre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                    _ast.childNodes.forEach((next) => {\n                        pool.add(() => _visitSub(poolGenerator, _ast, next, v));\n                    });\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitNodePost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof TextNodeSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitTextPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitTextPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast instanceof SingleLineCommentSyntaxTree) {\n        let _ast = ast;\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitSingleLineCommentPre(_ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitSingleLineCommentPost(_ast, parent));\n            return pool.consume();\n        })();\n    } else if (ast) {\n        return (() => {\n            let pool = poolGenerator();\n            let ret = v.visitDefaultPre(ast, parent);\n            pool.handle(ret, {\n                next: () => {\n                },\n                func: () => {\n                    typeof ret === \"function\" && ret(v);\n                }\n            });\n            pool.add(() => v.visitDefaultPost(ast, parent));\n            return pool.consume();\n        })();\n    } else {\n        return (() => {\n            let pool = poolGenerator();\n            return pool.consume();\n        })();\n    }\n}\n\nexport type TreeVisitorReturn = boolean | undefined | ((v: TreeVisitor) => void) | void;\n\n/**\n * 構文木を渡り歩くためのVisitorの原形。\n * 実装されなかったメソッドは、visitDefault または NodeSyntaxTree を継承している場合 visitNode にフォールバックする。\n * 各メソッドの返り値としてanyを返す。\n * undefined, true を返した時、子要素の探索は継続される。\n * false を返した時、子要素の探索は行われない。\n * Function を返した時、子要素の探索を行う代わりにその関数が実行される。Functionには引数として実行中のTreeVisitorが渡される。\n */\nexport interface TreeVisitorArg {\n    visitDefaultPre(node: SyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitDefaultPost?(node: SyntaxTree, parent: SyntaxTree | null): void;\n    visitNodePre?(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitNodePost?(node: NodeSyntaxTree, parent: SyntaxTree | null): void;\n    visitBlockElementPre?(node: BlockElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitBlockElementPost?(node: BlockElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitInlineElementPre?(node: InlineElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitInlineElementPost?(node: InlineElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitArgumentPre?(node: ArgumentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitArgumentPost?(node: ArgumentSyntaxTree, parent: SyntaxTree | null): void;\n    visitChapterPre?(node: ChapterSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitChapterPost?(node: ChapterSyntaxTree, parent: SyntaxTree | null): void;\n    visitParagraphPre?(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitParagraphPost?(node: NodeSyntaxTree, parent: SyntaxTree | null): void;\n    visitHeadlinePre?(node: HeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitHeadlinePost?(node: HeadlineSyntaxTree, parent: SyntaxTree | null): void;\n    visitUlistPre?(node: UlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitUlistPost?(node: UlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitOlistPre?(node: OlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitOlistPost?(node: OlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitDlistPre?(node: DlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitDlistPost?(node: DlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitColumnPre?(node: ColumnSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitColumnPost?(node: ColumnSyntaxTree, parent: SyntaxTree | null): void;\n    visitColumnHeadlinePre?(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitColumnHeadlinePost?(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): void;\n    visitSingleLineCommentPre?(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitSingleLineCommentPost?(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): void;\n    visitTextPre?(node: TextNodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitTextPost?(node: TextNodeSyntaxTree, parent: SyntaxTree | null): void;\n}\n\n/**\n * 構文木を渡り歩くためのVisitor。\n * 実装されなかったメソッドは、visitDefault または NodeSyntaxTree を継承している場合 visitNode にフォールバックする。\n * 各メソッドの返り値としてanyを返す。\n * undefined, true を返した時、子要素の探索は継続される。\n * false を返した時、子要素の探索は行われない。\n * Function を返した時、子要素の探索を行う代わりにその関数が実行される。Functionには引数として実行中のTreeVisitorが渡される。\n */\nexport interface TreeVisitor {\n    visitDefaultPre(node: SyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitDefaultPost(node: SyntaxTree, parent: SyntaxTree | null): void;\n    visitNodePre(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitNodePost(node: NodeSyntaxTree, parent: SyntaxTree | null): void;\n    visitBlockElementPre(node: BlockElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitBlockElementPost(node: BlockElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitInlineElementPre(node: InlineElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitInlineElementPost(node: InlineElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitArgumentPre(node: ArgumentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitArgumentPost(node: ArgumentSyntaxTree, parent: SyntaxTree | null): void;\n    visitChapterPre(node: ChapterSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitChapterPost(node: ChapterSyntaxTree, parent: SyntaxTree | null): void;\n    visitParagraphPre(node: NodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitParagraphPost(node: NodeSyntaxTree, parent: SyntaxTree | null): void;\n    visitHeadlinePre(node: HeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitHeadlinePost(node: HeadlineSyntaxTree, parent: SyntaxTree | null): void;\n    visitUlistPre(node: UlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitUlistPost(node: UlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitOlistPre(node: OlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitOlistPost(node: OlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitDlistPre(node: DlistElementSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitDlistPost(node: DlistElementSyntaxTree, parent: SyntaxTree | null): void;\n    visitColumnPre(node: ColumnSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitColumnPost(node: ColumnSyntaxTree, parent: SyntaxTree | null): void;\n    visitColumnHeadlinePre(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitColumnHeadlinePost(node: ColumnHeadlineSyntaxTree, parent: SyntaxTree | null): void;\n    visitSingleLineCommentPre(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitSingleLineCommentPost(node: SingleLineCommentSyntaxTree, parent: SyntaxTree | null): void;\n    visitTextPre(node: TextNodeSyntaxTree, parent: SyntaxTree | null): TreeVisitorReturn;\n    visitTextPost(node: TextNodeSyntaxTree, parent: SyntaxTree | null): void;\n}\n\n/**\n * 同期化処理と非同期化処理の記述を一本化するためのヘルパインタフェース。\n * 構造が汚いのでexportしないこと。\n */\ninterface TaskPool<T> {\n    add(value: () => T): void;\n    handle(value: TreeVisitorReturn, statements: { next: () => void; func: () => void; }): void;\n    consume(): any; // T | Promise<T[]>\n}\n\n/**\n * 同期化処理をそのまま同期処理として扱うためのヘルパクラス。\n */\nclass SyncTaskPool<T> implements TaskPool<T> {\n    tasks: { (): T; }[] = [];\n\n    add(value: () => T): void {\n        this.tasks.push(value);\n    }\n\n    handle(value: TreeVisitorReturn, statements: { next: () => void; func: () => void; }): void {\n        if (typeof value === \"undefined\" || (typeof value === \"boolean\" && value)) {\n            statements.next();\n        } else if (typeof value === \"function\") {\n            statements.func();\n        }\n    }\n\n    consume(): T[] {\n        return this.tasks.map(task => task());\n    }\n}\n\n/**\n * 同期化処理を非同期化するためのヘルパクラス。\n * array.forEach(value => process(value)); を以下のように書き換えて使う。\n * let pool = new AsyncTaskPool<any>();\n * array.forEach(value => pool.add(()=> process(value));\n * pool.consume().then(()=> ...);\n */\nclass AsyncTaskPool<T> implements TaskPool<T> {\n    tasks: { (): Promise<T>; }[] = [];\n\n    add(value: () => T): void;\n\n    add(task: () => Promise<T>): void;\n\n    add(value: () => any) {\n        this.tasks.push(() => Promise.resolve(value()));\n    }\n\n    handle(value: any, statements: { next: () => void; func: () => void; }): void {\n        if (typeof value === \"undefined\" || (typeof value === \"boolean\" && value)) {\n            statements.next();\n        } else if (value && typeof value.then === \"function\") {\n            this.tasks.push(() => Promise.resolve(value));\n        } else if (typeof value === \"function\") {\n            statements.func();\n        }\n    }\n\n    consume(): Promise<T[]> {\n        let promise = new Promise<T[]>(resolve => {\n            let result: T[] = [];\n            let next = () => {\n                let func = this.tasks.shift();\n                if (!func) {\n                    resolve(result);\n                    return;\n                }\n                func().then(value => {\n                    result.push(value);\n                    next();\n                });\n            };\n            next();\n        });\n        return promise;\n    }\n}\n"]}