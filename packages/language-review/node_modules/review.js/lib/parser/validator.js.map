{"version":3,"file":"validator.js","sourceRoot":"","sources":["validator.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,qBAAkB,cAAc,CAAC,CAAA;AAMjC,yBAA+C,YAAY,CAAC,CAAA;AAI5D,uBAAsB,UAAU,CAAC,CAAA;AAEjC,sBAAiD,gBAAgB,CAAC,CAAA;AAUlE;IAAA;IA4MA,CAAC;IAxMG,gCAAK,GAAL,UAAM,IAAU,EAAE,kBAAsC,EAAE,QAAmB;QACzE,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrB,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,uCAAY,GAAZ,UAAa,IAAU,EAAE,kBAAsC,EAAE,QAAwB;QAAxB,wBAAwB,GAAxB,aAAwB;QACrF,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAA,MAAM;YAChD,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,KAAK,qBAAU,CAAC,KAAK;oBACjB,qCAAqC;oBACrC,MAAM,CAAC;gBACX,KAAK,qBAAU,CAAC,KAAK;oBACjB,MAAM,GAAG,QAAQ,CAAC;oBAClB,KAAK,CAAC;gBACV,KAAK,qBAAU,CAAC,MAAM;oBAClB,MAAM,GAAG,SAAS,CAAC;oBACnB,KAAK,CAAC;YACd,CAAC;YACD,IAAI,SAAS,GAAG,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC;YAC3C,IAAI,SAAS,GAAG,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC;YACpD,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;gBACpB,IAAI,IAAI,GAAS,OAAQ,CAAC,SAAS,CAAC,IAAU,OAAQ,CAAC,SAAS,CAAC,CAAC;gBAClE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,UAAU,GAAG,uBAAuB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;gBACnH,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAS,GAAT,UAAU,IAAU;QAApB,iBAKC;QAJG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACrD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAC;IAC1D,CAAC;IAED,qCAAU,GAAV,UAAW,KAAmB;QAA9B,iBAoEC;QAnEG,4BAA4B;QAC5B,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;YAClB,eAAe,EAAE,UAAC,KAAiB;YACnC,CAAC;YACD,gBAAgB,EAAE,UAAC,IAAwB;gBACvC,IAAI,OAAO,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,kCAAkC,CAAC,EAAE,IAAI,CAAC,CAAC;oBACjE,MAAM,CAAC;gBACX,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC;YACD,cAAc,EAAE,UAAC,IAAsB;gBACnC,IAAI,OAAO,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,kCAAkC,CAAC,EAAE,IAAI,CAAC,CAAC;oBACjE,MAAM,CAAC;gBACX,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC;YACD,oBAAoB,EAAE,UAAC,IAA4B;gBAC/C,IAAI,OAAO,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,6BAA6B,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;oBACzE,MAAM,CAAC;gBACX,CAAC;gBACD,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBACpC,IAAI,GAAG,GAAqB,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;gBAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAApB,CAAoB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACrE,IAAI,OAAO,GAAG,QAAC,CAAC,8BAA8B,EAAE,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;oBACtE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBACnC,MAAM,CAAC;gBACX,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC;YACD,qBAAqB,EAAE,UAAC,IAA6B;gBACjD,IAAI,OAAO,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACvB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,8BAA8B,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;oBAC1E,MAAM,CAAC;gBACX,CAAC;gBACD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACnD,CAAC;SACJ,CAAC,CAAC;QAEH,gBAAgB;QAChB,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;YAClB,eAAe,EAAE,UAAC,KAAiB;YACnC,CAAC;YACD,eAAe,EAAE,UAAC,IAAuB;gBACrC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnB,EAAE,CAAC,CAAC,CAAC,mBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,kBAAkB;wBAClB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,8BAA8B,CAAC,EAAE,IAAI,CAAC,CAAC;oBACjE,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,QAAM,GAAG,mBAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,CAAC,QAAM,CAAC,CAAC,CAAC;wBACV,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,6BAA6B,CAAC,EAAE,IAAI,CAAC,CAAC;oBAChE,CAAC;gBACL,CAAC;YACL,CAAC;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,8CAAmB,GAAnB,UAAoB,KAAmB;QACnC,mCAAmC;QACnC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;YAClB,eAAe,EAAE,UAAC,KAAiB;YACnC,CAAC;YACD,oBAAoB,EAAE,UAAC,IAA4B;gBAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;oBAC1B,MAAM,CAAC;gBACX,CAAC;gBACD,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAChB,8BAA8B;oBAC9B,MAAM,CAAC;gBACX,CAAC;gBACD,IAAI,QAAQ,GAAG,2BAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBAChE,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACf,KAAK,UAAU;wBACX,KAAK,CAAC;oBACV,KAAK,SAAS,CAAC;oBACf,KAAK,WAAW,CAAC;oBACjB,KAAK,UAAU;wBACX,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAC,CAAC,uCAAuC,CAAC,EAAE,YAAY,CAAC,CAAC;wBAC7E,KAAK,CAAC;oBACV;wBACI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,4BAA4B,EAAE,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC;gBACrF,CAAC;YACL,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAED,oDAAyB,GAAzB,UAA0B,IAAU;QAChC,cAAc;QACd,qCAAqC;QACrC,IAAI,OAAO,GAAa,IAAI,CAAC,SAAS,CAAC,MAAM,CAAW,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAA3B,CAA2B,EAAE,EAAE,CAAC,CAAC;QACnG,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YAClB,8BAA8B;YAC9B,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;YACvC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,KAAK;oBACxB,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;wBACtC,WAAW,CAAC,IAAI,GAAG,KAAK,CAAC;oBAC7B,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClD,WAAW,CAAC,IAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,KAAK;oBACjC,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;wBACzC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;oBAChC,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QACH,uBAAuB;QACvB,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YAClB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC1D,IAAI,WAAS,GAAG,MAAM,CAAC,WAAW,CAAC;gBACnC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;oBAClB,EAAE,CAAC,CAAC,WAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,WAAS,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,IAAI,WAAS,CAAC,YAAY,KAAK,MAAM,CAAC,UAAU,IAAI,WAAS,CAAC,KAAK,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;wBACjK,WAAS,CAAC,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC1C,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,CAAC,CAAC,WAAS,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC3B,MAAM,CAAC,OAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,8BAA8B,EAAE,WAAS,CAAC,YAAY,EAAE,WAAS,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;oBACvH,MAAM,CAAC;gBACX,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QACH,6CAA6C;QAC7C,OAAO,CAAC,OAAO,CAAC,UAAA,OAAO;YACnB,OAAO,CAAC,OAAO,CAAC,UAAA,OAAO;gBACnB,EAAE,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC;gBACX,CAAC;gBACD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,KAAK,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;oBACnF,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;wBACpF,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;4BAC9B,OAAO,CAAC,OAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,mCAAmC,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;wBACvG,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,CAAC,OAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAC,CAAC,0BAA0B,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;wBAC9F,CAAC;wBACD,MAAM,CAAC;oBACX,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IACL,uBAAC;AAAD,CAAC,AA5MD,IA4MC;AA5MY,wBAAgB,mBA4M5B,CAAA","sourcesContent":["\"use strict\";\n\nimport { t } from \"../i18n/i18n\";\n\nimport { Book, ContentChunk, Symbol } from \"../model/compilerModel\";\n\nimport { SyntaxTree, ChapterSyntaxTree, ColumnSyntaxTree, HeadlineSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, NodeSyntaxTree } from \"./parser\";\n\nimport { AcceptableSyntaxes, SyntaxType } from \"./analyzer\";\n\nimport { Builder } from \"../builder/builder\";\n\nimport { visit } from \"./walker\";\n\nimport { findChapter, nodeContentToString } from \"../utils/utils\";\n\n/**\n * IAnalyzerで処理した後の構文木について構文上のエラーがないかチェックする。\n * また、Builderと対比させて、未実装の候補がないかをチェックする。\n */\nexport interface Validator {\n    start(book: Book, acceptableSyntaxes: AcceptableSyntaxes, builders: Builder[]): void;\n}\n\nexport class DefaultValidator implements Validator {\n    acceptableSyntaxes: AcceptableSyntaxes;\n    builders: Builder[];\n\n    start(book: Book, acceptableSyntaxes: AcceptableSyntaxes, builders: Builder[]) {\n        this.acceptableSyntaxes = acceptableSyntaxes;\n        this.builders = builders;\n\n        this.checkBuilder(book, acceptableSyntaxes, builders);\n        this.checkBook(book);\n        this.resolveSymbolAndReference(book);\n    }\n\n    checkBuilder(book: Book, acceptableSyntaxes: AcceptableSyntaxes, builders: Builder[] = []) {\n        acceptableSyntaxes.acceptableSyntaxes.forEach(syntax => {\n            let prefix = \"\";\n            switch (syntax.type) {\n                case SyntaxType.Other:\n                    // Other系は実装をチェックする必要はない…。(ということにしておく\n                    return;\n                case SyntaxType.Block:\n                    prefix = \"block_\";\n                    break;\n                case SyntaxType.Inline:\n                    prefix = \"inline_\";\n                    break;\n            }\n            let funcName1 = prefix + syntax.symbolName;\n            let funcName2 = prefix + syntax.symbolName + \"_pre\";\n            builders.forEach(builder => {\n                let func = (<any>builder)[funcName1] || (<any>builder)[funcName2];\n                if (!func) {\n                    book.process.error(SyntaxType[syntax.type] + \" \" + syntax.symbolName + \" is not supported in \" + builder.name);\n                }\n            });\n        });\n    }\n\n    checkBook(book: Book) {\n        book.predef.forEach(chunk => this.checkChunk(chunk));\n        book.contents.forEach(chunk => this.checkChunk(chunk));\n        book.appendix.forEach(chunk => this.checkChunk(chunk));\n        book.postdef.forEach(chunk => this.checkChunk(chunk));\n    }\n\n    checkChunk(chunk: ContentChunk) {\n        // Analyzer 内で生成した構文規則に基づき処理\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitHeadlinePre: (node: HeadlineSyntaxTree) => {\n                let results = this.acceptableSyntaxes.find(node);\n                if (results.length !== 1) {\n                    chunk.process.error(t(\"compile.syntax_definietion_error\"), node);\n                    return;\n                }\n                return results[0].process(chunk.process, node);\n            },\n            visitColumnPre: (node: ColumnSyntaxTree) => {\n                let results = this.acceptableSyntaxes.find(node);\n                if (results.length !== 1) {\n                    chunk.process.error(t(\"compile.syntax_definietion_error\"), node);\n                    return;\n                }\n                return results[0].process(chunk.process, node);\n            },\n            visitBlockElementPre: (node: BlockElementSyntaxTree) => {\n                let results = this.acceptableSyntaxes.find(node);\n                if (results.length !== 1) {\n                    chunk.process.error(t(\"compile.block_not_supported\", node.symbol), node);\n                    return;\n                }\n                let expects = results[0].argsLength;\n                let arg: NodeSyntaxTree[] = node.args || [];\n                if (expects.indexOf(arg.length) === -1) {\n                    let expected = expects.map((n) => Number(n).toString()).join(\" or \");\n                    let message = t(\"compile.args_length_mismatch\", expected, arg.length);\n                    chunk.process.error(message, node);\n                    return;\n                }\n\n                return results[0].process(chunk.process, node);\n            },\n            visitInlineElementPre: (node: InlineElementSyntaxTree) => {\n                let results = this.acceptableSyntaxes.find(node);\n                if (results.length !== 1) {\n                    chunk.process.error(t(\"compile.inline_not_supported\", node.symbol), node);\n                    return;\n                }\n                return results[0].process(chunk.process, node);\n            }\n        });\n\n        // 最初は必ず Level 1\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitChapterPre: (node: ChapterSyntaxTree) => {\n                if (node.level === 1) {\n                    if (!findChapter(node)) {\n                        // ここに来るのは実装のバグのはず\n                        chunk.process.error(t(\"compile.chapter_not_toplevel\"), node);\n                    }\n                } else {\n                    let parent = findChapter(node.parentNode);\n                    if (!parent) {\n                        chunk.process.error(t(\"compile.chapter_topleve_eq1\"), node);\n                    }\n                }\n            }\n        });\n\n        this.chechBlockGraphTool(chunk);\n    }\n\n    chechBlockGraphTool(chunk: ContentChunk) {\n        // graph記法の外部ツール利用について内容が正しいかチェックする\n        visit(chunk.tree.ast, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitBlockElementPre: (node: BlockElementSyntaxTree) => {\n                if (node.symbol !== \"graph\") {\n                    return;\n                }\n                let toolNameNode = node.args[1];\n                if (!toolNameNode) {\n                    // ここのNodeがないのは別でチェックするので気にしない\n                    return;\n                }\n                let toolName = nodeContentToString(chunk.process, toolNameNode);\n                switch (toolName) {\n                    case \"graphviz\":\n                        break;\n                    case \"gnuplot\":\n                    case \"blockdiag\":\n                    case \"aafigure\":\n                        chunk.process.info(t(\"compile.graph_tool_is_not_recommended\"), toolNameNode);\n                        break;\n                    default:\n                        chunk.process.error(t(\"compile.unknown_graph_tool\", toolName), toolNameNode);\n                }\n            }\n        });\n    }\n\n    resolveSymbolAndReference(book: Book) {\n        // symbols の解決\n        // Arrayにflatten がなくて悲しい reduce だと長い…\n        let symbols: Symbol[] = book.allChunks.reduce<Symbol[]>((p, c) => p.concat(c.process.symbols), []);\n        symbols.forEach(symbol => {\n            // referenceToのpartやchapterの解決\n            const referenceTo = symbol.referenceTo;\n            if (!referenceTo) {\n                return;\n            }\n            if (!referenceTo.part && referenceTo.partName) {\n                book.allChunks.forEach(chunk => {\n                    if (referenceTo.partName === chunk.name) {\n                        referenceTo.part = chunk;\n                    }\n                });\n            }\n            if (!referenceTo.chapter && referenceTo.chapterName) {\n                referenceTo.part!.nodes.forEach(chunk => {\n                    if (referenceTo.chapterName === chunk.name) {\n                        referenceTo.chapter = chunk;\n                    }\n                });\n            }\n        });\n        // referenceTo.node の解決\n        symbols.forEach(symbol => {\n            if (symbol.referenceTo && !symbol.referenceTo.referenceNode) {\n                let reference = symbol.referenceTo;\n                symbols.forEach(symbol => {\n                    if (reference.part === symbol.part && reference.chapter === symbol.chapter && reference.targetSymbol === symbol.symbolName && reference.label === symbol.labelName) {\n                        reference.referenceNode = symbol.node;\n                    }\n                });\n                if (!reference.referenceNode) {\n                    symbol.chapter!.process.error(t(\"compile.reference_is_missing\", reference.targetSymbol, reference.label), symbol.node);\n                    return;\n                }\n            }\n        });\n        // 同一チャプター内に同一シンボル(listとか)で同一labelの要素がないかチェック\n        symbols.forEach(symbol1 => {\n            symbols.forEach(symbol2 => {\n                if (symbol1 === symbol2) {\n                    return;\n                }\n                if (symbol1.chapter === symbol2.chapter && symbol1.symbolName === symbol2.symbolName) {\n                    if (symbol1.labelName && symbol2.labelName && symbol1.labelName === symbol2.labelName) {\n                        if (symbol1.symbolName === \"hd\") {\n                            symbol1.chapter!.process.error(t(\"compile.duplicated_label_headline\"), symbol1.node, symbol2.node);\n                        } else {\n                            symbol1.chapter!.process.error(t(\"compile.duplicated_label\"), symbol1.node, symbol2.node);\n                        }\n                        return;\n                    }\n                }\n            });\n        });\n    }\n}\n"]}