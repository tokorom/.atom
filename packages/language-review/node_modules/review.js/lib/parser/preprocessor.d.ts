import { Book, ContentChunk } from "../model/compilerModel";
import { BlockElementSyntaxTree, ColumnSyntaxTree } from "./parser";
import { AcceptableSyntaxes } from "./analyzer";
/**
 * 構文木の組み換えを行う機会を提供する。
 */
export interface Preprocessor {
    start(book: Book, acceptableSyntaxes: AcceptableSyntaxes): void;
}
/**
 * インライン構文やブロック構文中で利用可能な構造について制限をかけ、構文木を組み替える。
 * 種類は主に3種類。
 * 1. テキストをベースとしてインライン構文のみ許可する(デフォルト
 * 2. 全て許可せずテキストとして扱う
 * 3. 全てを許可する(なにもしない
 * AcceptableSyntaxes にしたがって処理する。
 */
export declare class SyntaxPreprocessor implements Preprocessor {
    acceptableSyntaxes: AcceptableSyntaxes;
    start(book: Book): void;
    preprocessChunk(chunk: ContentChunk): void;
    /**
     * コラム記法を組み替える。
     * コラムの中ではHeadlineが使えるが、コラム自体の見出しレベルより深いレベルのHeadlineしか許可されない。
     * そのため、コラム自体より浅いレベルの見出しレベルを見つけたらコラム内から脱出させる。
     * @param chunk
     * @param column
     */
    preprocessColumnSyntax(chunk: ContentChunk, column: ColumnSyntaxTree): void;
    /**
     * ブロック記法の中身を組み替える。
     * ブロック記法は 1. 全ての記法を許可 2. インライン記法のみ許可 3. 全てを許可しない の3パターンの組み換えがある。
     * @param chapter
     * @param node
     */
    preprocessBlockSyntax(chunk: ContentChunk, node: BlockElementSyntaxTree): void;
}
