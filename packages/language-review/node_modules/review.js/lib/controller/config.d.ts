import { Builder } from "../builder/builder";
import { BookStructure, ConfigRaw, Options, ConfigListener } from "./configRaw";
import { ProcessReport, Book } from "../model/compilerModel";
import { Analyzer } from "../parser/analyzer";
import { Validator } from "../parser/validator";
export declare class Config {
    original: ConfigRaw;
    _builders: Builder[];
    _bookStructure: BookStructure;
    constructor(original: ConfigRaw);
    readonly read: (path: string) => Promise<string>;
    readonly write: (path: string, data: string) => Promise<void>;
    readonly exists: (path: string) => Promise<{
        path: string;
        result: boolean;
    }>;
    readonly analyzer: Analyzer;
    readonly validators: Validator[];
    readonly builders: Builder[];
    readonly listener: ConfigListener;
    readonly book: BookStructure;
    resolvePath(_path: string): string;
}
export declare class NodeJSConfig extends Config {
    options: Options;
    original: ConfigRaw;
    _listener: ConfigListener;
    constructor(options: Options, original: ConfigRaw);
    readonly read: (path: string) => Promise<string>;
    readonly write: (path: string, data: string) => Promise<void>;
    readonly exists: (path: string) => Promise<{
        path: string;
        result: boolean;
    }>;
    readonly listener: ConfigListener;
    onReports(reports: ProcessReport[]): void;
    onCompileSuccess(_book: Book): void;
    onCompileFailed(): void;
    resolvePath(path: string): string;
}
export declare class WebBrowserConfig extends Config {
    options: Options;
    original: ConfigRaw;
    _listener: ConfigListener;
    constructor(options: Options, original: ConfigRaw);
    readonly read: (path: string) => Promise<string>;
    readonly write: (path: string, data: string) => Promise<void>;
    readonly exists: (path: string) => Promise<{
        path: string;
        result: boolean;
    }>;
    _existsFileScheme(_path: string): Promise<{
        path: string;
        result: boolean;
    }>;
    _existsHttpScheme(path: string): Promise<{
        path: string;
        result: boolean;
    }>;
    readonly listener: ConfigListener;
    onReports(reports: ProcessReport[]): void;
    onCompileSuccess(_book: Book): void;
    onCompileFailed(_book?: Book): void;
    resolvePath(path: string): string;
    private startWith(str, target);
    private endWith(str, target);
}
