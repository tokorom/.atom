import { Book, Symbol, ProcessReport } from "../model/compilerModel";
import { Analyzer, AcceptableSyntaxes } from "../parser/analyzer";
import { Validator } from "../parser/validator";
import { Builder } from "../builder/builder";
/**
 * コマンドライン引数を解釈した結果のオプション。
 */
export interface Options {
    reviewfile?: string;
    base?: string;
}
/**
 * コンパイル実行時の設定。
 * 本についての情報や処理実行時のプログラムの差し替え。
 */
export interface ConfigRaw {
    basePath?: string;
    read?: (path: string) => Promise<string>;
    write?: (path: string, data: string) => Promise<void>;
    listener?: ConfigListener;
    analyzer?: Analyzer;
    validators?: Validator[];
    builders?: Builder[];
    book: ConfigBook;
}
export interface ConfigListener {
    onAcceptables?: (acceptableSyntaxes: AcceptableSyntaxes) => any;
    onSymbols?: (symbols: Symbol[]) => any;
    onReports?: (reports: ProcessReport[]) => any;
    onCompileSuccess?: (book: Book) => void;
    onCompileFailed?: (book?: Book) => void;
}
export interface ConfigBook {
    predef?: ConfigChapter[];
    contents: ConfigPartOrChapter[];
    appendix?: ConfigChapter[];
    postdef?: ConfigChapter[];
}
export interface ConfigPartOrChapter {
    part?: ConfigPart;
    chapter?: ConfigChapter;
    file?: string;
}
export interface ConfigPart {
    file: string;
    chapters: ConfigChapter[];
}
export interface ConfigChapter {
    file: string;
}
/**
 * 生の設定ファイルでの本の構成情報を画一的なフォーマットに変換し保持するためのクラス。
 */
export declare class BookStructure {
    predef: ContentStructure[];
    contents: ContentStructure[];
    appendix: ContentStructure[];
    postdef: ContentStructure[];
    constructor(predef: ContentStructure[], contents: ContentStructure[], appendix: ContentStructure[], postdef: ContentStructure[]);
    static createBook(config: ConfigBook): BookStructure;
}
/**
 * 生の設定ファイルでの本の構成情報を画一的なフォーマットに変換し保持するためのクラス。
 */
export declare class ContentStructure {
    part: ConfigPart | null;
    chapter: ConfigChapter | null;
    private constructor(part, chapter);
    static createChapter(value: string | ConfigChapter): ContentStructure | null;
    static createPart(part: ConfigPart): ContentStructure | null;
}
