"use strict";
/**
 * 生の設定ファイルでの本の構成情報を画一的なフォーマットに変換し保持するためのクラス。
 */
var BookStructure = (function () {
    // TODO コンストラクタ隠したい
    function BookStructure(predef, contents, appendix, postdef) {
        this.predef = predef;
        this.contents = contents;
        this.appendix = appendix;
        this.postdef = postdef;
        this.predef = this.predef || [];
        this.contents = this.contents || [];
        this.appendix = this.appendix || [];
        this.postdef = this.postdef || [];
    }
    BookStructure.createBook = function (config) {
        if (!config) {
            return new BookStructure([], [], [], []);
        }
        var predef = (config.predef || config.PREDEF || []).map(function (v /* IConfigChapter */) { return ContentStructure.createChapter(v); });
        var contents = (config.contents || config.CHAPS || []).map(function (v) {
            // value は string(YAML由来) か IConfigPartOrChapter
            if (!v) {
                return null;
            }
            if (typeof v === "string") {
                // YAML由来
                return ContentStructure.createChapter(v);
            }
            else if (v.chapter) {
                // IConfigPartOrChapter 由来
                return ContentStructure.createChapter(v.chapter);
            }
            else if (v.part) {
                // IConfigPartOrChapter 由来
                return ContentStructure.createPart(v.part);
            }
            else if (typeof v.file === "string" && v.chapters) {
                return ContentStructure.createPart(v);
            }
            else if (typeof v.file === "string") {
                // IConfigPartOrChapter 由来
                return ContentStructure.createChapter(v);
            }
            else if (typeof v === "object") {
                // YAML由来
                return ContentStructure.createPart({
                    file: Object.keys(v)[0],
                    chapters: v[Object.keys(v)[0]].map(function (c) { return ({ file: c }); })
                });
            }
            else {
                return null;
            }
        });
        var appendix = (config.appendix || config.APPENDIX || []).map(function (v /* IConfigChapter */) { return ContentStructure.createChapter(v); });
        var postdef = (config.postdef || config.POSTDEF || []).map(function (v /* IConfigChapter */) { return ContentStructure.createChapter(v); });
        return new BookStructure(predef, contents, appendix, postdef);
    };
    return BookStructure;
}());
exports.BookStructure = BookStructure;
/**
 * 生の設定ファイルでの本の構成情報を画一的なフォーマットに変換し保持するためのクラス。
 */
var ContentStructure = (function () {
    function ContentStructure(part, chapter) {
        this.part = part;
        this.chapter = chapter;
    }
    ContentStructure.createChapter = function (value) {
        if (typeof value === "string") {
            return new ContentStructure(null, { file: value });
        }
        else if (value && typeof value.file === "string") {
            return new ContentStructure(null, value);
        }
        else {
            return null;
        }
    };
    ContentStructure.createPart = function (part) {
        if (!part) {
            return null;
        }
        var p = {
            file: part.file,
            chapters: (part.chapters || []).map(function (c) { return typeof c === "string" ? { file: c } : c; })
        };
        return new ContentStructure(p, null);
    };
    return ContentStructure;
}());
exports.ContentStructure = ContentStructure;
//# sourceMappingURL=configRaw.js.map