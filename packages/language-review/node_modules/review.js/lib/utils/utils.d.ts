import { Book, Process, BuilderProcess } from "../model/compilerModel";
import { SyntaxTree, NodeSyntaxTree, ChapterSyntaxTree } from "../parser/parser";
import { Builder } from "../builder/builder";
/**
 * ブラウザ上での実行かどうかを判別する。
 * @returns {boolean}
 */
export declare function isBrowser(): boolean;
/**
 * Node.js上での実行かどうかを判別する。
 * @returns {boolean}
 */
export declare function isNodeJS(): boolean;
/**
 * AMD環境下での実行かどうかを判別する。
 * @returns {boolean|any}
 */
export declare function isAMD(): boolean;
/**
 * ネストしたArrayを潰して平らにする。
 * Arrayかどうかの判定は Array.isArray を利用。
 * @param data
 * @returns {*[]}
 */
export declare function flatten(data: any[]): any[];
/**
 * SyntaxTree全体 を String に変換する。
 * @param process
 * @param node
 */
export declare function nodeToString(process: Process, node: SyntaxTree): string;
export declare function nodeToString(process: BuilderProcess, node: SyntaxTree): string;
/**
 * SyntaxTreeの中身部分 を String に変換する。
 * @param process
 * @param node
 */
export declare function nodeContentToString(process: Process, node: SyntaxTree): string;
export declare function nodeContentToString(process: BuilderProcess, node: SyntaxTree): string;
/**
 * 渡した要素から一番近いマッチする要素を探して返す。
 * 見つからなかった場合 null を返す。
 * @param node
 * @param predicate
 * @returns {SyntaxTree}
 */
export declare function findUp(node: SyntaxTree, predicate: (node: SyntaxTree) => boolean): SyntaxTree | null;
/**
 * 渡した要素から直近のChapterを探して返す。
 * 見つからなかった場合 null を返す。
 * もし、渡した要素自身がChapterだった場合、自身を返すのでnode.parentNode を渡すこと。
 * @param node
 * @param level 探すChapterのlevel
 * @returns {ReVIEW.Parse.ChapterSyntaxTree}
 */
export declare function findChapter(node: SyntaxTree, level?: number): ChapterSyntaxTree | null;
export declare function findChapterOrColumn(node: SyntaxTree, level?: number): NodeSyntaxTree | null;
export declare function target2builder(target: string): Builder | null;
/**
 * Node.jsでのIOをざっくり行うためのモジュール。
 */
export declare module IO {
    /**
     * 指定されたファイルを読み文字列として返す。
     * @param path
     * @returns {*}
     */
    function read(path: string): Promise<string>;
    /**
     * 指定されたファイルへ文字列を書く。
     * @param path
     * @param content
     */
    function write(path: string, content: string): Promise<null>;
}
/**
 * 行数から桁数の変換 100行 -> 3桁
 */
export declare function linesToFigure(lines: number): number;
export declare function padLeft(str: string, pad: string, maxLength: number): string;
export declare function stringRepeat(times: number, src: string): string;
/**
 * 実行するためのヘルパクラス群
 */
export declare module Exec {
    function singleCompile(input: string, fileName?: string, target?: string, tmpConfig?: any): Promise<{
        book: Book;
        results: any;
    }>;
}
