import { BuilderProcess, ContentChunk } from "../model/compilerModel";
import { DefaultBuilder } from "./builder";
import { NodeSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree } from "../parser/parser";
import { TreeVisitor, TreeVisitorReturn } from "../parser/walker";
export declare class HtmlBuilder extends DefaultBuilder {
    private standalone;
    extention: string;
    escapeMap: {
        [char: string]: string;
    };
    constructor(standalone?: boolean);
    escape(data: any): string;
    processPost(process: BuilderProcess, chunk: ContentChunk): void;
    headlinePre(process: BuilderProcess, _name: string, node: HeadlineSyntaxTree): void;
    headlinePost(process: BuilderProcess, _name: string, node: HeadlineSyntaxTree): void;
    columnPre(process: BuilderProcess, _node: ColumnSyntaxTree): void;
    columnPost(process: BuilderProcess, _node: ColumnSyntaxTree): void;
    columnHeadlinePre(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): (v: TreeVisitor) => void;
    columnHeadlinePost(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): void;
    paragraphPre(process: BuilderProcess, _name: string, node: NodeSyntaxTree): void;
    paragraphPost(process: BuilderProcess, _name: string, _node: NodeSyntaxTree): void;
    ulistPre(process: BuilderProcess, _name: string, node: UlistElementSyntaxTree): void;
    ulistPost(process: BuilderProcess, _name: string, node: UlistElementSyntaxTree): void;
    olistPre(process: BuilderProcess, _name: string, node: OlistElementSyntaxTree): void;
    olistPost(process: BuilderProcess, _name: string, node: OlistElementSyntaxTree): void;
    dlistPre(process: BuilderProcess, _name: string, node: DlistElementSyntaxTree): (v: TreeVisitor) => void;
    dlistPost(process: BuilderProcess, _name: string, node: DlistElementSyntaxTree): void;
    block_list_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn;
    block_list_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    block_listnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn;
    block_listnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_list(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    block_emlist_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_emlist_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    block_emlistnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_emlistnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_hd_pre(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    inline_hd_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_br(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_b_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_b_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_code_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_code_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_href(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    block_label(process: BuilderProcess, node: BlockElementSyntaxTree): boolean;
    inline_tt_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_tt_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_ruby_pre(process: BuilderProcess, node: InlineElementSyntaxTree): (_v: TreeVisitor) => void;
    inline_ruby_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_u_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_u_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_kw_pre(process: BuilderProcess, node: InlineElementSyntaxTree): (_v: TreeVisitor) => void;
    inline_kw_post(process: BuilderProcess, node: InlineElementSyntaxTree): void;
    inline_em_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_em_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    block_image(process: BuilderProcess, node: BlockElementSyntaxTree): Promise<boolean>;
    block_indepimage(process: BuilderProcess, node: BlockElementSyntaxTree): Promise<boolean>;
    block_graph_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_graph_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_img(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    inline_icon(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    block_footnote(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    inline_fn(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    block_lead_pre(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    block_lead_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_tti_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_tti_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_ttb_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_ttb_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    block_noindent(_process: BuilderProcess, _node: BlockElementSyntaxTree): boolean;
    block_source_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_source_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    block_cmd_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_cmd_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    block_quote_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_quote_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_ami_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_ami_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_bou_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_bou_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_i_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_i_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_m_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_m_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_strong_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_strong_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_uchar_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_uchar_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    block_table_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn;
    block_table_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_table(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    block_tsize(_process: BuilderProcess, _node: BlockElementSyntaxTree): boolean;
    block_comment_pre(process: BuilderProcess, node: BlockElementSyntaxTree): (v: TreeVisitor) => void;
    block_comment_post(process: BuilderProcess, _node: BlockElementSyntaxTree): void;
    inline_comment_pre(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_comment_post(process: BuilderProcess, _node: InlineElementSyntaxTree): void;
    inline_chap(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    inline_title(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
    inline_chapref(process: BuilderProcess, node: InlineElementSyntaxTree): boolean;
}
