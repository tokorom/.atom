"use strict";
var exception_1 = require("../js/exception");
var parser_1 = require("../parser/parser");
var walker_1 = require("../parser/walker");
var utils_1 = require("../utils/utils");
/**
 * デフォルトのビルダ。
 * Re:VIEWのASTから何らかのテキストに変換する時はこのクラスを拡張し作成する。
 */
var DefaultBuilder = (function () {
    function DefaultBuilder() {
        this.extention = "bug";
    }
    Object.defineProperty(DefaultBuilder.prototype, "name", {
        get: function () {
            return this.constructor.name;
        },
        enumerable: true,
        configurable: true
    });
    DefaultBuilder.prototype.init = function (book) {
        var _this = this;
        this.book = book;
        return Promise.all(book.allChunks.map(function (chunk) { return _this.processAst(chunk); })).then(function () { return null; });
    };
    DefaultBuilder.prototype.processAst = function (chunk) {
        var _this = this;
        var process = chunk.createBuilderProcess(this);
        return walker_1.visitAsync(chunk.tree.ast, {
            visitDefaultPre: function (_node) {
            },
            visitChapterPre: function (node) {
                return _this.chapterPre(process, node);
            },
            visitChapterPost: function (node) {
                return _this.chapterPost(process, node);
            },
            visitHeadlinePre: function (node) {
                return _this.headlinePre(process, "hd", node);
            },
            visitHeadlinePost: function (node) {
                return _this.headlinePost(process, "hd", node);
            },
            visitColumnPre: function (node) {
                return _this.columnPre(process, node);
            },
            visitColumnPost: function (node) {
                return _this.columnPost(process, node);
            },
            visitColumnHeadlinePre: function (node) {
                return _this.columnHeadlinePre(process, node);
            },
            visitColumnHeadlinePost: function (node) {
                return _this.columnHeadlinePost(process, node);
            },
            visitParagraphPre: function (node) {
                return _this.paragraphPre(process, "p", node);
            },
            visitParagraphPost: function (node) {
                return _this.paragraphPost(process, "p", node);
            },
            visitUlistPre: function (node) {
                return _this.ulistPre(process, "ul", node);
            },
            visitUlistPost: function (node) {
                return _this.ulistPost(process, "ul", node);
            },
            visitOlistPre: function (node) {
                return _this.olistPre(process, "ol", node);
            },
            visitOlistPost: function (node) {
                return _this.olistPost(process, "ol", node);
            },
            visitDlistPre: function (node) {
                return _this.dlistPre(process, "dl", node);
            },
            visitDlistPost: function (node) {
                return _this.dlistPost(process, "dl", node);
            },
            visitBlockElementPre: function (node) {
                return _this.blockPre(process, node.symbol, node);
            },
            visitBlockElementPost: function (node) {
                return _this.blockPost(process, node.symbol, node);
            },
            visitInlineElementPre: function (node) {
                return _this.inlinePre(process, node.symbol, node);
            },
            visitInlineElementPost: function (node) {
                return _this.inlinePost(process, node.symbol, node);
            },
            visitTextPre: function (node) {
                _this.text(process, node);
            },
            visitSingleLineCommentPre: function (node) {
                _this.singleLineComment(process, node);
            }
        })
            .then(function () {
            _this.processPost(process, chunk);
            return Promise.all(chunk.nodes.map(function (chunk) { return _this.processAst(chunk); })).then(function () { return null; });
        });
    };
    DefaultBuilder.prototype.escape = function (_data) {
        throw new Error("please override this method");
    };
    DefaultBuilder.prototype.getChapterTitle = function (process, chapter) {
        var chapterNode = null;
        walker_1.visit(chapter.tree.ast, {
            visitDefaultPre: function (_node, _parent) {
                return !chapterNode;
            },
            visitChapterPre: function (node, _parent) {
                chapterNode = node;
                return false;
            }
        });
        if (!chapterNode) {
            return null;
        }
        return utils_1.nodeContentToString(process, chapterNode.headline);
    };
    DefaultBuilder.prototype.processPost = function (_process, _chunk) {
    };
    DefaultBuilder.prototype.chapterPre = function (_process, _node) {
    };
    DefaultBuilder.prototype.chapterPost = function (_process, _node) {
    };
    DefaultBuilder.prototype.headlinePre = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.headlinePost = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.columnPre = function (_process, _node) {
    };
    DefaultBuilder.prototype.columnPost = function (_process, _node) {
    };
    DefaultBuilder.prototype.columnHeadlinePre = function (_process, _node) {
    };
    DefaultBuilder.prototype.columnHeadlinePost = function (_process, _node) {
    };
    DefaultBuilder.prototype.paragraphPre = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.paragraphPost = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.ulistPre = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.ulistPost = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.olistPre = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.olistPost = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.dlistPre = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.dlistPost = function (_process, _name, _node) {
    };
    DefaultBuilder.prototype.text = function (process, node) {
        // TODO in paragraph だったら note.text.replace("\n", "") したほうが良い…
        process.out(node.text);
    };
    DefaultBuilder.prototype.blockPre = function (process, name, node) {
        var func;
        func = this[("block_" + name)];
        if (typeof func === "function") {
            return func.call(this, process, node);
        }
        func = this[("block_" + name + "_pre")];
        if (typeof func !== "function") {
            throw new exception_1.AnalyzerError("block_" + name + "_pre or block_" + name + " is not Function");
        }
        return func.call(this, process, node);
    };
    DefaultBuilder.prototype.blockPost = function (process, name, node) {
        var func;
        func = this[("block_" + name)];
        if (typeof func === "function") {
            return;
        }
        func = this[("block_" + name + "_post")];
        if (typeof func !== "function") {
            throw new exception_1.AnalyzerError("block_" + name + "_post is not Function");
        }
        return func.call(this, process, node);
    };
    DefaultBuilder.prototype.inlinePre = function (process, name, node) {
        var func;
        func = this[("inline_" + name)];
        if (typeof func === "function") {
            return func.call(this, process, node);
        }
        func = this[("inline_" + name + "_pre")];
        if (typeof func !== "function") {
            throw new exception_1.AnalyzerError("inline_" + name + "_pre or inline_" + name + " is not Function");
        }
        return func.call(this, process, node);
    };
    DefaultBuilder.prototype.inlinePost = function (process, name, node) {
        var func;
        func = this[("inline_" + name)];
        if (typeof func === "function") {
            return;
        }
        func = this[("inline_" + name + "_post")];
        if (typeof func !== "function") {
            throw new exception_1.AnalyzerError("inline_" + name + "_post is not Function");
        }
        return func.call(this, process, node);
    };
    DefaultBuilder.prototype.ulistParentHelper = function (process, node, action, currentLevel) {
        if (currentLevel === void 0) { currentLevel = node.level; }
        if (currentLevel !== 1) {
            var result = utils_1.findUp(node.parentNode, function (n) {
                if (n instanceof parser_1.UlistElementSyntaxTree) {
                    return n.level === (currentLevel - 1);
                }
                return false;
            });
            if (result) {
                return;
            }
            action();
            this.ulistParentHelper(process, node, action, currentLevel - 1);
        }
    };
    DefaultBuilder.prototype.findReference = function (process, node) {
        var founds = process.symbols.filter(function (symbol) { return symbol.node === node; });
        if (founds.length !== 1) {
            throw new exception_1.AnalyzerError("invalid status.");
        }
        return founds[0];
    };
    DefaultBuilder.prototype.block_raw = function (process, node) {
        var _this = this;
        // TODO Ruby版との出力差が結構あるのでテスト含め直す
        var content = utils_1.nodeContentToString(process, node.args[0]);
        var matches = content.match(/\|(.+)\|/);
        if (matches && matches[1]) {
            var target = matches[1].split(",").some(function (name) { return _this.name.toLowerCase() === name + "builder"; });
            if (target) {
                // "|hoge,fuga| piyo" の場合 matches[1] === "hoge,fuga"
                process.outRaw(content.substring(matches[0].length));
            }
        }
        else {
            process.outRaw(content);
        }
        return false;
    };
    DefaultBuilder.prototype.inline_raw = function (process, node) {
        var _this = this;
        var content = utils_1.nodeContentToString(process, node);
        var matches = content.match(/\|(.+)\|/);
        if (matches && matches[1]) {
            var target = matches[1].split(",").some(function (name) { return _this.name.toLowerCase() === name + "builder"; });
            if (target) {
                // "|hoge,fuga| piyo" の場合 matches[1] === "hoge,fuga"
                process.outRaw(content.substring(matches[0].length));
            }
        }
        else {
            process.outRaw(content);
        }
        return false;
    };
    DefaultBuilder.prototype.singleLineComment = function (_process, _node) {
        // 特に何もしない
    };
    return DefaultBuilder;
}());
exports.DefaultBuilder = DefaultBuilder;
//# sourceMappingURL=builder.js.map