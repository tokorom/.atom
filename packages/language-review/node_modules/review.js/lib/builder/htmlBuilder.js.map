{"version":3,"file":"htmlBuilder.js","sourceRoot":"","sources":["htmlBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { t } from \"../i18n/i18n\";\nimport { BuilderProcess, ContentChunk } from \"../model/compilerModel\";\n\nimport { DefaultBuilder } from \"./builder\";\n\nimport { SyntaxTree, NodeSyntaxTree, ChapterSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree } from \"../parser/parser\";\n\nimport { visit, walk, TreeVisitor, TreeVisitorReturn } from \"../parser/walker\";\n\nimport { nodeContentToString, findChapter, padLeft, linesToFigure } from \"../utils/utils\";\n\nexport class HtmlBuilder extends DefaultBuilder {\n    extention = \"html\";\n\n    escapeMap: { [char: string]: string; } = {\n        \"&\": \"&amp;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': '&quot;',\n    };\n\n    constructor(private standalone = true) {\n        super();\n    }\n\n    escape(data: any): string {\n        let regexp = new RegExp(`[${Object.keys(this.escapeMap).join(\"\")}]`, \"g\");\n        return String(data).replace(regexp, c => this.escapeMap[c]);\n    }\n\n    processPost(process: BuilderProcess, chunk: ContentChunk): void {\n        if (this.standalone) {\n\n            let pre = \"\";\n            pre += `<?xml version=\"1.0\" encoding=\"UTF-8\"?>` + \"\\n\";\n            pre += `<!DOCTYPE html>` + \"\\n\";\n            pre += `<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\" xmlns:ops=\"http://www.idpf.org/2007/ops\" xml:lang=\"ja\">` + \"\\n\";\n            pre += `<head>` + \"\\n\";\n            pre += `  <meta charset=\"UTF-8\" />` + \"\\n\";\n            pre += `  <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" />` + \"\\n\";\n            pre += `  <meta name=\"generator\" content=\"Re:VIEW\" />` + \"\\n\";\n            let name: string | null = null;\n            visit(chunk.tree.ast, {\n                visitDefaultPre: () => {\n                },\n                visitChapterPre: (node: ChapterSyntaxTree) => {\n                    if (node.headline.level === 1) {\n                        name = nodeContentToString(process, node.headline.caption);\n                    }\n                }\n            });\n            pre += \"  <title>\" + this.escape(name) + \"</title>\\n\";\n            pre += \"</head>\\n\";\n            pre += \"<body>\\n\";\n            process.pushOut(pre);\n\n            process.outRaw(\"</body>\\n\");\n            process.outRaw(\"</html>\\n\");\n        }\n    }\n\n    headlinePre(process: BuilderProcess, _name: string, node: HeadlineSyntaxTree) {\n        process.outRaw(\"<h\").out(node.level);\n        if (node.label) {\n            process.outRaw(\" id=\\\"\").out(node.label.arg).outRaw(\"\\\"\");\n        }\n        process.outRaw(\">\");\n        let constructLabel = (node: SyntaxTree) => {\n            let numbers: { [no: number]: number; } = {};\n            let maxLevel = 0;\n            walk(node, (node: SyntaxTree) => {\n                if (node instanceof ChapterSyntaxTree) {\n                    numbers[node.level] = node.no;\n                    maxLevel = Math.max(maxLevel, node.level);\n                } else if (node instanceof ColumnSyntaxTree) {\n                    numbers[node.level] = -1;\n                    maxLevel = Math.max(maxLevel, node.level);\n                }\n                return node.parentNode;\n            });\n            let result: number[] = [];\n            for (let i = 1; i <= maxLevel; i++) {\n                if (numbers[i] === -1) {\n                    result.push(0);\n                } else if (typeof numbers[i] === \"undefined\") {\n                    result.push(1);\n                } else {\n                    result.push(numbers[i] || 0);\n                }\n            }\n            return result.join(\"-\");\n        };\n        process.outRaw(\"<a id=\\\"h\").out(constructLabel(node)).outRaw(\"\\\"></a>\");\n\n        if (node.level === 1) {\n            let text = t(\"builder.chapter\", node.parentNode.no);\n            process.outRaw(`<span class=\"secno\">`);\n            process.out(text).out(\"　\");\n            process.outRaw(`</span>`);\n        } else if (node.level === 2) {\n            // process.out(node.parentNode.toChapter().fqn).out(\"　\");\n        }\n    }\n\n    headlinePost(process: BuilderProcess, _name: string, node: HeadlineSyntaxTree) {\n        process.outRaw(\"</h\").out(node.level).outRaw(\">\\n\");\n    }\n\n    columnPre(process: BuilderProcess, _node: ColumnSyntaxTree) {\n        process.outRaw(\"<div class=\\\"column\\\">\\n\\n\");\n    }\n\n    columnPost(process: BuilderProcess, _node: ColumnSyntaxTree) {\n        process.outRaw(\"</div>\\n\");\n    }\n\n    columnHeadlinePre(process: BuilderProcess, node: ColumnHeadlineSyntaxTree) {\n        process.outRaw(\"<h\").out(node.level).outRaw(\">\");\n        process.outRaw(\"<a id=\\\"column-\").out(node.parentNode.no).outRaw(\"\\\"></a>\");\n\n        return (v: TreeVisitor) => {\n            visit(node.caption, v);\n        };\n    }\n\n    columnHeadlinePost(process: BuilderProcess, node: ColumnHeadlineSyntaxTree) {\n        process.outRaw(\"</h\").out(node.level).outRaw(\">\\n\");\n    }\n\n    paragraphPre(process: BuilderProcess, _name: string, node: NodeSyntaxTree) {\n        if (node.prev && node.prev.isBlockElement() && node.prev.toBlockElement().symbol === \"noindent\") {\n            process.outRaw(\"<p class=\\\"noindent\\\">\");\n        } else {\n            process.outRaw(\"<p>\");\n        }\n    }\n\n    paragraphPost(process: BuilderProcess, _name: string, _node: NodeSyntaxTree) {\n        process.outRaw(\"</p>\\n\");\n    }\n\n    ulistPre(process: BuilderProcess, _name: string, node: UlistElementSyntaxTree) {\n        this.ulistParentHelper(process, node, () => {\n            process.outRaw(\"<ul>\\n<li>\");\n        });\n        // TODO <p> で囲まれないようにする\n        if (node.prev instanceof UlistElementSyntaxTree === false) {\n            process.outRaw(\"<ul>\\n\");\n        }\n        process.outRaw(\"<li>\");\n    }\n\n    ulistPost(process: BuilderProcess, _name: string, node: UlistElementSyntaxTree) {\n        process.outRaw(\"</li>\\n\");\n        if (node.next instanceof UlistElementSyntaxTree === false) {\n            process.outRaw(\"</ul>\\n\");\n        }\n        this.ulistParentHelper(process, node, () => {\n            process.outRaw(\"</li>\\n</ul>\\n\");\n        });\n    }\n\n    olistPre(process: BuilderProcess, _name: string, node: OlistElementSyntaxTree) {\n        if (node.prev instanceof OlistElementSyntaxTree === false) {\n            process.outRaw(\"<ol>\\n\");\n        }\n        process.outRaw(\"<li>\");\n    }\n\n    olistPost(process: BuilderProcess, _name: string, node: OlistElementSyntaxTree) {\n        process.outRaw(\"</li>\\n\");\n        if (node.next instanceof OlistElementSyntaxTree === false) {\n            process.outRaw(\"</ol>\\n\");\n        }\n    }\n\n    dlistPre(process: BuilderProcess, _name: string, node: DlistElementSyntaxTree) {\n        if (node.prev instanceof DlistElementSyntaxTree === false) {\n            process.outRaw(\"<dl>\\n\");\n        }\n        return (v: TreeVisitor) => {\n            process.outRaw(\"<dt>\");\n            visit(node.text, v);\n            process.outRaw(\"</dt>\\n\");\n            process.outRaw(\"<dd>\");\n            visit(node.content, v);\n            process.outRaw(\"</dd>\\n\");\n        };\n    }\n\n    dlistPost(process: BuilderProcess, _name: string, node: DlistElementSyntaxTree) {\n        if (node.next instanceof DlistElementSyntaxTree === false) {\n            process.outRaw(\"</dl>\\n\");\n        }\n    }\n\n    block_list_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        process.outRaw(\"<div class=\\\"caption-code\\\">\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.list\", chapter.fqn, node.no);\n        process.outRaw(\"<p class=\\\"caption\\\">\").out(text).outRaw(\": \");\n        return (v: TreeVisitor) => {\n            // name はパスしたい, langもパスしたい\n            visit(node.args[1], v);\n\n            process.outRaw(\"</p>\\n\");\n            process.outRaw(\"<pre class=\\\"list\\\">\");\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_list_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    block_listnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        process.outRaw(\"<div class=\\\"code\\\">\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.list\", chapter.fqn, node.no);\n        process.outRaw(\"<p class=\\\"caption\\\">\").out(text).out(\": \");\n        let lineCount = 1;\n        return (v: TreeVisitor) => {\n            // name はパスしたい, langもパスしたい\n            visit(node.args[1], v);\n\n            process.outRaw(\"</p>\\n\");\n            process.outRaw(\"<pre class=\\\"list\\\">\");\n\n            let lineCountMax = 0;\n            node.childNodes.forEach(node => {\n                if (node.isTextNode()) {\n                    lineCountMax += node.toTextNode().text.split(\"\\n\").length;\n                }\n            });\n            let lineDigit = Math.max(linesToFigure(lineCountMax), 2);\n\n            node.childNodes.forEach((node, index, childNodes) => {\n                if (node.isTextNode()) {\n                    // 改行する可能性があるのはTextNodeだけ…のはず\n                    let hasNext = !!childNodes[index + 1];\n                    let textNode = node.toTextNode();\n                    let lines = textNode.text.split(\"\\n\");\n                    lines.forEach((line, index) => {\n                        process.out(padLeft(String(lineCount), \" \", lineDigit)).out(\": \");\n                        process.out(line);\n                        if (!hasNext || lines.length - 1 !== index) {\n                            lineCount++;\n                        }\n                        if (lines.length - 1 !== index) {\n                            process.out(\"\\n\");\n                        }\n                    });\n                } else {\n                    visit(node, v);\n                }\n            });\n        };\n    }\n\n    block_listnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    inline_list(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let listNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        let text = t(\"builder.list\", chapter.fqn, listNode.no);\n        process.out(text);\n        return false;\n    }\n\n    block_emlist_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<div class=\\\"emlist-code\\\">\\n\");\n        return (v: TreeVisitor) => {\n            // name はパスしたい\n            if (node.args[0]) {\n                process.outRaw(\"<p class=\\\"caption\\\">\");\n                visit(node.args[0], v);\n                process.outRaw(\"</p>\\n\");\n            }\n            process.outRaw(\"<pre class=\\\"emlist\\\">\");\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_emlist_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    block_emlistnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<div class=\\\"emlistnum-code\\\">\\n\");\n        process.outRaw(\"<pre class=\\\"emlist\\\">\");\n        let lineCount = 1;\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            let lineCountMax = 0;\n            node.childNodes.forEach(node => {\n                if (node.isTextNode()) {\n                    lineCountMax += node.toTextNode().text.split(\"\\n\").length;\n                }\n            });\n            let lineDigit = Math.max(linesToFigure(lineCountMax), 2);\n\n            node.childNodes.forEach((node, index, childNodes) => {\n                if (node.isTextNode()) {\n                    // 改行する可能性があるのはTextNodeだけ…のはず\n                    let hasNext = !!childNodes[index + 1];\n                    let textNode = node.toTextNode();\n                    let lines = textNode.text.split(\"\\n\");\n                    lines.forEach((line, index) => {\n                        process.out(padLeft(String(lineCount), \" \", lineDigit)).out(\": \");\n                        process.out(line);\n                        if (!hasNext || lines.length - 1 !== index) {\n                            lineCount++;\n                        }\n                        if (lines.length - 1 !== index) {\n                            process.out(\"\\n\");\n                        }\n                    });\n                } else {\n                    visit(node, v);\n                }\n            });\n        };\n    }\n\n    block_emlistnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    inline_hd_pre(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.out(\"「\");\n        let chapter = findChapter(node);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        if (chapter.level === 1) {\n            process.out(chapter.fqn).out(\"章 \");\n        } else {\n            process.out(chapter.fqn).out(\" \");\n        }\n        process.out(nodeContentToString(process, chapter.headline));\n        return false;\n    }\n\n    inline_hd_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"」\");\n    }\n\n    inline_br(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<br />\");\n    }\n\n    inline_b_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<b>\");\n    }\n\n    inline_b_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</b>\");\n    }\n\n    inline_code_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`<code class=\"inline-code tt\">`);\n    }\n\n    inline_code_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`</code>`);\n    }\n\n    inline_href(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let href = nodeContentToString(process, node);\n        let text = href;\n        if (href.indexOf(\",\") !== -1) {\n            text = href.slice(href.indexOf(\",\") + 1).trimLeft();\n            href = href.slice(0, href.indexOf(\",\"));\n        }\n        process.outRaw(\"<a href=\\\"\").outRaw(href).outRaw(\"\\\" class=\\\"link\\\">\").out(text).outRaw(\"</a>\");\n        return false;\n    }\n\n    block_label(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<a id=\\\"\");\n        process.out(nodeContentToString(process, node.args[0]));\n        process.outRaw(\"\\\"></a>\\n\");\n        return false;\n    }\n\n    inline_tt_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`<code class=\"tt\">`); // TODO RubyReviewではContentに改行が含まれている奴の挙動がサポートされていない。\n    }\n\n    inline_tt_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`</code>`);\n    }\n\n    inline_ruby_pre(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.outRaw(\"<ruby>\");\n        return (_v: TreeVisitor) => {\n            // name, args はパス\n            node.childNodes.forEach(node => {\n                let contentString = nodeContentToString(process, node);\n                let keywordData = contentString.split(\",\");\n                process.out(keywordData[0]);\n                process.outRaw(\"<rp>（</rp>\");\n                process.outRaw(\"<rt>\").out(keywordData[1]).outRaw(\"</rt>\");\n                process.outRaw(\"<rp>）</rp>\");\n            });\n        };\n    }\n\n    inline_ruby_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</ruby>\");\n    }\n\n    inline_u_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<u>\");\n    }\n\n    inline_u_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</u>\");\n    }\n\n    inline_kw_pre(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.outRaw(\"<b class=\\\"kw\\\">\");\n        return (_v: TreeVisitor) => {\n            // name, args はパス\n            node.childNodes.forEach(node => {\n                let contentString = nodeContentToString(process, node);\n                let keywordData = contentString.split(\",\");\n                let pre = keywordData[0];\n                let post = (keywordData[1] || \"\").trimLeft();\n                process.out(`${pre}`);\n                if (post) {\n                    process.out(` (${post})`);\n                }\n            });\n        };\n    }\n\n    inline_kw_post(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let contentString = nodeContentToString(process, node);\n        let keywordData = contentString.split(\",\");\n        let pre = keywordData[0];\n        process.outRaw(\"</b>\").outRaw(\"<!-- IDX:\").out(pre).outRaw(\" -->\");\n    }\n\n    inline_em_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<em>\");\n    }\n\n    inline_em_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</em>\");\n    }\n\n    block_image(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        let label = nodeContentToString(process, node.args[0]);\n        return process.findImageFile(label)\n            .then(imagePath => {\n                let caption = nodeContentToString(process, node.args[1]); // TODO vistでinlineの処理をきっちりするべき\n                let scale: number = 1;\n                if (node.args[2]) {\n                    // let arg3 = node.args[2].arg;\n                    let regexp = new RegExp(\"scale=(\\\\d+(?:\\\\.\\\\d+))\");\n                    let result = regexp.exec(nodeContentToString(process, node.args[2]));\n                    if (result) {\n                        scale = parseFloat(result[1]);\n                    }\n                }\n                process.outRaw(`<div id=\"`).out(label).outRaw(`\" class=\"image\">` + \"\\n\");\n                // imagePathは変数作成時点でユーザ入力部分をescapeしている\n                if (scale !== 1) {\n                    let scaleClass = `000${scale * 100}`;\n                    scaleClass = scaleClass.substr(scaleClass.length - 3);\n                    // TODO 各class設定にあわせたcssを同梱しないと…\n                    process.outRaw(`<img src=\"${imagePath}\" alt=\"`).out(caption).outRaw(`\" class=\"width-`).out(scaleClass).outRaw(\"per\\\" />\\n\");\n                } else {\n                    process.outRaw(`<img src=\"${imagePath}\" alt=\"`).out(caption).outRaw(`\" />` + \"\\n\");\n                }\n                process.outRaw(\"<p class=\\\"caption\\\">\\n\");\n                process.out(\"図\").out(process.base.chapter!.no).out(\".\").out(node.no).out(\": \").out(caption);\n                process.outRaw(\"\\n</p>\\n\");\n                process.outRaw(\"</div>\\n\");\n                return false;\n            })\n            .catch(id => {\n                process.error(t(\"builder.image_not_found\", id), node);\n                return false;\n            });\n    }\n\n    block_indepimage(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        let label = nodeContentToString(process, node.args[0]);\n        return process.findImageFile(label)\n            .then(imagePath => {\n                let caption: string = \"\";\n                if (node.args[1]) {\n                    caption = nodeContentToString(process, node.args[1]);\n                }\n                let scale: number = 1;\n                if (node.args[2]) {\n                    // let arg3 = node.args[2].arg;\n                    let regexp = new RegExp(\"scale=(\\\\d+(?:\\\\.\\\\d+))\");\n                    let result = regexp.exec(nodeContentToString(process, node.args[2]));\n                    if (result) {\n                        scale = parseFloat(result[1]);\n                    }\n                }\n                process.outRaw(\"<div class=\\\"image\\\">\\n\");\n                // imagePathは変数作成時点でユーザ入力部分をescapeしている\n                if (scale !== 1) {\n                    let scaleClass = `000${scale * 100}`;\n                    scaleClass = scaleClass.substr(scaleClass.length - 3);\n                    // TODO 各class設定にあわせたcssを同梱しないと…\n                    process.outRaw(`<img src=\"${imagePath}\" alt=\"`).out(caption).outRaw(`\" class=\"width-`).out(scaleClass).outRaw(\"per\\\" />\\n\");\n                } else {\n                    process.outRaw(`<img src=\"${imagePath}\" alt=\"`).out(caption).outRaw(`\" />` + \"\\n\");\n                }\n                if (node.args[1]) {\n                    process.outRaw(\"<p class=\\\"caption\\\">\\n\");\n                    process.out(\"図: \").out(caption);\n                    process.outRaw(\"\\n</p>\\n\");\n                }\n                process.outRaw(\"</div>\\n\");\n                return false;\n            });\n    }\n\n    block_graph_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"<div>\\n\");\n        let toolName = nodeContentToString(process, node.args[1]);\n        process.outRaw(\"<p>graph: \").out(toolName).outRaw(\"</p>\\n\");\n        process.outRaw(\"<pre>\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_graph_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    inline_img(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let imgNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        process.out(\"図\").out(process.base.chapter!.no).out(\".\").out(imgNode.no);\n        return false;\n    }\n\n    inline_icon(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO ファイル名探索ロジックをもっと頑張る(jpgとかsvgとか)\n        let chapterFileName = process.base.chapter!.name;\n        let chapterName = chapterFileName.substring(0, chapterFileName.length - 3);\n        let imageName = nodeContentToString(process, node);\n        let imagePath = \"images/\" + this.escape(chapterName) + \"-\" + this.escape(imageName) + \".png\";\n        process.outRaw(\"<img src=\\\"\" + imagePath + \"\\\" alt=\\\"[\").out(imageName).outRaw(\"]\\\" />\");\n        return false;\n    }\n\n    block_footnote(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        let label = nodeContentToString(process, node.args[0]);\n        process.outRaw(\"<div class=\\\"footnote\\\" epub:type=\\\"footnote\\\" id=\\\"fn-\").outRaw(label).outRaw(\"\\\"><p class=\\\"footnote\\\">\");\n        process.outRaw(\"[*\").out(node.no).outRaw(\"] \");\n        return (v: TreeVisitor) => {\n            visit(node.args[1], v);\n            process.outRaw(\"</p></div>\\n\");\n        };\n    }\n\n    inline_fn(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let footnoteNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        let label = nodeContentToString(process, footnoteNode.args[0]);\n        process.outRaw(`<a id=\"fnb-`).out(label).outRaw(`\" href=\"#fn-`).out(label).outRaw(`\" class=\"noteref\" epub:type=\"noteref\">*`).out(footnoteNode.no).outRaw(\"</a>\");\n        return false;\n    }\n\n    block_lead_pre(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"<div class=\\\"lead\\\">\\n\");\n    }\n\n    block_lead_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"</div>\\n\");\n    }\n\n    inline_tti_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`<code class=\"tt\"><i>`);\n    }\n\n    inline_tti_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`</i></code>`);\n    }\n\n    inline_ttb_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`<code class=\"tt\"><b>`);\n    }\n\n    inline_ttb_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(`</b></code>`);\n    }\n\n    block_noindent(_process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // paragraphPre 中で処理\n        return false;\n    }\n\n    block_source_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<div class=\\\"source-code\\\">\\n\");\n        process.outRaw(\"<p class=\\\"caption\\\">\").out(nodeContentToString(process, node.args[0])).outRaw(\"</p>\\n\");\n        process.outRaw(\"<pre class=\\\"source\\\">\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_source_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    block_cmd_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<div class=\\\"cmd-code\\\">\\n\");\n        process.outRaw(\"<pre class=\\\"cmd\\\">\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_cmd_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    block_quote_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<blockquote><p>\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_quote_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\"</p></blockquote>\\n\");\n    }\n\n    inline_ami_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<span class=\\\"ami\\\">\");\n    }\n\n    inline_ami_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</span>\");\n    }\n\n    inline_bou_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<span class=\\\"bou\\\">\");\n    }\n\n    inline_bou_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</span>\");\n    }\n\n    inline_i_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<i>\");\n    }\n\n    inline_i_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</i>\");\n    }\n\n    inline_m_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        // TODO MathMLかなんかで…\n        process.outRaw(\"<span>TODO: \");\n    }\n\n    inline_m_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</span>\");\n    }\n\n    inline_strong_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<strong>\");\n    }\n\n    inline_strong_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"</strong>\");\n    }\n\n    inline_uchar_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"&#x\");\n    }\n\n    inline_uchar_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\";\");\n    }\n\n    block_table_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"<div>\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.table\", chapter.fqn, node.no);\n        process.outRaw(\"<p class=\\\"caption\\\">\").out(text).out(\": \").out(nodeContentToString(process, node.args[1])).outRaw(\"</p>\\n\");\n        process.outRaw(\"<pre>\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_table_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"\\n</pre>\\n\").outRaw(\"</div>\\n\");\n    }\n\n    inline_table(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let listNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        let text = t(\"builder.table\", chapter.fqn, listNode.no);\n        process.out(text);\n        return false;\n    }\n\n    block_tsize(_process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        return false;\n    }\n\n    block_comment_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.outRaw(\"<!-- \");\n\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_comment_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.outRaw(\" -->\\n\");\n    }\n\n    inline_comment_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"<!-- \");\n    }\n\n    inline_comment_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\" -->\");\n    }\n\n    inline_chap(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        process.out(\"第\").out(chapter.no).out(\"章\");\n        return false;\n    }\n\n    inline_title(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        let title = this.getChapterTitle(process, chapter);\n        process.out(title);\n        return false;\n    }\n\n    inline_chapref(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        let title = this.getChapterTitle(process, chapter);\n        process.out(\"第\").out(chapter.no).out(\"章「\").out(title).out(\"」\");\n        return false;\n    }\n}\n"]}