import { Book, BuilderProcess, ContentChunk, Symbol } from "../model/compilerModel";
import { SyntaxTree, NodeSyntaxTree, ChapterSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, TextNodeSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree, SingleLineCommentSyntaxTree } from "../parser/parser";
/**
 * IAnalyzerとIValidatorでチェックをした後に構文木から出力を生成する。
 */
export interface Builder {
    name: string;
    extention: string;
    init(book: Book): Promise<void>;
    escape(data: any): string;
    chapterPre(process: BuilderProcess, node: ChapterSyntaxTree): any;
    chapterPost(process: BuilderProcess, node: ChapterSyntaxTree): any;
    headlinePre(process: BuilderProcess, name: string, node: HeadlineSyntaxTree): any;
    headlinePost(process: BuilderProcess, name: string, node: HeadlineSyntaxTree): any;
    columnPre(process: BuilderProcess, node: ColumnSyntaxTree): any;
    columnPost(process: BuilderProcess, node: ColumnSyntaxTree): any;
    columnHeadlinePre(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): any;
    columnHeadlinePost(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): any;
    ulistPre(process: BuilderProcess, name: string, node: UlistElementSyntaxTree): any;
    ulistPost(process: BuilderProcess, name: string, node: UlistElementSyntaxTree): any;
    olistPre(process: BuilderProcess, name: string, node: OlistElementSyntaxTree): any;
    olistPost(process: BuilderProcess, name: string, node: OlistElementSyntaxTree): any;
    blockPre(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;
    blockPost(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;
    inlinePre(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;
    inlinePost(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;
    text(process: BuilderProcess, node: TextNodeSyntaxTree): any;
    singleLineComment?(process: BuilderProcess, node: SingleLineCommentSyntaxTree): any;
}
/**
 * デフォルトのビルダ。
 * Re:VIEWのASTから何らかのテキストに変換する時はこのクラスを拡張し作成する。
 */
export declare class DefaultBuilder implements Builder {
    book: Book;
    extention: string;
    readonly name: string;
    init(book: Book): Promise<void>;
    processAst(chunk: ContentChunk): Promise<void>;
    escape(_data: any): string;
    getChapterTitle(process: BuilderProcess, chapter: ContentChunk): string | null;
    processPost(_process: BuilderProcess, _chunk: ContentChunk): void;
    chapterPre(_process: BuilderProcess, _node: ChapterSyntaxTree): any;
    chapterPost(_process: BuilderProcess, _node: ChapterSyntaxTree): any;
    headlinePre(_process: BuilderProcess, _name: string, _node: HeadlineSyntaxTree): any;
    headlinePost(_process: BuilderProcess, _name: string, _node: HeadlineSyntaxTree): any;
    columnPre(_process: BuilderProcess, _node: ColumnSyntaxTree): any;
    columnPost(_process: BuilderProcess, _node: ColumnSyntaxTree): any;
    columnHeadlinePre(_process: BuilderProcess, _node: ColumnHeadlineSyntaxTree): any;
    columnHeadlinePost(_process: BuilderProcess, _node: ColumnHeadlineSyntaxTree): any;
    paragraphPre(_process: BuilderProcess, _name: string, _node: NodeSyntaxTree): any;
    paragraphPost(_process: BuilderProcess, _name: string, _node: NodeSyntaxTree): any;
    ulistPre(_process: BuilderProcess, _name: string, _node: UlistElementSyntaxTree): any;
    ulistPost(_process: BuilderProcess, _name: string, _node: UlistElementSyntaxTree): any;
    olistPre(_process: BuilderProcess, _name: string, _node: OlistElementSyntaxTree): any;
    olistPost(_process: BuilderProcess, _name: string, _node: OlistElementSyntaxTree): any;
    dlistPre(_process: BuilderProcess, _name: string, _node: DlistElementSyntaxTree): any;
    dlistPost(_process: BuilderProcess, _name: string, _node: DlistElementSyntaxTree): any;
    text(process: BuilderProcess, node: TextNodeSyntaxTree): any;
    blockPre(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;
    blockPost(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;
    inlinePre(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;
    inlinePost(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;
    ulistParentHelper(process: BuilderProcess, node: UlistElementSyntaxTree, action: () => void, currentLevel?: number): void;
    findReference(process: BuilderProcess, node: SyntaxTree): Symbol;
    block_raw(process: BuilderProcess, node: BlockElementSyntaxTree): any;
    inline_raw(process: BuilderProcess, node: InlineElementSyntaxTree): any;
    singleLineComment(_process: BuilderProcess, _node: SingleLineCommentSyntaxTree): any;
}
