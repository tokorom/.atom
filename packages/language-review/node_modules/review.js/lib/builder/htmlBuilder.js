"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var i18n_1 = require("../i18n/i18n");
var builder_1 = require("./builder");
var parser_1 = require("../parser/parser");
var walker_1 = require("../parser/walker");
var utils_1 = require("../utils/utils");
var HtmlBuilder = (function (_super) {
    __extends(HtmlBuilder, _super);
    function HtmlBuilder(standalone) {
        if (standalone === void 0) { standalone = true; }
        _super.call(this);
        this.standalone = standalone;
        this.extention = "html";
        this.escapeMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': '&quot;',
        };
    }
    HtmlBuilder.prototype.escape = function (data) {
        var _this = this;
        var regexp = new RegExp("[" + Object.keys(this.escapeMap).join("") + "]", "g");
        return String(data).replace(regexp, function (c) { return _this.escapeMap[c]; });
    };
    HtmlBuilder.prototype.processPost = function (process, chunk) {
        if (this.standalone) {
            var pre = "";
            pre += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n";
            pre += "<!DOCTYPE html>" + "\n";
            pre += "<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\" xmlns:ops=\"http://www.idpf.org/2007/ops\" xml:lang=\"ja\">" + "\n";
            pre += "<head>" + "\n";
            pre += "  <meta charset=\"UTF-8\" />" + "\n";
            pre += "  <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" />" + "\n";
            pre += "  <meta name=\"generator\" content=\"Re:VIEW\" />" + "\n";
            var name_1 = null;
            walker_1.visit(chunk.tree.ast, {
                visitDefaultPre: function () {
                },
                visitChapterPre: function (node) {
                    if (node.headline.level === 1) {
                        name_1 = utils_1.nodeContentToString(process, node.headline.caption);
                    }
                }
            });
            pre += "  <title>" + this.escape(name_1) + "</title>\n";
            pre += "</head>\n";
            pre += "<body>\n";
            process.pushOut(pre);
            process.outRaw("</body>\n");
            process.outRaw("</html>\n");
        }
    };
    HtmlBuilder.prototype.headlinePre = function (process, _name, node) {
        process.outRaw("<h").out(node.level);
        if (node.label) {
            process.outRaw(" id=\"").out(node.label.arg).outRaw("\"");
        }
        process.outRaw(">");
        var constructLabel = function (node) {
            var numbers = {};
            var maxLevel = 0;
            walker_1.walk(node, function (node) {
                if (node instanceof parser_1.ChapterSyntaxTree) {
                    numbers[node.level] = node.no;
                    maxLevel = Math.max(maxLevel, node.level);
                }
                else if (node instanceof parser_1.ColumnSyntaxTree) {
                    numbers[node.level] = -1;
                    maxLevel = Math.max(maxLevel, node.level);
                }
                return node.parentNode;
            });
            var result = [];
            for (var i = 1; i <= maxLevel; i++) {
                if (numbers[i] === -1) {
                    result.push(0);
                }
                else if (typeof numbers[i] === "undefined") {
                    result.push(1);
                }
                else {
                    result.push(numbers[i] || 0);
                }
            }
            return result.join("-");
        };
        process.outRaw("<a id=\"h").out(constructLabel(node)).outRaw("\"></a>");
        if (node.level === 1) {
            var text = i18n_1.t("builder.chapter", node.parentNode.no);
            process.outRaw("<span class=\"secno\">");
            process.out(text).out("　");
            process.outRaw("</span>");
        }
        else if (node.level === 2) {
        }
    };
    HtmlBuilder.prototype.headlinePost = function (process, _name, node) {
        process.outRaw("</h").out(node.level).outRaw(">\n");
    };
    HtmlBuilder.prototype.columnPre = function (process, _node) {
        process.outRaw("<div class=\"column\">\n\n");
    };
    HtmlBuilder.prototype.columnPost = function (process, _node) {
        process.outRaw("</div>\n");
    };
    HtmlBuilder.prototype.columnHeadlinePre = function (process, node) {
        process.outRaw("<h").out(node.level).outRaw(">");
        process.outRaw("<a id=\"column-").out(node.parentNode.no).outRaw("\"></a>");
        return function (v) {
            walker_1.visit(node.caption, v);
        };
    };
    HtmlBuilder.prototype.columnHeadlinePost = function (process, node) {
        process.outRaw("</h").out(node.level).outRaw(">\n");
    };
    HtmlBuilder.prototype.paragraphPre = function (process, _name, node) {
        if (node.prev && node.prev.isBlockElement() && node.prev.toBlockElement().symbol === "noindent") {
            process.outRaw("<p class=\"noindent\">");
        }
        else {
            process.outRaw("<p>");
        }
    };
    HtmlBuilder.prototype.paragraphPost = function (process, _name, _node) {
        process.outRaw("</p>\n");
    };
    HtmlBuilder.prototype.ulistPre = function (process, _name, node) {
        this.ulistParentHelper(process, node, function () {
            process.outRaw("<ul>\n<li>");
        });
        // TODO <p> で囲まれないようにする
        if (node.prev instanceof parser_1.UlistElementSyntaxTree === false) {
            process.outRaw("<ul>\n");
        }
        process.outRaw("<li>");
    };
    HtmlBuilder.prototype.ulistPost = function (process, _name, node) {
        process.outRaw("</li>\n");
        if (node.next instanceof parser_1.UlistElementSyntaxTree === false) {
            process.outRaw("</ul>\n");
        }
        this.ulistParentHelper(process, node, function () {
            process.outRaw("</li>\n</ul>\n");
        });
    };
    HtmlBuilder.prototype.olistPre = function (process, _name, node) {
        if (node.prev instanceof parser_1.OlistElementSyntaxTree === false) {
            process.outRaw("<ol>\n");
        }
        process.outRaw("<li>");
    };
    HtmlBuilder.prototype.olistPost = function (process, _name, node) {
        process.outRaw("</li>\n");
        if (node.next instanceof parser_1.OlistElementSyntaxTree === false) {
            process.outRaw("</ol>\n");
        }
    };
    HtmlBuilder.prototype.dlistPre = function (process, _name, node) {
        if (node.prev instanceof parser_1.DlistElementSyntaxTree === false) {
            process.outRaw("<dl>\n");
        }
        return function (v) {
            process.outRaw("<dt>");
            walker_1.visit(node.text, v);
            process.outRaw("</dt>\n");
            process.outRaw("<dd>");
            walker_1.visit(node.content, v);
            process.outRaw("</dd>\n");
        };
    };
    HtmlBuilder.prototype.dlistPost = function (process, _name, node) {
        if (node.next instanceof parser_1.DlistElementSyntaxTree === false) {
            process.outRaw("</dl>\n");
        }
    };
    HtmlBuilder.prototype.block_list_pre = function (process, node) {
        process.outRaw("<div class=\"caption-code\">\n");
        var chapter = utils_1.findChapter(node, 1);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        var text = i18n_1.t("builder.list", chapter.fqn, node.no);
        process.outRaw("<p class=\"caption\">").out(text).outRaw(": ");
        return function (v) {
            // name はパスしたい, langもパスしたい
            walker_1.visit(node.args[1], v);
            process.outRaw("</p>\n");
            process.outRaw("<pre class=\"list\">");
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_list_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.block_listnum_pre = function (process, node) {
        process.outRaw("<div class=\"code\">\n");
        var chapter = utils_1.findChapter(node, 1);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        var text = i18n_1.t("builder.list", chapter.fqn, node.no);
        process.outRaw("<p class=\"caption\">").out(text).out(": ");
        var lineCount = 1;
        return function (v) {
            // name はパスしたい, langもパスしたい
            walker_1.visit(node.args[1], v);
            process.outRaw("</p>\n");
            process.outRaw("<pre class=\"list\">");
            var lineCountMax = 0;
            node.childNodes.forEach(function (node) {
                if (node.isTextNode()) {
                    lineCountMax += node.toTextNode().text.split("\n").length;
                }
            });
            var lineDigit = Math.max(utils_1.linesToFigure(lineCountMax), 2);
            node.childNodes.forEach(function (node, index, childNodes) {
                if (node.isTextNode()) {
                    // 改行する可能性があるのはTextNodeだけ…のはず
                    var hasNext_1 = !!childNodes[index + 1];
                    var textNode = node.toTextNode();
                    var lines_1 = textNode.text.split("\n");
                    lines_1.forEach(function (line, index) {
                        process.out(utils_1.padLeft(String(lineCount), " ", lineDigit)).out(": ");
                        process.out(line);
                        if (!hasNext_1 || lines_1.length - 1 !== index) {
                            lineCount++;
                        }
                        if (lines_1.length - 1 !== index) {
                            process.out("\n");
                        }
                    });
                }
                else {
                    walker_1.visit(node, v);
                }
            });
        };
    };
    HtmlBuilder.prototype.block_listnum_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.inline_list = function (process, node) {
        var chapter = utils_1.findChapter(node, 1);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        var listNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
        var text = i18n_1.t("builder.list", chapter.fqn, listNode.no);
        process.out(text);
        return false;
    };
    HtmlBuilder.prototype.block_emlist_pre = function (process, node) {
        process.outRaw("<div class=\"emlist-code\">\n");
        return function (v) {
            // name はパスしたい
            if (node.args[0]) {
                process.outRaw("<p class=\"caption\">");
                walker_1.visit(node.args[0], v);
                process.outRaw("</p>\n");
            }
            process.outRaw("<pre class=\"emlist\">");
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_emlist_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.block_emlistnum_pre = function (process, node) {
        process.outRaw("<div class=\"emlistnum-code\">\n");
        process.outRaw("<pre class=\"emlist\">");
        var lineCount = 1;
        return function (v) {
            // name, args はパスしたい
            var lineCountMax = 0;
            node.childNodes.forEach(function (node) {
                if (node.isTextNode()) {
                    lineCountMax += node.toTextNode().text.split("\n").length;
                }
            });
            var lineDigit = Math.max(utils_1.linesToFigure(lineCountMax), 2);
            node.childNodes.forEach(function (node, index, childNodes) {
                if (node.isTextNode()) {
                    // 改行する可能性があるのはTextNodeだけ…のはず
                    var hasNext_2 = !!childNodes[index + 1];
                    var textNode = node.toTextNode();
                    var lines_2 = textNode.text.split("\n");
                    lines_2.forEach(function (line, index) {
                        process.out(utils_1.padLeft(String(lineCount), " ", lineDigit)).out(": ");
                        process.out(line);
                        if (!hasNext_2 || lines_2.length - 1 !== index) {
                            lineCount++;
                        }
                        if (lines_2.length - 1 !== index) {
                            process.out("\n");
                        }
                    });
                }
                else {
                    walker_1.visit(node, v);
                }
            });
        };
    };
    HtmlBuilder.prototype.block_emlistnum_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.inline_hd_pre = function (process, node) {
        process.out("「");
        var chapter = utils_1.findChapter(node);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        if (chapter.level === 1) {
            process.out(chapter.fqn).out("章 ");
        }
        else {
            process.out(chapter.fqn).out(" ");
        }
        process.out(utils_1.nodeContentToString(process, chapter.headline));
        return false;
    };
    HtmlBuilder.prototype.inline_hd_post = function (process, _node) {
        process.out("」");
    };
    HtmlBuilder.prototype.inline_br = function (process, _node) {
        process.outRaw("<br />");
    };
    HtmlBuilder.prototype.inline_b_pre = function (process, _node) {
        process.outRaw("<b>");
    };
    HtmlBuilder.prototype.inline_b_post = function (process, _node) {
        process.outRaw("</b>");
    };
    HtmlBuilder.prototype.inline_code_pre = function (process, _node) {
        process.outRaw("<code class=\"inline-code tt\">");
    };
    HtmlBuilder.prototype.inline_code_post = function (process, _node) {
        process.outRaw("</code>");
    };
    HtmlBuilder.prototype.inline_href = function (process, node) {
        var href = utils_1.nodeContentToString(process, node);
        var text = href;
        if (href.indexOf(",") !== -1) {
            text = href.slice(href.indexOf(",") + 1).trimLeft();
            href = href.slice(0, href.indexOf(","));
        }
        process.outRaw("<a href=\"").outRaw(href).outRaw("\" class=\"link\">").out(text).outRaw("</a>");
        return false;
    };
    HtmlBuilder.prototype.block_label = function (process, node) {
        process.outRaw("<a id=\"");
        process.out(utils_1.nodeContentToString(process, node.args[0]));
        process.outRaw("\"></a>\n");
        return false;
    };
    HtmlBuilder.prototype.inline_tt_pre = function (process, _node) {
        process.outRaw("<code class=\"tt\">"); // TODO RubyReviewではContentに改行が含まれている奴の挙動がサポートされていない。
    };
    HtmlBuilder.prototype.inline_tt_post = function (process, _node) {
        process.outRaw("</code>");
    };
    HtmlBuilder.prototype.inline_ruby_pre = function (process, node) {
        process.outRaw("<ruby>");
        return function (_v) {
            // name, args はパス
            node.childNodes.forEach(function (node) {
                var contentString = utils_1.nodeContentToString(process, node);
                var keywordData = contentString.split(",");
                process.out(keywordData[0]);
                process.outRaw("<rp>（</rp>");
                process.outRaw("<rt>").out(keywordData[1]).outRaw("</rt>");
                process.outRaw("<rp>）</rp>");
            });
        };
    };
    HtmlBuilder.prototype.inline_ruby_post = function (process, _node) {
        process.outRaw("</ruby>");
    };
    HtmlBuilder.prototype.inline_u_pre = function (process, _node) {
        process.outRaw("<u>");
    };
    HtmlBuilder.prototype.inline_u_post = function (process, _node) {
        process.outRaw("</u>");
    };
    HtmlBuilder.prototype.inline_kw_pre = function (process, node) {
        process.outRaw("<b class=\"kw\">");
        return function (_v) {
            // name, args はパス
            node.childNodes.forEach(function (node) {
                var contentString = utils_1.nodeContentToString(process, node);
                var keywordData = contentString.split(",");
                var pre = keywordData[0];
                var post = (keywordData[1] || "").trimLeft();
                process.out("" + pre);
                if (post) {
                    process.out(" (" + post + ")");
                }
            });
        };
    };
    HtmlBuilder.prototype.inline_kw_post = function (process, node) {
        var contentString = utils_1.nodeContentToString(process, node);
        var keywordData = contentString.split(",");
        var pre = keywordData[0];
        process.outRaw("</b>").outRaw("<!-- IDX:").out(pre).outRaw(" -->");
    };
    HtmlBuilder.prototype.inline_em_pre = function (process, _node) {
        process.outRaw("<em>");
    };
    HtmlBuilder.prototype.inline_em_post = function (process, _node) {
        process.outRaw("</em>");
    };
    HtmlBuilder.prototype.block_image = function (process, node) {
        var label = utils_1.nodeContentToString(process, node.args[0]);
        return process.findImageFile(label)
            .then(function (imagePath) {
            var caption = utils_1.nodeContentToString(process, node.args[1]); // TODO vistでinlineの処理をきっちりするべき
            var scale = 1;
            if (node.args[2]) {
                // let arg3 = node.args[2].arg;
                var regexp = new RegExp("scale=(\\d+(?:\\.\\d+))");
                var result = regexp.exec(utils_1.nodeContentToString(process, node.args[2]));
                if (result) {
                    scale = parseFloat(result[1]);
                }
            }
            process.outRaw("<div id=\"").out(label).outRaw("\" class=\"image\">" + "\n");
            // imagePathは変数作成時点でユーザ入力部分をescapeしている
            if (scale !== 1) {
                var scaleClass = "000" + scale * 100;
                scaleClass = scaleClass.substr(scaleClass.length - 3);
                // TODO 各class設定にあわせたcssを同梱しないと…
                process.outRaw("<img src=\"" + imagePath + "\" alt=\"").out(caption).outRaw("\" class=\"width-").out(scaleClass).outRaw("per\" />\n");
            }
            else {
                process.outRaw("<img src=\"" + imagePath + "\" alt=\"").out(caption).outRaw("\" />" + "\n");
            }
            process.outRaw("<p class=\"caption\">\n");
            process.out("図").out(process.base.chapter.no).out(".").out(node.no).out(": ").out(caption);
            process.outRaw("\n</p>\n");
            process.outRaw("</div>\n");
            return false;
        })
            .catch(function (id) {
            process.error(i18n_1.t("builder.image_not_found", id), node);
            return false;
        });
    };
    HtmlBuilder.prototype.block_indepimage = function (process, node) {
        var label = utils_1.nodeContentToString(process, node.args[0]);
        return process.findImageFile(label)
            .then(function (imagePath) {
            var caption = "";
            if (node.args[1]) {
                caption = utils_1.nodeContentToString(process, node.args[1]);
            }
            var scale = 1;
            if (node.args[2]) {
                // let arg3 = node.args[2].arg;
                var regexp = new RegExp("scale=(\\d+(?:\\.\\d+))");
                var result = regexp.exec(utils_1.nodeContentToString(process, node.args[2]));
                if (result) {
                    scale = parseFloat(result[1]);
                }
            }
            process.outRaw("<div class=\"image\">\n");
            // imagePathは変数作成時点でユーザ入力部分をescapeしている
            if (scale !== 1) {
                var scaleClass = "000" + scale * 100;
                scaleClass = scaleClass.substr(scaleClass.length - 3);
                // TODO 各class設定にあわせたcssを同梱しないと…
                process.outRaw("<img src=\"" + imagePath + "\" alt=\"").out(caption).outRaw("\" class=\"width-").out(scaleClass).outRaw("per\" />\n");
            }
            else {
                process.outRaw("<img src=\"" + imagePath + "\" alt=\"").out(caption).outRaw("\" />" + "\n");
            }
            if (node.args[1]) {
                process.outRaw("<p class=\"caption\">\n");
                process.out("図: ").out(caption);
                process.outRaw("\n</p>\n");
            }
            process.outRaw("</div>\n");
            return false;
        });
    };
    HtmlBuilder.prototype.block_graph_pre = function (process, node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        process.outRaw("<div>\n");
        var toolName = utils_1.nodeContentToString(process, node.args[1]);
        process.outRaw("<p>graph: ").out(toolName).outRaw("</p>\n");
        process.outRaw("<pre>");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_graph_post = function (process, _node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.inline_img = function (process, node) {
        var imgNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
        process.out("図").out(process.base.chapter.no).out(".").out(imgNode.no);
        return false;
    };
    HtmlBuilder.prototype.inline_icon = function (process, node) {
        // TODO ファイル名探索ロジックをもっと頑張る(jpgとかsvgとか)
        var chapterFileName = process.base.chapter.name;
        var chapterName = chapterFileName.substring(0, chapterFileName.length - 3);
        var imageName = utils_1.nodeContentToString(process, node);
        var imagePath = "images/" + this.escape(chapterName) + "-" + this.escape(imageName) + ".png";
        process.outRaw("<img src=\"" + imagePath + "\" alt=\"[").out(imageName).outRaw("]\" />");
        return false;
    };
    HtmlBuilder.prototype.block_footnote = function (process, node) {
        var label = utils_1.nodeContentToString(process, node.args[0]);
        process.outRaw("<div class=\"footnote\" epub:type=\"footnote\" id=\"fn-").outRaw(label).outRaw("\"><p class=\"footnote\">");
        process.outRaw("[*").out(node.no).outRaw("] ");
        return function (v) {
            walker_1.visit(node.args[1], v);
            process.outRaw("</p></div>\n");
        };
    };
    HtmlBuilder.prototype.inline_fn = function (process, node) {
        var footnoteNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
        var label = utils_1.nodeContentToString(process, footnoteNode.args[0]);
        process.outRaw("<a id=\"fnb-").out(label).outRaw("\" href=\"#fn-").out(label).outRaw("\" class=\"noteref\" epub:type=\"noteref\">*").out(footnoteNode.no).outRaw("</a>");
        return false;
    };
    HtmlBuilder.prototype.block_lead_pre = function (process, _node) {
        process.outRaw("<div class=\"lead\">\n");
    };
    HtmlBuilder.prototype.block_lead_post = function (process, _node) {
        process.outRaw("</div>\n");
    };
    HtmlBuilder.prototype.inline_tti_pre = function (process, _node) {
        process.outRaw("<code class=\"tt\"><i>");
    };
    HtmlBuilder.prototype.inline_tti_post = function (process, _node) {
        process.outRaw("</i></code>");
    };
    HtmlBuilder.prototype.inline_ttb_pre = function (process, _node) {
        process.outRaw("<code class=\"tt\"><b>");
    };
    HtmlBuilder.prototype.inline_ttb_post = function (process, _node) {
        process.outRaw("</b></code>");
    };
    HtmlBuilder.prototype.block_noindent = function (_process, _node) {
        // paragraphPre 中で処理
        return false;
    };
    HtmlBuilder.prototype.block_source_pre = function (process, node) {
        process.outRaw("<div class=\"source-code\">\n");
        process.outRaw("<p class=\"caption\">").out(utils_1.nodeContentToString(process, node.args[0])).outRaw("</p>\n");
        process.outRaw("<pre class=\"source\">");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_source_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.block_cmd_pre = function (process, node) {
        process.outRaw("<div class=\"cmd-code\">\n");
        process.outRaw("<pre class=\"cmd\">");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_cmd_post = function (process, _node) {
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.block_quote_pre = function (process, node) {
        process.outRaw("<blockquote><p>");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_quote_post = function (process, _node) {
        process.outRaw("</p></blockquote>\n");
    };
    HtmlBuilder.prototype.inline_ami_pre = function (process, _node) {
        process.outRaw("<span class=\"ami\">");
    };
    HtmlBuilder.prototype.inline_ami_post = function (process, _node) {
        process.outRaw("</span>");
    };
    HtmlBuilder.prototype.inline_bou_pre = function (process, _node) {
        process.outRaw("<span class=\"bou\">");
    };
    HtmlBuilder.prototype.inline_bou_post = function (process, _node) {
        process.outRaw("</span>");
    };
    HtmlBuilder.prototype.inline_i_pre = function (process, _node) {
        process.outRaw("<i>");
    };
    HtmlBuilder.prototype.inline_i_post = function (process, _node) {
        process.outRaw("</i>");
    };
    HtmlBuilder.prototype.inline_m_pre = function (process, _node) {
        // TODO MathMLかなんかで…
        process.outRaw("<span>TODO: ");
    };
    HtmlBuilder.prototype.inline_m_post = function (process, _node) {
        process.outRaw("</span>");
    };
    HtmlBuilder.prototype.inline_strong_pre = function (process, _node) {
        process.outRaw("<strong>");
    };
    HtmlBuilder.prototype.inline_strong_post = function (process, _node) {
        process.outRaw("</strong>");
    };
    HtmlBuilder.prototype.inline_uchar_pre = function (process, _node) {
        process.outRaw("&#x");
    };
    HtmlBuilder.prototype.inline_uchar_post = function (process, _node) {
        process.outRaw(";");
    };
    HtmlBuilder.prototype.block_table_pre = function (process, node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        process.outRaw("<div>\n");
        var chapter = utils_1.findChapter(node, 1);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        var text = i18n_1.t("builder.table", chapter.fqn, node.no);
        process.outRaw("<p class=\"caption\">").out(text).out(": ").out(utils_1.nodeContentToString(process, node.args[1])).outRaw("</p>\n");
        process.outRaw("<pre>");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_table_post = function (process, _node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        process.outRaw("\n</pre>\n").outRaw("</div>\n");
    };
    HtmlBuilder.prototype.inline_table = function (process, node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        var chapter = utils_1.findChapter(node, 1);
        if (!chapter) {
            process.error(i18n_1.t("builder.chapter_not_found", 1), node);
            return false;
        }
        var listNode = this.findReference(process, node).referenceTo.referenceNode.toBlockElement();
        var text = i18n_1.t("builder.table", chapter.fqn, listNode.no);
        process.out(text);
        return false;
    };
    HtmlBuilder.prototype.block_tsize = function (_process, _node) {
        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装
        return false;
    };
    HtmlBuilder.prototype.block_comment_pre = function (process, node) {
        process.outRaw("<!-- ");
        return function (v) {
            // name, args はパスしたい
            node.childNodes.forEach(function (node) {
                walker_1.visit(node, v);
            });
        };
    };
    HtmlBuilder.prototype.block_comment_post = function (process, _node) {
        process.outRaw(" -->\n");
    };
    HtmlBuilder.prototype.inline_comment_pre = function (process, _node) {
        process.outRaw("<!-- ");
    };
    HtmlBuilder.prototype.inline_comment_post = function (process, _node) {
        process.outRaw(" -->");
    };
    HtmlBuilder.prototype.inline_chap = function (process, node) {
        var chapName = utils_1.nodeContentToString(process, node);
        var chapter = process.findChapter(chapName);
        process.out("第").out(chapter.no).out("章");
        return false;
    };
    HtmlBuilder.prototype.inline_title = function (process, node) {
        var chapName = utils_1.nodeContentToString(process, node);
        var chapter = process.findChapter(chapName);
        var title = this.getChapterTitle(process, chapter);
        process.out(title);
        return false;
    };
    HtmlBuilder.prototype.inline_chapref = function (process, node) {
        var chapName = utils_1.nodeContentToString(process, node);
        var chapter = process.findChapter(chapName);
        var title = this.getChapterTitle(process, chapter);
        process.out("第").out(chapter.no).out("章「").out(title).out("」");
        return false;
    };
    return HtmlBuilder;
}(builder_1.DefaultBuilder));
exports.HtmlBuilder = HtmlBuilder;
//# sourceMappingURL=htmlBuilder.js.map