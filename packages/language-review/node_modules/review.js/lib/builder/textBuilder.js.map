{"version":3,"file":"textBuilder.js","sourceRoot":"","sources":["textBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { BuilderProcess } from \"../model/compilerModel\";\n\nimport { DefaultBuilder } from \"./builder\";\n\nimport { t } from \"../i18n/i18n\";\n\nimport { NodeSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree } from \"../parser/parser\";\n\nimport { visit, TreeVisitor, TreeVisitorReturn } from \"../parser/walker\";\n\nimport { nodeContentToString, findChapter, padLeft, linesToFigure } from \"../utils/utils\";\n\nexport class TextBuilder extends DefaultBuilder {\n    extention = \"txt\";\n\n    escape(data: any): string {\n        return data;\n    }\n\n    headlinePre(process: BuilderProcess, _name: string, node: HeadlineSyntaxTree) {\n        // TODO no の採番がレベル別になっていない\n        // TODO 2.3.2 みたいな階層を返せるメソッドが何かほしい\n        process.out(\"■H\").out(node.level).out(\"■\");\n        if (node.level === 1) {\n            let text = t(\"builder.chapter\", node.parentNode.no);\n            process.out(text).out(\"　\");\n        } else if (node.level === 2) {\n            // process.out(node.parentNode.toChapter().fqn).out(\"　\");\n        }\n    }\n\n    headlinePost(process: BuilderProcess, _name: string, _node: HeadlineSyntaxTree) {\n        process.out(\"\\n\\n\");\n    }\n\n    columnHeadlinePre(process: BuilderProcess, node: ColumnHeadlineSyntaxTree) {\n        process.out(\"\\n◆→開始:コラム←◆\\n\");\n        process.out(\"■\");\n        return (v: TreeVisitor) => {\n            visit(node.caption, v);\n        };\n    }\n\n    columnHeadlinePost(process: BuilderProcess, _node: ColumnHeadlineSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    columnPost(process: BuilderProcess, _node: ColumnSyntaxTree) {\n        process.out(\"◆→終了:コラム←◆\\n\\n\");\n    }\n\n    paragraphPost(process: BuilderProcess, _name: string, _node: NodeSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    ulistPre(process: BuilderProcess, _name: string, node: UlistElementSyntaxTree) {\n        this.ulistParentHelper(process, node, () => {\n            process.out(\"\\n\\n●\\t\");\n        });\n        if (node.parentNode instanceof UlistElementSyntaxTree && node.prev instanceof UlistElementSyntaxTree === false) {\n            process.out(\"\\n\\n\");\n        } else if (node.parentNode instanceof UlistElementSyntaxTree) {\n            process.out(\"\");\n        }\n        process.out(\"●\\t\");\n    }\n\n    ulistPost(process: BuilderProcess, _name: string, _node: UlistElementSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    olistPre(process: BuilderProcess, _name: string, node: OlistElementSyntaxTree) {\n        process.out(node.no).out(\"\\t\");\n    }\n\n    olistPost(process: BuilderProcess, _name: string, _node: OlistElementSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    dlistPre(process: BuilderProcess, _name: string, node: DlistElementSyntaxTree) {\n        return (v: TreeVisitor) => {\n            process.out(\"★\");\n            visit(node.text, v);\n            process.out(\"☆\\n\");\n            process.out(\"\\t\");\n            visit(node.content, v);\n            process.out(\"\\n\");\n        };\n    }\n\n    dlistPost(process: BuilderProcess, _name: string, _node: DlistElementSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    block_list_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        process.out(\"◆→開始:リスト←◆\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.list\", chapter.fqn, node.no);\n        process.out(text).out(\"　\");\n        return (v: TreeVisitor) => {\n            // name はパスしたい, langもパスしたい\n            visit(node.args[1], v);\n\n            process.outRaw(\"\\n\\n\");\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_list_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"\\n◆→終了:リスト←◆\\n\");\n    }\n\n    block_listnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        process.out(\"◆→開始:リスト←◆\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.list\", chapter.fqn, node.no);\n        process.out(text).out(\"　\");\n        let lineCount = 1;\n        return (v: TreeVisitor) => {\n            // name はパスしたい, langもパスしたい\n            visit(node.args[1], v);\n\n            let lineCountMax = 0;\n            node.childNodes.forEach((node, _index, _childNodes) => {\n                if (node.isTextNode()) {\n                    lineCountMax += node.toTextNode().text.split(\"\\n\").length;\n                }\n            });\n            let lineDigit = Math.max(linesToFigure(lineCountMax), 2);\n\n            process.outRaw(\"\\n\\n\");\n            node.childNodes.forEach((node, index, childNodes) => {\n                if (node.isTextNode()) {\n                    // 改行する可能性があるのはTextNodeだけ…のはず\n                    let hasNext = !!childNodes[index + 1];\n                    let textNode = node.toTextNode();\n                    let lines = textNode.text.split(\"\\n\");\n                    lines.forEach((line, index) => {\n                        process.out(padLeft(String(lineCount), \" \", lineDigit)).out(\": \");\n                        process.out(line);\n                        if (!hasNext || lines.length - 1 !== index) {\n                            lineCount++;\n                        }\n                        process.out(\"\\n\");\n                    });\n                } else {\n                    visit(node, v);\n                }\n            });\n        };\n    }\n\n    block_listnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"◆→終了:リスト←◆\\n\");\n    }\n\n    inline_list(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let listNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        let text = t(\"builder.list\", chapter.fqn, listNode.no);\n        process.out(text);\n        return false;\n    }\n\n    block_emlist_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:インラインリスト←◆\\n\");\n        return (v: TreeVisitor) => {\n            // name はパスしたい\n            if (node.args[0]) {\n                process.out(\"■\");\n                visit(node.args[0], v);\n                process.out(\"\\n\");\n            }\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_emlist_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"\\n◆→終了:インラインリスト←◆\\n\");\n    }\n\n    block_emlistnum_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:インラインリスト←◆\\n\");\n        let lineCount = 1;\n        return (v: TreeVisitor) => {\n            // name はパスしたい\n            if (node.args[0]) {\n                process.out(\"■\");\n                visit(node.args[0], v);\n                process.out(\"\\n\");\n            }\n\n            let lineCountMax = 0;\n            node.childNodes.forEach((node, _index, _childNodes) => {\n                if (node.isTextNode()) {\n                    lineCountMax += node.toTextNode().text.split(\"\\n\").length;\n                }\n            });\n            let lineDigit = Math.max(linesToFigure(lineCountMax), 2);\n\n            node.childNodes.forEach((node, index, childNodes) => {\n                if (node.isTextNode()) {\n                    // 改行する可能性があるのはTextNodeだけ…のはず\n                    let hasNext = !!childNodes[index + 1];\n                    let textNode = node.toTextNode();\n                    let lines = textNode.text.split(\"\\n\");\n                    lines.forEach((line, index) => {\n                        process.out(padLeft(String(lineCount), \" \", lineDigit)).out(\": \");\n                        process.out(line);\n                        if (!hasNext || lines.length - 1 !== index) {\n                            lineCount++;\n                        }\n                        process.out(\"\\n\");\n                    });\n                } else {\n                    visit(node, v);\n                }\n            });\n        };\n    }\n\n    block_emlistnum_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"◆→終了:インラインリスト←◆\\n\");\n    }\n\n    inline_hd_pre(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.out(\"「\");\n        let chapter = findChapter(node);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        if (chapter.level === 1) {\n            process.out(chapter.fqn).out(\"章 \");\n        } else {\n            process.out(chapter.fqn).out(\" \");\n        }\n        process.out(nodeContentToString(process, chapter.headline));\n        return false;\n    }\n\n    inline_hd_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"」\");\n    }\n\n    inline_br(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"\\n\");\n    }\n\n    inline_b_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"★\");\n    }\n\n    inline_b_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_code_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"△\");\n    }\n\n    inline_code_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_href_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"△\");\n    }\n\n    inline_href_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_href(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let href: string | null = null;\n        let text = nodeContentToString(process, node);\n        if (text.indexOf(\",\") !== -1) {\n            href = text.slice(0, text.indexOf(\",\"));\n            text = text.slice(text.indexOf(\",\") + 1).trimLeft();\n        }\n        if (href) {\n            process.out(text).out(\"（△\").out(href).out(\"☆）\");\n        } else {\n            process.out(\"△\").out(text).out(\"☆\");\n        }\n        return false;\n    }\n\n    block_label(_process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        return false;\n    }\n\n    inline_ruby(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let contentString = nodeContentToString(process, node);\n        let keywordData = contentString.split(\",\");\n        process.out(keywordData[0]);\n        return (_v: TreeVisitor) => {\n            // name, args はパス\n            node.childNodes.forEach(_node => {\n                process.out(\"◆→DTP連絡:「\").out(keywordData[0]);\n                process.out(\"」に「 \").out(keywordData[1].trim()).out(\"」とルビ←◆\");\n            });\n        };\n    }\n\n    inline_u_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"＠\");\n    }\n\n    inline_u_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"＠◆→＠〜＠部分に下線←◆\");\n    }\n\n    inline_kw(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.out(\"★\");\n        return (_v: TreeVisitor) => {\n            // name, args はパス\n            node.childNodes.forEach(node => {\n                let contentString = nodeContentToString(process, node);\n                let keywordData = contentString.split(\",\");\n                let pre = keywordData[0];\n                let post = (keywordData[1] || \"\").trimLeft();\n                process.out(`${pre}☆`);\n                if (post) {\n                    process.out(`（${post}）`);\n                }\n            });\n        };\n    }\n\n    inline_tt_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"△\");\n    }\n\n    inline_tt_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_em_pre(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        process.warn(t(\"compile.deprecated_inline_symbol\", \"em\"), node);\n        process.out(\"@<em>{\");\n    }\n\n    inline_em_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"}\");\n    }\n\n    block_image(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        let label = nodeContentToString(process, node.args[0]);\n        return process.findImageFile(label)\n            .then(imagePath => {\n                let caption = nodeContentToString(process, node.args[1]);\n                process.out(\"◆→開始:図←◆\\n\");\n                process.out(\"図\").out(process.base.chapter!.no).out(\".\").out(node.no).out(\"　\").out(caption).out(\"\\n\");\n                process.out(\"\\n\");\n                process.out(\"◆→\").out(imagePath).out(\"←◆\\n\");\n                process.out(\"◆→終了:図←◆\\n\");\n                return false;\n            })\n            .catch(id => {\n                process.error(t(\"builder.image_not_found\", id), node);\n                return false;\n            });\n    }\n\n    block_indepimage(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→画像 \").out(nodeContentToString(process, node.args[0])).out(\"←◆\\n\");\n        if (node.args[1]) {\n            process.out(\"図　\").out(nodeContentToString(process, node.args[1])).out(\"\\n\\n\");\n        }\n        return false;\n    }\n\n    block_graph_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"◆→開始:図←◆\\n\");\n        let toolName = nodeContentToString(process, node.args[1]);\n        process.outRaw(\"graph: \").out(toolName).outRaw(\"</p>\\n\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_graph_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.outRaw(\"◆→終了:図←◆\\n\");\n    }\n\n    inline_img(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let imgNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        process.out(\"図\").out(process.base.chapter!.no).out(\".\").out(imgNode.no).out(\"\\n\");\n        return false;\n    }\n\n    inline_icon(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO ファイル名探索ロジックをもっと頑張る(jpgとかsvgとか)\n        let chapterFileName = process.base.chapter!.name;\n        let chapterName = chapterFileName.substring(0, chapterFileName.length - 3);\n        let imageName = nodeContentToString(process, node);\n        let imagePath = \"images/\" + chapterName + \"-\" + imageName + \".png\";\n        process.out(\"◆→画像 \").out(imagePath).out(\"←◆\");\n        return false;\n    }\n\n    block_footnote(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"【注\").out(node.no).out(\"】\");\n        return (v: TreeVisitor) => {\n            visit(node.args[1], v);\n            process.out(\"\\n\");\n        };\n    }\n\n    inline_fn(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let footnoteNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        process.out(\"【注\").out(footnoteNode.no).out(\"】\");\n        return false;\n    }\n\n    block_lead_pre(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:リード←◆\\n\");\n    }\n\n    block_lead_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"◆→終了:リード←◆\\n\");\n    }\n\n    inline_tti_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"▲\");\n    }\n\n    inline_tti_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆◆→等幅フォントイタ←◆\");\n    }\n\n    inline_ttb_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"★\");\n    }\n\n    inline_ttb_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆◆→等幅フォント太字←◆\");\n    }\n\n    block_noindent(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"◆→DTP連絡:次の1行インデントなし←◆\\n\");\n        return false;\n    }\n\n    block_source_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:ソースコードリスト←◆\\n\");\n        process.out(\"■\").out(nodeContentToString(process, node.args[0])).out(\"\\n\");\n\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_source_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"\\n◆→終了:ソースコードリスト←◆\\n\");\n    }\n\n    block_cmd_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:コマンド←◆\\n\");\n\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_cmd_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"\\n◆→終了:コマンド←◆\\n\");\n    }\n\n    block_quote_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→開始:引用←◆\\n\");\n\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_quote_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"\\n◆→終了:引用←◆\\n\");\n    }\n\n    inline_ami_pre(_process: BuilderProcess, _node: InlineElementSyntaxTree) {\n    }\n\n    inline_ami_post(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO 入れ子になっている場合オペレータさんにイミフな出力になっちゃう\n        process.out(\"◆→DTP連絡:「\").out(nodeContentToString(process, node)).out(\"」に網カケ←◆\");\n    }\n\n    inline_bou_pre(_process: BuilderProcess, _node: InlineElementSyntaxTree) {\n    }\n\n    inline_bou_post(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO 入れ子になっている場合オペレータさんにイミフな出力になっちゃう\n        process.out(\"◆→DTP連絡:「\").out(nodeContentToString(process, node)).out(\"」に傍点←◆\");\n    }\n\n    inline_i_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"▲\");\n    }\n\n    inline_i_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_m_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        // TODO\n        process.outRaw(\"TODO: \");\n    }\n\n    inline_m_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.outRaw(\"\");\n    }\n\n    inline_strong_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"★\");\n    }\n\n    inline_strong_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"☆\");\n    }\n\n    inline_uchar(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let hexString = nodeContentToString(process, node);\n        let code = parseInt(hexString, 16);\n        let result = \"\";\n        /* tslint:disable:no-bitwise */\n        while (code !== 0) {\n            result = String.fromCharCode(code & 0xFFFF) + result;\n            code >>>= 16;\n        }\n        /* tslint:enable:no-bitwise */\n        process.out(result);\n        return false;\n    }\n\n    block_table_pre(process: BuilderProcess, node: BlockElementSyntaxTree): TreeVisitorReturn {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.out(\"◆→開始:表←◆\\n\");\n        process.out(\"TODO 現在table記法は仮実装です\\n\");\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let text = t(\"builder.table\", chapter.fqn, node.no);\n        process.out(text).out(\"　\").out(nodeContentToString(process, node.args[1])).out(\"\\n\\n\");\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_table_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        process.out(\"\\n◆→終了:表←◆\\n\");\n    }\n\n    inline_table(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        let chapter = findChapter(node, 1);\n        if (!chapter) {\n            process.error(t(\"builder.chapter_not_found\", 1), node);\n            return false;\n        }\n        let listNode = this.findReference(process, node).referenceTo!.referenceNode!.toBlockElement();\n        let text = t(\"builder.table\", chapter.fqn, listNode.no);\n        process.out(text);\n        return false;\n    }\n\n    block_tsize(_process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        // TODO 以下はとりあえず正規のRe:VIEW文書が食えるようにするための仮実装\n        return false;\n    }\n\n    block_comment_pre(process: BuilderProcess, node: BlockElementSyntaxTree) {\n        process.out(\"◆→DTP連絡:\");\n\n        return (v: TreeVisitor) => {\n            // name, args はパスしたい\n            node.childNodes.forEach((node) => {\n                visit(node, v);\n            });\n        };\n    }\n\n    block_comment_post(process: BuilderProcess, _node: BlockElementSyntaxTree) {\n        process.out(\"←◆\\n\");\n    }\n\n    inline_comment_pre(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"◆→DTP連絡:\");\n    }\n\n    inline_comment_post(process: BuilderProcess, _node: InlineElementSyntaxTree) {\n        process.out(\"←◆\");\n    }\n\n    inline_chap(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        process.out(\"第\").out(chapter.no).out(\"章\");\n        return false;\n    }\n\n    inline_title(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        let title = this.getChapterTitle(process, chapter);\n        process.out(title);\n        return false;\n    }\n\n    inline_chapref(process: BuilderProcess, node: InlineElementSyntaxTree) {\n        let chapName = nodeContentToString(process, node);\n        let chapter = process.findChapter(chapName);\n        let title = this.getChapterTitle(process, chapter);\n        process.out(\"第\").out(chapter.no).out(\"章「\").out(title).out(\"」\");\n        return false;\n    }\n}\n"]}