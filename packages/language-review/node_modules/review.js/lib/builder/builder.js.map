{"version":3,"file":"builder.js","sourceRoot":"","sources":["builder.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { AnalyzerError } from \"../js/exception\";\n\nimport { Book, BuilderProcess, ContentChunk, Symbol } from \"../model/compilerModel\";\n\nimport { SyntaxTree, NodeSyntaxTree, ChapterSyntaxTree, BlockElementSyntaxTree, InlineElementSyntaxTree, HeadlineSyntaxTree, UlistElementSyntaxTree, OlistElementSyntaxTree, DlistElementSyntaxTree, TextNodeSyntaxTree, ColumnSyntaxTree, ColumnHeadlineSyntaxTree, SingleLineCommentSyntaxTree } from \"../parser/parser\";\n\nimport { visit, visitAsync } from \"../parser/walker\";\n\nimport { nodeContentToString, findUp } from \"../utils/utils\";\n\n/**\n * IAnalyzerとIValidatorでチェックをした後に構文木から出力を生成する。\n */\nexport interface Builder {\n    name: string;\n    extention: string;\n    init(book: Book): Promise<void>;\n    escape(data: any): string;\n    chapterPre(process: BuilderProcess, node: ChapterSyntaxTree): any;\n    chapterPost(process: BuilderProcess, node: ChapterSyntaxTree): any;\n    headlinePre(process: BuilderProcess, name: string, node: HeadlineSyntaxTree): any;\n    headlinePost(process: BuilderProcess, name: string, node: HeadlineSyntaxTree): any;\n    columnPre(process: BuilderProcess, node: ColumnSyntaxTree): any;\n    columnPost(process: BuilderProcess, node: ColumnSyntaxTree): any;\n    columnHeadlinePre(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): any;\n    columnHeadlinePost(process: BuilderProcess, node: ColumnHeadlineSyntaxTree): any;\n    ulistPre(process: BuilderProcess, name: string, node: UlistElementSyntaxTree): any;\n    ulistPost(process: BuilderProcess, name: string, node: UlistElementSyntaxTree): any;\n    olistPre(process: BuilderProcess, name: string, node: OlistElementSyntaxTree): any;\n    olistPost(process: BuilderProcess, name: string, node: OlistElementSyntaxTree): any;\n    blockPre(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;\n    blockPost(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any;\n    inlinePre(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;\n    inlinePost(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any;\n    text(process: BuilderProcess, node: TextNodeSyntaxTree): any;\n    singleLineComment?(process: BuilderProcess, node: SingleLineCommentSyntaxTree): any;\n}\n\n/**\n * デフォルトのビルダ。\n * Re:VIEWのASTから何らかのテキストに変換する時はこのクラスを拡張し作成する。\n */\nexport class DefaultBuilder implements Builder {\n    book: Book;\n    extention = \"bug\";\n\n    get name(): string {\n        return (<any>this).constructor.name;\n    }\n\n    init(book: Book): Promise<void> {\n        this.book = book;\n\n        return Promise.all(book.allChunks.map(chunk => this.processAst(chunk))).then(() => null);\n    }\n\n    processAst(chunk: ContentChunk): Promise<void> {\n        let process = chunk.createBuilderProcess(this);\n        return visitAsync(chunk.tree.ast, {\n            visitDefaultPre: (_node: SyntaxTree) => {\n            },\n            visitChapterPre: (node: ChapterSyntaxTree) => {\n                return this.chapterPre(process, node);\n            },\n            visitChapterPost: (node: ChapterSyntaxTree) => {\n                return this.chapterPost(process, node);\n            },\n            visitHeadlinePre: (node: HeadlineSyntaxTree) => {\n                return this.headlinePre(process, \"hd\", node);\n            },\n            visitHeadlinePost: (node: HeadlineSyntaxTree) => {\n                return this.headlinePost(process, \"hd\", node);\n            },\n            visitColumnPre: (node: ColumnSyntaxTree) => {\n                return this.columnPre(process, node);\n            },\n            visitColumnPost: (node: ColumnSyntaxTree) => {\n                return this.columnPost(process, node);\n            },\n            visitColumnHeadlinePre: (node: ColumnHeadlineSyntaxTree) => {\n                return this.columnHeadlinePre(process, node);\n            },\n            visitColumnHeadlinePost: (node: ColumnHeadlineSyntaxTree) => {\n                return this.columnHeadlinePost(process, node);\n            },\n            visitParagraphPre: (node: NodeSyntaxTree) => {\n                return this.paragraphPre(process, \"p\", node);\n            },\n            visitParagraphPost: (node: NodeSyntaxTree) => {\n                return this.paragraphPost(process, \"p\", node);\n            },\n            visitUlistPre: (node: UlistElementSyntaxTree) => {\n                return this.ulistPre(process, \"ul\", node);\n            },\n            visitUlistPost: (node: UlistElementSyntaxTree) => {\n                return this.ulistPost(process, \"ul\", node);\n            },\n            visitOlistPre: (node: OlistElementSyntaxTree) => {\n                return this.olistPre(process, \"ol\", node);\n            },\n            visitOlistPost: (node: OlistElementSyntaxTree) => {\n                return this.olistPost(process, \"ol\", node);\n            },\n            visitDlistPre: (node: DlistElementSyntaxTree) => {\n                return this.dlistPre(process, \"dl\", node);\n            },\n            visitDlistPost: (node: DlistElementSyntaxTree) => {\n                return this.dlistPost(process, \"dl\", node);\n            },\n            visitBlockElementPre: (node: BlockElementSyntaxTree) => {\n                return this.blockPre(process, node.symbol, node);\n            },\n            visitBlockElementPost: (node: BlockElementSyntaxTree) => {\n                return this.blockPost(process, node.symbol, node);\n            },\n            visitInlineElementPre: (node: InlineElementSyntaxTree) => {\n                return this.inlinePre(process, node.symbol, node);\n            },\n            visitInlineElementPost: (node: InlineElementSyntaxTree) => {\n                return this.inlinePost(process, node.symbol, node);\n            },\n            visitTextPre: (node: TextNodeSyntaxTree) => {\n                this.text(process, node);\n            },\n            visitSingleLineCommentPre: (node: SingleLineCommentSyntaxTree) => {\n                this.singleLineComment(process, node);\n            }\n        })\n            .then(() => {\n                this.processPost(process, chunk);\n                return Promise.all(chunk.nodes.map(chunk => this.processAst(chunk))).then(() => null);\n            });\n    }\n\n    escape(_data: any): string {\n        throw new Error(\"please override this method\");\n    }\n\n    getChapterTitle(process: BuilderProcess, chapter: ContentChunk): string | null {\n        let chapterNode: ChapterSyntaxTree | null = null as any;\n        visit(chapter.tree.ast, {\n            visitDefaultPre: (_node, _parent) => {\n                return !chapterNode;\n            },\n            visitChapterPre: (node, _parent) => {\n                chapterNode = node;\n                return false;\n            }\n        });\n        if (!chapterNode) {\n            return null;\n        }\n        return nodeContentToString(process, chapterNode.headline);\n    }\n\n    processPost(_process: BuilderProcess, _chunk: ContentChunk): void {\n    }\n\n    chapterPre(_process: BuilderProcess, _node: ChapterSyntaxTree): any {\n    }\n\n    chapterPost(_process: BuilderProcess, _node: ChapterSyntaxTree): any {\n    }\n\n    headlinePre(_process: BuilderProcess, _name: string, _node: HeadlineSyntaxTree): any {\n    }\n\n    headlinePost(_process: BuilderProcess, _name: string, _node: HeadlineSyntaxTree): any {\n    }\n\n    columnPre(_process: BuilderProcess, _node: ColumnSyntaxTree): any {\n    }\n\n    columnPost(_process: BuilderProcess, _node: ColumnSyntaxTree): any {\n    }\n\n    columnHeadlinePre(_process: BuilderProcess, _node: ColumnHeadlineSyntaxTree): any {\n    }\n\n    columnHeadlinePost(_process: BuilderProcess, _node: ColumnHeadlineSyntaxTree): any {\n    }\n\n    paragraphPre(_process: BuilderProcess, _name: string, _node: NodeSyntaxTree): any {\n    }\n\n    paragraphPost(_process: BuilderProcess, _name: string, _node: NodeSyntaxTree): any {\n    }\n\n    ulistPre(_process: BuilderProcess, _name: string, _node: UlistElementSyntaxTree): any {\n    }\n\n    ulistPost(_process: BuilderProcess, _name: string, _node: UlistElementSyntaxTree): any {\n    }\n\n    olistPre(_process: BuilderProcess, _name: string, _node: OlistElementSyntaxTree): any {\n    }\n\n    olistPost(_process: BuilderProcess, _name: string, _node: OlistElementSyntaxTree): any {\n    }\n\n    dlistPre(_process: BuilderProcess, _name: string, _node: DlistElementSyntaxTree): any {\n    }\n\n    dlistPost(_process: BuilderProcess, _name: string, _node: DlistElementSyntaxTree): any {\n    }\n\n    text(process: BuilderProcess, node: TextNodeSyntaxTree): any {\n        // TODO in paragraph だったら note.text.replace(\"\\n\", \"\") したほうが良い…\n        process.out(node.text);\n    }\n\n    blockPre(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any {\n        let func: Function;\n        func = (<any>this)[`block_${name}`];\n        if (typeof func === \"function\") {\n            return func.call(this, process, node);\n        }\n\n        func = (<any>this)[`block_${name}_pre`];\n        if (typeof func !== \"function\") {\n            throw new AnalyzerError(`block_${name}_pre or block_${name} is not Function`);\n        }\n        return func.call(this, process, node);\n    }\n\n    blockPost(process: BuilderProcess, name: string, node: BlockElementSyntaxTree): any {\n        let func: Function;\n        func = (<any>this)[`block_${name}`];\n        if (typeof func === \"function\") {\n            return;\n        }\n\n        func = (<any>this)[`block_${name}_post`];\n        if (typeof func !== \"function\") {\n            throw new AnalyzerError(`block_${name}_post is not Function`);\n        }\n        return func.call(this, process, node);\n    }\n\n    inlinePre(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any {\n        let func: Function;\n        func = (<any>this)[`inline_${name}`];\n        if (typeof func === \"function\") {\n            return func.call(this, process, node);\n        }\n\n        func = (<any>this)[`inline_${name}_pre`];\n        if (typeof func !== \"function\") {\n            throw new AnalyzerError(`inline_${name}_pre or inline_${name} is not Function`);\n        }\n        return func.call(this, process, node);\n    }\n\n    inlinePost(process: BuilderProcess, name: string, node: InlineElementSyntaxTree): any {\n        let func: Function;\n        func = (<any>this)[`inline_${name}`];\n        if (typeof func === \"function\") {\n            return;\n        }\n\n        func = (<any>this)[`inline_${name}_post`];\n        if (typeof func !== \"function\") {\n            throw new AnalyzerError(`inline_${name}_post is not Function`);\n        }\n        return func.call(this, process, node);\n    }\n\n    ulistParentHelper(process: BuilderProcess, node: UlistElementSyntaxTree, action: () => void, currentLevel: number = node.level) {\n        if (currentLevel !== 1) {\n            let result = findUp(node.parentNode, (n) => {\n                if (n instanceof UlistElementSyntaxTree) {\n                    return n.level === (currentLevel - 1);\n                }\n                return false;\n            });\n            if (result) {\n                return;\n            }\n            action();\n            this.ulistParentHelper(process, node, action, currentLevel - 1);\n        }\n    }\n\n    findReference(process: BuilderProcess, node: SyntaxTree): Symbol {\n        let founds = process.symbols.filter(symbol => symbol.node === node);\n        if (founds.length !== 1) {\n            throw new AnalyzerError(\"invalid status.\");\n        }\n        return founds[0];\n    }\n\n    block_raw(process: BuilderProcess, node: BlockElementSyntaxTree): any {\n        // TODO Ruby版との出力差が結構あるのでテスト含め直す\n        let content = nodeContentToString(process, node.args[0]);\n        let matches = content.match(/\\|(.+)\\|/);\n        if (matches && matches[1]) {\n            let target = matches[1].split(\",\").some(name => this.name.toLowerCase() === `${name}builder`);\n            if (target) {\n                // \"|hoge,fuga| piyo\" の場合 matches[1] === \"hoge,fuga\"\n                process.outRaw(content.substring(matches[0].length));\n            }\n        } else {\n            process.outRaw(content);\n        }\n        return false;\n    }\n\n    inline_raw(process: BuilderProcess, node: InlineElementSyntaxTree): any {\n        let content = nodeContentToString(process, node);\n        let matches = content.match(/\\|(.+)\\|/);\n        if (matches && matches[1]) {\n            let target = matches[1].split(\",\").some(name => this.name.toLowerCase() === `${name}builder`);\n            if (target) {\n                // \"|hoge,fuga| piyo\" の場合 matches[1] === \"hoge,fuga\"\n                process.outRaw(content.substring(matches[0].length));\n            }\n        } else {\n            process.outRaw(content);\n        }\n        return false;\n    }\n\n    singleLineComment(_process: BuilderProcess, _node: SingleLineCommentSyntaxTree): any {\n        // 特に何もしない\n    }\n}\n"]}