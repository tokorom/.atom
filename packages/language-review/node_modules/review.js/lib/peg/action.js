"use strict";
var parser_1 = require("../parser/parser");
var env;
function checkRuleName(ruleName) {
    "use strict";
    // undefined or index 0 is invalid name
    if (!parser_1.RuleName[ruleName]) {
        throw new Error("unknown rule: " + ruleName);
    }
    return ruleName;
}
function setup(_env) {
    "use strict";
    env = _env;
}
exports.setup = setup;
function content(ruleName, c) {
    "use strict";
    return {
        syntax: checkRuleName(ruleName),
        location: env.location(),
        content: c
    };
}
exports.content = content;
function contents(ruleName, c, cc) {
    "use strict";
    var processed = [c];
    if (cc) {
        if (Array.isArray(cc.content)) {
            cc.content.forEach(function (c) { return processed.push(c); });
        }
        else {
            processed.push(cc.content);
        }
    }
    return {
        syntax: checkRuleName(ruleName),
        location: env.location(),
        content: processed
    };
}
exports.contents = contents;
function text(ruleName, text) {
    "use strict";
    return {
        syntax: checkRuleName(ruleName),
        location: env.location(),
        text: text
    };
}
exports.text = text;
function chapter(comments, headline, text) {
    "use strict";
    return {
        syntax: checkRuleName("Chapter"),
        location: env.location(),
        comments: comments,
        headline: headline,
        text: text
    };
}
exports.chapter = chapter;
function headline(level, label, caption) {
    "use strict";
    return {
        syntax: checkRuleName("Headline"),
        location: env.location(),
        level: level.length,
        label: label,
        caption: caption
    };
}
exports.headline = headline;
function blockElement(symbol, args, contents) {
    "use strict";
    if (contents === void 0) { contents = []; }
    return {
        syntax: checkRuleName("BlockElement"),
        location: env.location(),
        symbol: symbol,
        args: args,
        content: contents
    };
}
exports.blockElement = blockElement;
function inlineElement(symbol, contents) {
    "use strict";
    if (contents === void 0) { contents = []; }
    return {
        syntax: checkRuleName("InlineElement"),
        location: env.location(),
        symbol: symbol,
        content: contents
    };
}
exports.inlineElement = inlineElement;
function column(headline, text) {
    "use strict";
    return {
        syntax: checkRuleName("Column"),
        location: env.location(),
        headline: headline,
        text: text
    };
}
exports.column = column;
function columnHeadline(level, caption) {
    "use strict";
    return {
        syntax: checkRuleName("ColumnHeadline"),
        location: env.location(),
        level: level.length,
        caption: caption
    };
}
exports.columnHeadline = columnHeadline;
function columnTerminator(level) {
    "use strict";
    return {
        syntax: checkRuleName("ColumnTerminator"),
        location: env.location(),
        level: level.length
    };
}
exports.columnTerminator = columnTerminator;
function braceArg(arg) {
    "use strict";
    return {
        syntax: checkRuleName("BraceArg"),
        location: env.location(),
        arg: arg
    };
}
exports.braceArg = braceArg;
function ulistElement(level, text) {
    "use strict";
    return {
        syntax: checkRuleName("UlistElement"),
        location: env.location(),
        level: level.length,
        text: text
    };
}
exports.ulistElement = ulistElement;
function olistElement(n, text) {
    "use strict";
    return {
        syntax: checkRuleName("OlistElement"),
        location: env.location(),
        no: parseInt(n, 10),
        text: text
    };
}
exports.olistElement = olistElement;
function dlistElement(text, content) {
    "use strict";
    return {
        syntax: checkRuleName("DlistElement"),
        location: env.location(),
        text: text,
        content: content
    };
}
exports.dlistElement = dlistElement;
//# sourceMappingURL=action.js.map