"use strict";
var ReVIEW = require("review.js");
var prh = require("prh");
/* tslint:disable:no-require-imports */
var ReVIEWWalker = require("review.js/lib/parser/walker");
var ReVIEWUtils = require("review.js/lib/utils/utils");
/* tslint:enable:no-require-imports */
var TextValidator = (function () {
    function TextValidator(yamlPath) {
        this.ignoreInlineNames = [
            "list",
            "img",
            "fn",
            "code",
        ];
        this.ignoreBlockNames = [
            "list",
            "listnum",
            "emlist",
            "emlistnum",
            "image",
            "cmd",
        ];
        this.engine = prh.fromYAMLFilePath(yamlPath);
    }
    TextValidator.prototype.start = function (book) {
        var _this = this;
        book.predef.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.contents.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.appendix.forEach(function (chunk) { return _this.checkChunk(chunk); });
        book.postdef.forEach(function (chunk) { return _this.checkChunk(chunk); });
    };
    TextValidator.prototype.checkChunk = function (chunk) {
        var _this = this;
        var ignoreInlineStack = [];
        var ignoreBlockStack = [];
        ReVIEWWalker.visit(chunk.tree.ast, {
            visitDefaultPre: function (_node) {
            },
            visitInlineElementPre: function (node, _parent) {
                if (_this.ignoreInlineNames.indexOf(node.symbol) !== -1) {
                    ignoreInlineStack.push(node.symbol);
                }
            },
            visitInlineElementPost: function (node, _parent) {
                if (_this.ignoreInlineNames.indexOf(node.symbol) !== -1) {
                    ignoreInlineStack.pop();
                }
            },
            visitBlockElementPre: function (node, _parent) {
                if (_this.ignoreBlockNames.indexOf(node.symbol) !== -1) {
                    ignoreBlockStack.push(node.symbol);
                }
            },
            visitBlockElementPost: function (node, _parent) {
                if (_this.ignoreBlockNames.indexOf(node.symbol) !== -1) {
                    ignoreBlockStack.pop();
                }
            },
            visitTextPre: function (node) {
                if (ignoreInlineStack.length !== 0 || ignoreBlockStack.length !== 0) {
                    return;
                }
                // 現在がParagraphの中なら親(Paragraph)の兄を取るとコメントの可能性がある
                var suppress = false;
                ReVIEWWalker.walk(node.parentNode, function (node) {
                    if (!node.prev) {
                        return node.parentNode;
                    }
                    var prev = node.prev;
                    if (prev instanceof ReVIEW.SingleLineCommentSyntaxTree) {
                        if (prev.text.indexOf("prh:disable") !== -1) {
                            suppress = true;
                            return null;
                        }
                    }
                    return node.parentNode;
                });
                if (suppress) {
                    return;
                }
                // 現在のがfootnoteのargの中ならfootnoteの兄を取るとコメントの可能性がある
                {
                    var footnote = ReVIEWUtils.findUp(node, function (node) {
                        if (node instanceof ReVIEW.BlockElementSyntaxTree) {
                            var block = node.toBlockElement();
                            return block.symbol === "footnote";
                        }
                        return false;
                    });
                    if (footnote) {
                        var prev = node.prev;
                        if (prev instanceof ReVIEW.SingleLineCommentSyntaxTree) {
                            if (prev.text.indexOf("prh:disable") !== -1) {
                                return;
                            }
                        }
                    }
                }
                var text = chunk.input.substring(node.location.start.offset, node.location.end.offset);
                var changeSets = _this.engine.makeChangeSet(chunk.name, text);
                changeSets.diffs.forEach(function (changeSet) {
                    var result = changeSet.expected.replace(/\$([0-9]{1,2})/g, function (match, g1) {
                        var index = parseInt(g1, 10);
                        if (index === 0 || (changeSet.matches.length - 1) < index) {
                            return match;
                        }
                        return changeSet.matches[index] || "";
                    });
                    if (result === changeSet.matches[0]) {
                        return;
                    }
                    var message;
                    if (changeSet.rule.raw.prh) {
                        message = "'" + result + "' " + changeSet.rule.raw.prh;
                    }
                    else {
                        message = result;
                    }
                    chunk.process.warn(message, getNodeLocation(node, changeSet.index, changeSet.matches[0].length));
                });
            },
        });
        function getNodeLocation(node, targetIndex, targetLength) {
            return {
                location: {
                    start: {
                        line: node.location.start.line,
                        column: node.location.start.column + targetIndex,
                        offset: node.location.start.offset + targetIndex,
                    },
                    end: {
                        line: node.location.start.line,
                        column: node.location.start.column + targetIndex + targetLength,
                        offset: node.location.start.offset + targetIndex + targetLength,
                    },
                },
            };
        }
    };
    return TextValidator;
}());
exports.TextValidator = TextValidator;
//# sourceMappingURL=index.js.map