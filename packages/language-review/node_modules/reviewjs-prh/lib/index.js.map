{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ReVIEW from \"review.js\";\nimport * as prh from \"prh\";\n\n/* tslint:disable:no-require-imports */\nimport ReVIEWWalker = require(\"review.js/lib/parser/walker\");\nimport ReVIEWUtils = require(\"review.js/lib/utils/utils\");\n/* tslint:enable:no-require-imports */\n\nexport class TextValidator implements ReVIEW.Validator {\n    engine: prh.Engine;\n\n    ignoreInlineNames = [\n        \"list\",\n        \"img\",\n        \"fn\",\n        \"code\",\n    ];\n    ignoreBlockNames = [\n        \"list\",\n        \"listnum\",\n        \"emlist\",\n        \"emlistnum\",\n        \"image\",\n        \"cmd\",\n    ];\n\n    constructor(yamlPath: string) {\n        this.engine = prh.fromYAMLFilePath(yamlPath);\n    }\n\n    start(book: ReVIEW.Book) {\n        book.predef.forEach(chunk => this.checkChunk(chunk));\n        book.contents.forEach(chunk => this.checkChunk(chunk));\n        book.appendix.forEach(chunk => this.checkChunk(chunk));\n        book.postdef.forEach(chunk => this.checkChunk(chunk));\n    }\n\n    checkChunk(chunk: ReVIEW.ContentChunk) {\n        let ignoreInlineStack: string[] = [];\n        let ignoreBlockStack: string[] = [];\n        ReVIEWWalker.visit(chunk.tree.ast, {\n            visitDefaultPre: (_node: ReVIEW.SyntaxTree) => {\n            },\n            visitInlineElementPre: (node: ReVIEW.InlineElementSyntaxTree, _parent: ReVIEW.SyntaxTree) => {\n                if (this.ignoreInlineNames.indexOf(node.symbol) !== -1) {\n                    ignoreInlineStack.push(node.symbol);\n                }\n            },\n            visitInlineElementPost: (node: ReVIEW.InlineElementSyntaxTree, _parent: ReVIEW.SyntaxTree) => {\n                if (this.ignoreInlineNames.indexOf(node.symbol) !== -1) {\n                    ignoreInlineStack.pop();\n                }\n            },\n            visitBlockElementPre: (node: ReVIEW.BlockElementSyntaxTree, _parent: ReVIEW.SyntaxTree) => {\n                if (this.ignoreBlockNames.indexOf(node.symbol) !== -1) {\n                    ignoreBlockStack.push(node.symbol);\n                }\n            },\n            visitBlockElementPost: (node: ReVIEW.BlockElementSyntaxTree, _parent: ReVIEW.SyntaxTree) => {\n                if (this.ignoreBlockNames.indexOf(node.symbol) !== -1) {\n                    ignoreBlockStack.pop();\n                }\n            },\n\n            visitTextPre: (node: ReVIEW.TextNodeSyntaxTree) => {\n                if (ignoreInlineStack.length !== 0 || ignoreBlockStack.length !== 0) {\n                    return;\n                }\n\n                // 現在がParagraphの中なら親(Paragraph)の兄を取るとコメントの可能性がある\n                let suppress = false;\n                ReVIEWWalker.walk(node.parentNode, node => {\n                    if (!node.prev) {\n                        return node.parentNode;\n                    }\n\n                    let prev = node.prev;\n                    if (prev instanceof ReVIEW.SingleLineCommentSyntaxTree) {\n                        if (prev.text.indexOf(\"prh:disable\") !== -1) {\n                            suppress = true;\n                            return null;\n                        }\n                    }\n                    return node.parentNode;\n                });\n                if (suppress) {\n                    return;\n                }\n\n                // 現在のがfootnoteのargの中ならfootnoteの兄を取るとコメントの可能性がある\n                {\n                    let footnote = ReVIEWUtils.findUp(node, node => {\n                        if (node instanceof ReVIEW.BlockElementSyntaxTree) {\n                            let block = node.toBlockElement();\n                            return block.symbol === \"footnote\";\n                        }\n\n                        return false;\n                    });\n                    if (footnote) {\n                        let prev = node.prev;\n                        if (prev instanceof ReVIEW.SingleLineCommentSyntaxTree) {\n                            if (prev.text.indexOf(\"prh:disable\") !== -1) {\n                                return;\n                            }\n                        }\n                    }\n                }\n\n\n                let text = chunk.input.substring(node.location.start.offset, node.location.end!.offset);\n                let changeSets = this.engine.makeChangeSet(chunk.name, text);\n                changeSets.diffs.forEach(changeSet => {\n                    let result = changeSet.expected.replace(/\\$([0-9]{1,2})/g, (match: string, g1: string) => {\n                        let index = parseInt(g1, 10);\n                        if (index === 0 || (changeSet.matches.length - 1) < index) {\n                            return match;\n                        }\n                        return changeSet.matches[index] || \"\";\n                    });\n                    if (result === changeSet.matches[0]) {\n                        return;\n                    }\n\n                    let message: string;\n                    if (changeSet.rule!.raw.prh) {\n                        message = `'${result}' ${changeSet.rule!.raw.prh}`;\n                    } else {\n                        message = result;\n                    }\n                    chunk.process.warn(message, getNodeLocation(node, changeSet.index, changeSet.matches[0].length));\n                });\n            },\n        });\n\n        function getNodeLocation(node: ReVIEW.SyntaxTree, targetIndex: number, targetLength: number): ReVIEW.NodeLocation {\n            return {\n                location: {\n                    start: {\n                        line: node.location.start.line,\n                        column: node.location.start.column + targetIndex,\n                        offset: node.location.start.offset + targetIndex,\n                    },\n                    end: {\n                        line: node.location.start.line,\n                        column: node.location.start.column + targetIndex + targetLength,\n                        offset: node.location.start.offset + targetIndex + targetLength,\n                    },\n                },\n            };\n        }\n    }\n}\n"]}